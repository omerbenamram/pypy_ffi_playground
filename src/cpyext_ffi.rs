/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    storage: Storage,
    align: [Align; 0],
}

impl<Storage, Align> __BindgenBitfieldUnit<Storage, Align>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn new(storage: Storage) -> Self {
        Self { storage, align: [] }
    }

    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];

        let bit_index = index % 8;
        let mask = 1 << bit_index;

        byte & mask == mask
    }

    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());

        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];

        let bit_index = index % 8;
        let mask = 1 << bit_index;

        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }

    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        let mut val = 0;

        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                val |= 1 << i;
            }
        }

        val
    }

    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());

        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            self.set_bit(i + bit_offset, val_bit_is_set);
        }
    }
}
pub const _GNU_SOURCE: u32 = 1;
pub const __PRI_8_LENGTH_MODIFIER__: &'static [u8; 3usize] = b"hh\0";
pub const __PRI_64_LENGTH_MODIFIER__: &'static [u8; 3usize] = b"ll\0";
pub const __SCN_64_LENGTH_MODIFIER__: &'static [u8; 3usize] = b"ll\0";
pub const __PRI_MAX_LENGTH_MODIFIER__: &'static [u8; 2usize] = b"j\0";
pub const __SCN_MAX_LENGTH_MODIFIER__: &'static [u8; 2usize] = b"j\0";
pub const PRId8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIi8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIo8: &'static [u8; 4usize] = b"hho\0";
pub const PRIu8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIx8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIX8: &'static [u8; 4usize] = b"hhX\0";
pub const PRId16: &'static [u8; 3usize] = b"hd\0";
pub const PRIi16: &'static [u8; 3usize] = b"hi\0";
pub const PRIo16: &'static [u8; 3usize] = b"ho\0";
pub const PRIu16: &'static [u8; 3usize] = b"hu\0";
pub const PRIx16: &'static [u8; 3usize] = b"hx\0";
pub const PRIX16: &'static [u8; 3usize] = b"hX\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRId64: &'static [u8; 4usize] = b"lld\0";
pub const PRIi64: &'static [u8; 4usize] = b"lli\0";
pub const PRIo64: &'static [u8; 4usize] = b"llo\0";
pub const PRIu64: &'static [u8; 4usize] = b"llu\0";
pub const PRIx64: &'static [u8; 4usize] = b"llx\0";
pub const PRIX64: &'static [u8; 4usize] = b"llX\0";
pub const PRIdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const PRIuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIXLEAST8: &'static [u8; 4usize] = b"hhX\0";
pub const PRIdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const PRIiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const PRIoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const PRIuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const PRIxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const PRIXLEAST16: &'static [u8; 3usize] = b"hX\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIdLEAST64: &'static [u8; 4usize] = b"lld\0";
pub const PRIiLEAST64: &'static [u8; 4usize] = b"lli\0";
pub const PRIoLEAST64: &'static [u8; 4usize] = b"llo\0";
pub const PRIuLEAST64: &'static [u8; 4usize] = b"llu\0";
pub const PRIxLEAST64: &'static [u8; 4usize] = b"llx\0";
pub const PRIXLEAST64: &'static [u8; 4usize] = b"llX\0";
pub const PRIdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const PRIiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const PRIoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const PRIuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const PRIxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const PRIXFAST8: &'static [u8; 4usize] = b"hhX\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"hd\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"hi\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"ho\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"hu\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"hx\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"hX\0";
pub const PRIdFAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIiFAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIoFAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIuFAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIxFAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIXFAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIdFAST64: &'static [u8; 4usize] = b"lld\0";
pub const PRIiFAST64: &'static [u8; 4usize] = b"lli\0";
pub const PRIoFAST64: &'static [u8; 4usize] = b"llo\0";
pub const PRIuFAST64: &'static [u8; 4usize] = b"llu\0";
pub const PRIxFAST64: &'static [u8; 4usize] = b"llx\0";
pub const PRIXFAST64: &'static [u8; 4usize] = b"llX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"jd\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"ji\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"jo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"ju\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"jx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"jX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNd64: &'static [u8; 4usize] = b"lld\0";
pub const SCNi64: &'static [u8; 4usize] = b"lli\0";
pub const SCNo64: &'static [u8; 4usize] = b"llo\0";
pub const SCNu64: &'static [u8; 4usize] = b"llu\0";
pub const SCNx64: &'static [u8; 4usize] = b"llx\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNdLEAST64: &'static [u8; 4usize] = b"lld\0";
pub const SCNiLEAST64: &'static [u8; 4usize] = b"lli\0";
pub const SCNoLEAST64: &'static [u8; 4usize] = b"llo\0";
pub const SCNuLEAST64: &'static [u8; 4usize] = b"llu\0";
pub const SCNxLEAST64: &'static [u8; 4usize] = b"llx\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNdFAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNiFAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNoFAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNuFAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNxFAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNdFAST64: &'static [u8; 4usize] = b"lld\0";
pub const SCNiFAST64: &'static [u8; 4usize] = b"lli\0";
pub const SCNoFAST64: &'static [u8; 4usize] = b"llo\0";
pub const SCNuFAST64: &'static [u8; 4usize] = b"llu\0";
pub const SCNxFAST64: &'static [u8; 4usize] = b"llx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"jd\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"ji\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"jo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"ju\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"jx\0";
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_VERS_1050: u32 = 0;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 101302;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 0;
pub const __WORDSIZE: u32 = 64;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const INTMAX_MIN: i64 = -9223372036854775808;
pub const INTMAX_MAX: u64 = 9223372036854775807;
pub const UINTMAX_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const ARG_MAX: u32 = 262144;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 8192;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const FP_NAN: u32 = 1;
pub const FP_INFINITE: u32 = 2;
pub const FP_ZERO: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const FP_SUBNORMAL: u32 = 5;
pub const FP_SUPERNORMAL: u32 = 6;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const FP_SNAN: u32 = 1;
pub const FP_QNAN: u32 = 1;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EDEADLK: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EAGAIN: u32 = 35;
pub const EWOULDBLOCK: u32 = 35;
pub const EINPROGRESS: u32 = 36;
pub const EALREADY: u32 = 37;
pub const ENOTSOCK: u32 = 38;
pub const EDESTADDRREQ: u32 = 39;
pub const EMSGSIZE: u32 = 40;
pub const EPROTOTYPE: u32 = 41;
pub const ENOPROTOOPT: u32 = 42;
pub const EPROTONOSUPPORT: u32 = 43;
pub const ESOCKTNOSUPPORT: u32 = 44;
pub const ENOTSUP: u32 = 45;
pub const EPFNOSUPPORT: u32 = 46;
pub const EAFNOSUPPORT: u32 = 47;
pub const EADDRINUSE: u32 = 48;
pub const EADDRNOTAVAIL: u32 = 49;
pub const ENETDOWN: u32 = 50;
pub const ENETUNREACH: u32 = 51;
pub const ENETRESET: u32 = 52;
pub const ECONNABORTED: u32 = 53;
pub const ECONNRESET: u32 = 54;
pub const ENOBUFS: u32 = 55;
pub const EISCONN: u32 = 56;
pub const ENOTCONN: u32 = 57;
pub const ESHUTDOWN: u32 = 58;
pub const ETOOMANYREFS: u32 = 59;
pub const ETIMEDOUT: u32 = 60;
pub const ECONNREFUSED: u32 = 61;
pub const ELOOP: u32 = 62;
pub const ENAMETOOLONG: u32 = 63;
pub const EHOSTDOWN: u32 = 64;
pub const EHOSTUNREACH: u32 = 65;
pub const ENOTEMPTY: u32 = 66;
pub const EPROCLIM: u32 = 67;
pub const EUSERS: u32 = 68;
pub const EDQUOT: u32 = 69;
pub const ESTALE: u32 = 70;
pub const EREMOTE: u32 = 71;
pub const EBADRPC: u32 = 72;
pub const ERPCMISMATCH: u32 = 73;
pub const EPROGUNAVAIL: u32 = 74;
pub const EPROGMISMATCH: u32 = 75;
pub const EPROCUNAVAIL: u32 = 76;
pub const ENOLCK: u32 = 77;
pub const ENOSYS: u32 = 78;
pub const EFTYPE: u32 = 79;
pub const EAUTH: u32 = 80;
pub const ENEEDAUTH: u32 = 81;
pub const EPWROFF: u32 = 82;
pub const EDEVERR: u32 = 83;
pub const EOVERFLOW: u32 = 84;
pub const EBADEXEC: u32 = 85;
pub const EBADARCH: u32 = 86;
pub const ESHLIBVERS: u32 = 87;
pub const EBADMACHO: u32 = 88;
pub const ECANCELED: u32 = 89;
pub const EIDRM: u32 = 90;
pub const ENOMSG: u32 = 91;
pub const EILSEQ: u32 = 92;
pub const ENOATTR: u32 = 93;
pub const EBADMSG: u32 = 94;
pub const EMULTIHOP: u32 = 95;
pub const ENODATA: u32 = 96;
pub const ENOLINK: u32 = 97;
pub const ENOSR: u32 = 98;
pub const ENOSTR: u32 = 99;
pub const EPROTO: u32 = 100;
pub const ETIME: u32 = 101;
pub const EOPNOTSUPP: u32 = 102;
pub const ENOPOLICY: u32 = 103;
pub const ENOTRECOVERABLE: u32 = 104;
pub const EOWNERDEAD: u32 = 105;
pub const EQFULL: u32 = 106;
pub const ELAST: u32 = 106;
pub const _POSIX_VERSION: u32 = 200112;
pub const _POSIX2_VERSION: u32 = 200112;
pub const F_OK: u32 = 0;
pub const X_OK: u32 = 1;
pub const W_OK: u32 = 2;
pub const R_OK: u32 = 4;
pub const _READ_OK: u32 = 512;
pub const _WRITE_OK: u32 = 1024;
pub const _EXECUTE_OK: u32 = 2048;
pub const _DELETE_OK: u32 = 4096;
pub const _APPEND_OK: u32 = 8192;
pub const _RMFILE_OK: u32 = 16384;
pub const _RATTR_OK: u32 = 32768;
pub const _WATTR_OK: u32 = 65536;
pub const _REXT_OK: u32 = 131072;
pub const _WEXT_OK: u32 = 262144;
pub const _RPERM_OK: u32 = 524288;
pub const _WPERM_OK: u32 = 1048576;
pub const _CHOWN_OK: u32 = 2097152;
pub const _ACCESS_EXTENDED_MASK: u32 = 4193792;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const L_SET: u32 = 0;
pub const L_INCR: u32 = 1;
pub const L_XTND: u32 = 2;
pub const ACCESSX_MAX_DESCRIPTORS: u32 = 100;
pub const ACCESSX_MAX_TABLESIZE: u32 = 16384;
pub const _PC_LINK_MAX: u32 = 1;
pub const _PC_MAX_CANON: u32 = 2;
pub const _PC_MAX_INPUT: u32 = 3;
pub const _PC_NAME_MAX: u32 = 4;
pub const _PC_PATH_MAX: u32 = 5;
pub const _PC_PIPE_BUF: u32 = 6;
pub const _PC_CHOWN_RESTRICTED: u32 = 7;
pub const _PC_NO_TRUNC: u32 = 8;
pub const _PC_VDISABLE: u32 = 9;
pub const _PC_NAME_CHARS_MAX: u32 = 10;
pub const _PC_CASE_SENSITIVE: u32 = 11;
pub const _PC_CASE_PRESERVING: u32 = 12;
pub const _PC_EXTENDED_SECURITY_NP: u32 = 13;
pub const _PC_AUTH_OPAQUE_NP: u32 = 14;
pub const _PC_2_SYMLINKS: u32 = 15;
pub const _PC_ALLOC_SIZE_MIN: u32 = 16;
pub const _PC_ASYNC_IO: u32 = 17;
pub const _PC_FILESIZEBITS: u32 = 18;
pub const _PC_PRIO_IO: u32 = 19;
pub const _PC_REC_INCR_XFER_SIZE: u32 = 20;
pub const _PC_REC_MAX_XFER_SIZE: u32 = 21;
pub const _PC_REC_MIN_XFER_SIZE: u32 = 22;
pub const _PC_REC_XFER_ALIGN: u32 = 23;
pub const _PC_SYMLINK_MAX: u32 = 24;
pub const _PC_SYNC_IO: u32 = 25;
pub const _PC_XATTR_SIZE_BITS: u32 = 26;
pub const _PC_MIN_HOLE_SIZE: u32 = 27;
pub const _CS_PATH: u32 = 1;
pub const STDIN_FILENO: u32 = 0;
pub const STDOUT_FILENO: u32 = 1;
pub const STDERR_FILENO: u32 = 2;
pub const _XOPEN_VERSION: u32 = 600;
pub const _XOPEN_XCU_VERSION: u32 = 4;
pub const _POSIX_ADVISORY_INFO: i32 = -1;
pub const _POSIX_ASYNCHRONOUS_IO: i32 = -1;
pub const _POSIX_BARRIERS: i32 = -1;
pub const _POSIX_CHOWN_RESTRICTED: u32 = 200112;
pub const _POSIX_CLOCK_SELECTION: i32 = -1;
pub const _POSIX_CPUTIME: i32 = -1;
pub const _POSIX_FSYNC: u32 = 200112;
pub const _POSIX_IPV6: u32 = 200112;
pub const _POSIX_JOB_CONTROL: u32 = 200112;
pub const _POSIX_MAPPED_FILES: u32 = 200112;
pub const _POSIX_MEMLOCK: i32 = -1;
pub const _POSIX_MEMLOCK_RANGE: i32 = -1;
pub const _POSIX_MEMORY_PROTECTION: u32 = 200112;
pub const _POSIX_MESSAGE_PASSING: i32 = -1;
pub const _POSIX_MONOTONIC_CLOCK: i32 = -1;
pub const _POSIX_NO_TRUNC: u32 = 200112;
pub const _POSIX_PRIORITIZED_IO: i32 = -1;
pub const _POSIX_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_RAW_SOCKETS: i32 = -1;
pub const _POSIX_READER_WRITER_LOCKS: u32 = 200112;
pub const _POSIX_REALTIME_SIGNALS: i32 = -1;
pub const _POSIX_REGEXP: u32 = 200112;
pub const _POSIX_SAVED_IDS: u32 = 200112;
pub const _POSIX_SEMAPHORES: i32 = -1;
pub const _POSIX_SHARED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX_SHELL: u32 = 200112;
pub const _POSIX_SPAWN: i32 = -1;
pub const _POSIX_SPIN_LOCKS: i32 = -1;
pub const _POSIX_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_SYNCHRONIZED_IO: i32 = -1;
pub const _POSIX_THREAD_ATTR_STACKADDR: u32 = 200112;
pub const _POSIX_THREAD_ATTR_STACKSIZE: u32 = 200112;
pub const _POSIX_THREAD_CPUTIME: i32 = -1;
pub const _POSIX_THREAD_PRIO_INHERIT: i32 = -1;
pub const _POSIX_THREAD_PRIO_PROTECT: i32 = -1;
pub const _POSIX_THREAD_PRIORITY_SCHEDULING: i32 = -1;
pub const _POSIX_THREAD_PROCESS_SHARED: u32 = 200112;
pub const _POSIX_THREAD_SAFE_FUNCTIONS: u32 = 200112;
pub const _POSIX_THREAD_SPORADIC_SERVER: i32 = -1;
pub const _POSIX_THREADS: u32 = 200112;
pub const _POSIX_TIMEOUTS: i32 = -1;
pub const _POSIX_TIMERS: i32 = -1;
pub const _POSIX_TRACE: i32 = -1;
pub const _POSIX_TRACE_EVENT_FILTER: i32 = -1;
pub const _POSIX_TRACE_INHERIT: i32 = -1;
pub const _POSIX_TRACE_LOG: i32 = -1;
pub const _POSIX_TYPED_MEMORY_OBJECTS: i32 = -1;
pub const _POSIX2_C_BIND: u32 = 200112;
pub const _POSIX2_C_DEV: u32 = 200112;
pub const _POSIX2_CHAR_TERM: u32 = 200112;
pub const _POSIX2_FORT_DEV: i32 = -1;
pub const _POSIX2_FORT_RUN: u32 = 200112;
pub const _POSIX2_LOCALEDEF: u32 = 200112;
pub const _POSIX2_PBS: i32 = -1;
pub const _POSIX2_PBS_ACCOUNTING: i32 = -1;
pub const _POSIX2_PBS_CHECKPOINT: i32 = -1;
pub const _POSIX2_PBS_LOCATE: i32 = -1;
pub const _POSIX2_PBS_MESSAGE: i32 = -1;
pub const _POSIX2_PBS_TRACK: i32 = -1;
pub const _POSIX2_SW_DEV: u32 = 200112;
pub const _POSIX2_UPE: u32 = 200112;
pub const __ILP32_OFF32: i32 = -1;
pub const __ILP32_OFFBIG: u32 = 1;
pub const __LP64_OFF64: u32 = 1;
pub const __LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V6_ILP32_OFF32: i32 = -1;
pub const _POSIX_V6_ILP32_OFFBIG: u32 = 1;
pub const _POSIX_V6_LP64_OFF64: u32 = 1;
pub const _POSIX_V6_LPBIG_OFFBIG: u32 = 1;
pub const _POSIX_V7_ILP32_OFF32: i32 = -1;
pub const _POSIX_V7_ILP32_OFFBIG: u32 = 1;
pub const _POSIX_V7_LP64_OFF64: u32 = 1;
pub const _POSIX_V7_LPBIG_OFFBIG: u32 = 1;
pub const _V6_ILP32_OFF32: i32 = -1;
pub const _V6_ILP32_OFFBIG: u32 = 1;
pub const _V6_LP64_OFF64: u32 = 1;
pub const _V6_LPBIG_OFFBIG: u32 = 1;
pub const _XBS5_ILP32_OFF32: i32 = -1;
pub const _XBS5_ILP32_OFFBIG: u32 = 1;
pub const _XBS5_LP64_OFF64: u32 = 1;
pub const _XBS5_LPBIG_OFFBIG: u32 = 1;
pub const _XOPEN_CRYPT: u32 = 1;
pub const _XOPEN_ENH_I18N: u32 = 1;
pub const _XOPEN_LEGACY: i32 = -1;
pub const _XOPEN_REALTIME: i32 = -1;
pub const _XOPEN_REALTIME_THREADS: i32 = -1;
pub const _XOPEN_SHM: u32 = 1;
pub const _XOPEN_STREAMS: i32 = -1;
pub const _XOPEN_UNIX: u32 = 1;
pub const _SC_ARG_MAX: u32 = 1;
pub const _SC_CHILD_MAX: u32 = 2;
pub const _SC_CLK_TCK: u32 = 3;
pub const _SC_NGROUPS_MAX: u32 = 4;
pub const _SC_OPEN_MAX: u32 = 5;
pub const _SC_JOB_CONTROL: u32 = 6;
pub const _SC_SAVED_IDS: u32 = 7;
pub const _SC_VERSION: u32 = 8;
pub const _SC_BC_BASE_MAX: u32 = 9;
pub const _SC_BC_DIM_MAX: u32 = 10;
pub const _SC_BC_SCALE_MAX: u32 = 11;
pub const _SC_BC_STRING_MAX: u32 = 12;
pub const _SC_COLL_WEIGHTS_MAX: u32 = 13;
pub const _SC_EXPR_NEST_MAX: u32 = 14;
pub const _SC_LINE_MAX: u32 = 15;
pub const _SC_RE_DUP_MAX: u32 = 16;
pub const _SC_2_VERSION: u32 = 17;
pub const _SC_2_C_BIND: u32 = 18;
pub const _SC_2_C_DEV: u32 = 19;
pub const _SC_2_CHAR_TERM: u32 = 20;
pub const _SC_2_FORT_DEV: u32 = 21;
pub const _SC_2_FORT_RUN: u32 = 22;
pub const _SC_2_LOCALEDEF: u32 = 23;
pub const _SC_2_SW_DEV: u32 = 24;
pub const _SC_2_UPE: u32 = 25;
pub const _SC_STREAM_MAX: u32 = 26;
pub const _SC_TZNAME_MAX: u32 = 27;
pub const _SC_ASYNCHRONOUS_IO: u32 = 28;
pub const _SC_PAGESIZE: u32 = 29;
pub const _SC_MEMLOCK: u32 = 30;
pub const _SC_MEMLOCK_RANGE: u32 = 31;
pub const _SC_MEMORY_PROTECTION: u32 = 32;
pub const _SC_MESSAGE_PASSING: u32 = 33;
pub const _SC_PRIORITIZED_IO: u32 = 34;
pub const _SC_PRIORITY_SCHEDULING: u32 = 35;
pub const _SC_REALTIME_SIGNALS: u32 = 36;
pub const _SC_SEMAPHORES: u32 = 37;
pub const _SC_FSYNC: u32 = 38;
pub const _SC_SHARED_MEMORY_OBJECTS: u32 = 39;
pub const _SC_SYNCHRONIZED_IO: u32 = 40;
pub const _SC_TIMERS: u32 = 41;
pub const _SC_AIO_LISTIO_MAX: u32 = 42;
pub const _SC_AIO_MAX: u32 = 43;
pub const _SC_AIO_PRIO_DELTA_MAX: u32 = 44;
pub const _SC_DELAYTIMER_MAX: u32 = 45;
pub const _SC_MQ_OPEN_MAX: u32 = 46;
pub const _SC_MAPPED_FILES: u32 = 47;
pub const _SC_RTSIG_MAX: u32 = 48;
pub const _SC_SEM_NSEMS_MAX: u32 = 49;
pub const _SC_SEM_VALUE_MAX: u32 = 50;
pub const _SC_SIGQUEUE_MAX: u32 = 51;
pub const _SC_TIMER_MAX: u32 = 52;
pub const _SC_NPROCESSORS_CONF: u32 = 57;
pub const _SC_NPROCESSORS_ONLN: u32 = 58;
pub const _SC_2_PBS: u32 = 59;
pub const _SC_2_PBS_ACCOUNTING: u32 = 60;
pub const _SC_2_PBS_CHECKPOINT: u32 = 61;
pub const _SC_2_PBS_LOCATE: u32 = 62;
pub const _SC_2_PBS_MESSAGE: u32 = 63;
pub const _SC_2_PBS_TRACK: u32 = 64;
pub const _SC_ADVISORY_INFO: u32 = 65;
pub const _SC_BARRIERS: u32 = 66;
pub const _SC_CLOCK_SELECTION: u32 = 67;
pub const _SC_CPUTIME: u32 = 68;
pub const _SC_FILE_LOCKING: u32 = 69;
pub const _SC_GETGR_R_SIZE_MAX: u32 = 70;
pub const _SC_GETPW_R_SIZE_MAX: u32 = 71;
pub const _SC_HOST_NAME_MAX: u32 = 72;
pub const _SC_LOGIN_NAME_MAX: u32 = 73;
pub const _SC_MONOTONIC_CLOCK: u32 = 74;
pub const _SC_MQ_PRIO_MAX: u32 = 75;
pub const _SC_READER_WRITER_LOCKS: u32 = 76;
pub const _SC_REGEXP: u32 = 77;
pub const _SC_SHELL: u32 = 78;
pub const _SC_SPAWN: u32 = 79;
pub const _SC_SPIN_LOCKS: u32 = 80;
pub const _SC_SPORADIC_SERVER: u32 = 81;
pub const _SC_THREAD_ATTR_STACKADDR: u32 = 82;
pub const _SC_THREAD_ATTR_STACKSIZE: u32 = 83;
pub const _SC_THREAD_CPUTIME: u32 = 84;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: u32 = 85;
pub const _SC_THREAD_KEYS_MAX: u32 = 86;
pub const _SC_THREAD_PRIO_INHERIT: u32 = 87;
pub const _SC_THREAD_PRIO_PROTECT: u32 = 88;
pub const _SC_THREAD_PRIORITY_SCHEDULING: u32 = 89;
pub const _SC_THREAD_PROCESS_SHARED: u32 = 90;
pub const _SC_THREAD_SAFE_FUNCTIONS: u32 = 91;
pub const _SC_THREAD_SPORADIC_SERVER: u32 = 92;
pub const _SC_THREAD_STACK_MIN: u32 = 93;
pub const _SC_THREAD_THREADS_MAX: u32 = 94;
pub const _SC_TIMEOUTS: u32 = 95;
pub const _SC_THREADS: u32 = 96;
pub const _SC_TRACE: u32 = 97;
pub const _SC_TRACE_EVENT_FILTER: u32 = 98;
pub const _SC_TRACE_INHERIT: u32 = 99;
pub const _SC_TRACE_LOG: u32 = 100;
pub const _SC_TTY_NAME_MAX: u32 = 101;
pub const _SC_TYPED_MEMORY_OBJECTS: u32 = 102;
pub const _SC_V6_ILP32_OFF32: u32 = 103;
pub const _SC_V6_ILP32_OFFBIG: u32 = 104;
pub const _SC_V6_LP64_OFF64: u32 = 105;
pub const _SC_V6_LPBIG_OFFBIG: u32 = 106;
pub const _SC_IPV6: u32 = 118;
pub const _SC_RAW_SOCKETS: u32 = 119;
pub const _SC_SYMLOOP_MAX: u32 = 120;
pub const _SC_ATEXIT_MAX: u32 = 107;
pub const _SC_IOV_MAX: u32 = 56;
pub const _SC_PAGE_SIZE: u32 = 29;
pub const _SC_XOPEN_CRYPT: u32 = 108;
pub const _SC_XOPEN_ENH_I18N: u32 = 109;
pub const _SC_XOPEN_LEGACY: u32 = 110;
pub const _SC_XOPEN_REALTIME: u32 = 111;
pub const _SC_XOPEN_REALTIME_THREADS: u32 = 112;
pub const _SC_XOPEN_SHM: u32 = 113;
pub const _SC_XOPEN_STREAMS: u32 = 114;
pub const _SC_XOPEN_UNIX: u32 = 115;
pub const _SC_XOPEN_VERSION: u32 = 116;
pub const _SC_XOPEN_XCU_VERSION: u32 = 121;
pub const _SC_XBS5_ILP32_OFF32: u32 = 122;
pub const _SC_XBS5_ILP32_OFFBIG: u32 = 123;
pub const _SC_XBS5_LP64_OFF64: u32 = 124;
pub const _SC_XBS5_LPBIG_OFFBIG: u32 = 125;
pub const _SC_SS_REPL_MAX: u32 = 126;
pub const _SC_TRACE_EVENT_NAME_MAX: u32 = 127;
pub const _SC_TRACE_NAME_MAX: u32 = 128;
pub const _SC_TRACE_SYS_MAX: u32 = 129;
pub const _SC_TRACE_USER_EVENT_MAX: u32 = 130;
pub const _SC_PASS_MAX: u32 = 131;
pub const _SC_PHYS_PAGES: u32 = 200;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: u32 = 2;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: u32 = 3;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: u32 = 4;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: u32 = 5;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: u32 = 6;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: u32 = 7;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: u32 = 8;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: u32 = 9;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: u32 = 10;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: u32 = 11;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: u32 = 12;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: u32 = 13;
pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS: u32 = 14;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: u32 = 20;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: u32 = 21;
pub const _CS_XBS5_ILP32_OFF32_LIBS: u32 = 22;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: u32 = 23;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: u32 = 24;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: u32 = 25;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: u32 = 26;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: u32 = 27;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: u32 = 28;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: u32 = 29;
pub const _CS_XBS5_LP64_OFF64_LIBS: u32 = 30;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: u32 = 31;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: u32 = 32;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: u32 = 33;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: u32 = 34;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: u32 = 35;
pub const _CS_DARWIN_USER_DIR: u32 = 65536;
pub const _CS_DARWIN_USER_TEMP_DIR: u32 = 65537;
pub const _CS_DARWIN_USER_CACHE_DIR: u32 = 65538;
pub const F_ULOCK: u32 = 0;
pub const F_LOCK: u32 = 1;
pub const F_TLOCK: u32 = 2;
pub const F_TEST: u32 = 3;
pub const __CTERMID_DEFINED: u32 = 1;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const SYNC_VOLUME_FULLSYNC: u32 = 1;
pub const SYNC_VOLUME_WAIT: u32 = 2;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _I386_SIGNAL_H_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const FP_PREC_24B: u32 = 0;
pub const FP_PREC_53B: u32 = 2;
pub const FP_PREC_64B: u32 = 3;
pub const FP_RND_NEAR: u32 = 0;
pub const FP_RND_DOWN: u32 = 1;
pub const FP_RND_UP: u32 = 2;
pub const FP_CHOP: u32 = 3;
pub const FP_STATE_BYTES: u32 = 512;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_CURRENT: u32 = 4;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const SIZEOF_LONG_LONG: u32 = 8;
pub const SIZEOF_VOID_P: u32 = 8;
pub const SIZEOF_SIZE_T: u32 = 8;
pub const SIZEOF_TIME_T: u32 = 8;
pub const SIZEOF_LONG: u32 = 8;
pub const SIZEOF_SHORT: u32 = 2;
pub const SIZEOF_INT: u32 = 4;
pub const SIZEOF_FLOAT: u32 = 4;
pub const SIZEOF_DOUBLE: u32 = 8;
pub const PY_RELEASE_LEVEL_ALPHA: u32 = 10;
pub const PY_RELEASE_LEVEL_BETA: u32 = 11;
pub const PY_RELEASE_LEVEL_GAMMA: u32 = 12;
pub const PY_RELEASE_LEVEL_FINAL: u32 = 15;
pub const PY_MAJOR_VERSION: u32 = 3;
pub const PY_MINOR_VERSION: u32 = 5;
pub const PY_MICRO_VERSION: u32 = 3;
pub const PY_RELEASE_LEVEL: u32 = 15;
pub const PY_RELEASE_SERIAL: u32 = 0;
pub const PY_VERSION: &'static [u8; 6usize] = b"3.5.3\0";
pub const PYPY_VERSION: &'static [u8; 14usize] = b"5.10.0-alpha0\0";
pub const PYPY_VERSION_NUM: u32 = 84541440;
pub const PYPY_CPYEXT_GC: u32 = 1;
pub const PY_PATCHLEVEL_REVISION: &'static [u8; 1usize] = b"\0";
pub const PY_VERSION_HEX: u32 = 50660336;
pub const HAVE_PROTOTYPES: u32 = 1;
pub const STDC_HEADERS: u32 = 1;
pub const HAVE_LONG_LONG: u32 = 1;
pub const HAVE_STDARG_PROTOTYPES: u32 = 1;
pub const PY_FORMAT_LONG_LONG: &'static [u8; 3usize] = b"ll\0";
pub const PY_FORMAT_SIZE_T: &'static [u8; 2usize] = b"z\0";
pub const HAVE_WCHAR_H: u32 = 1;
pub const HAVE_SYS_TYPES_H: u32 = 1;
pub const HAVE_SYS_STAT_H: u32 = 1;
pub const HAVE_USABLE_WCHAR_T: u32 = 1;
pub const SIZEOF_WCHAR_T: u32 = 4;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &'static [u8; 10usize] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const L_ctermid: u32 = 1024;
pub const Py_MAX_NDIMS: u32 = 32;
pub const Py_MAX_FMT: u32 = 128;
pub const Py_LT: u32 = 0;
pub const Py_LE: u32 = 1;
pub const Py_EQ: u32 = 2;
pub const Py_NE: u32 = 3;
pub const Py_GT: u32 = 4;
pub const Py_GE: u32 = 5;
pub const PyBUF_SIMPLE: u32 = 0;
pub const PyBUF_WRITABLE: u32 = 1;
pub const PyBUF_WRITEABLE: u32 = 1;
pub const PyBUF_FORMAT: u32 = 4;
pub const PyBUF_ND: u32 = 8;
pub const PyBUF_STRIDES: u32 = 24;
pub const PyBUF_C_CONTIGUOUS: u32 = 56;
pub const PyBUF_F_CONTIGUOUS: u32 = 88;
pub const PyBUF_ANY_CONTIGUOUS: u32 = 152;
pub const PyBUF_INDIRECT: u32 = 280;
pub const PyBUF_CONTIG: u32 = 9;
pub const PyBUF_CONTIG_RO: u32 = 8;
pub const PyBUF_STRIDED: u32 = 25;
pub const PyBUF_STRIDED_RO: u32 = 24;
pub const PyBUF_RECORDS: u32 = 29;
pub const PyBUF_RECORDS_RO: u32 = 28;
pub const PyBUF_FULL: u32 = 285;
pub const PyBUF_FULL_RO: u32 = 284;
pub const PyBUF_READ: u32 = 256;
pub const PyBUF_WRITE: u32 = 512;
pub const PyBUF_SHADOW: u32 = 1024;
pub const Py_PRINT_RAW: u32 = 1;
pub const Py_TPFLAGS_HEAPTYPE: u32 = 512;
pub const Py_TPFLAGS_BASETYPE: u32 = 1024;
pub const Py_TPFLAGS_READY: u32 = 4096;
pub const Py_TPFLAGS_READYING: u32 = 8192;
pub const Py_TPFLAGS_HAVE_GC: u32 = 16384;
pub const Py_TPFLAGS_HAVE_STACKLESS_EXTENSION: u32 = 0;
pub const Py_TPFLAGS_HAVE_VERSION_TAG: u32 = 262144;
pub const Py_TPFLAGS_VALID_VERSION_TAG: u32 = 524288;
pub const Py_TPFLAGS_IS_ABSTRACT: u32 = 1048576;
pub const Py_TPFLAGS_LONG_SUBCLASS: u32 = 16777216;
pub const Py_TPFLAGS_LIST_SUBCLASS: u32 = 33554432;
pub const Py_TPFLAGS_TUPLE_SUBCLASS: u32 = 67108864;
pub const Py_TPFLAGS_BYTES_SUBCLASS: u32 = 134217728;
pub const Py_TPFLAGS_UNICODE_SUBCLASS: u32 = 268435456;
pub const Py_TPFLAGS_DICT_SUBCLASS: u32 = 536870912;
pub const Py_TPFLAGS_BASE_EXC_SUBCLASS: u32 = 1073741824;
pub const Py_TPFLAGS_TYPE_SUBCLASS: u32 = 2147483648;
pub const Py_TPFLAGS_DEFAULT: u32 = 262144;
pub const Py_TPFLAGS_HAVE_FINALIZE: u32 = 1;
pub const Py_mp_ass_subscript: u32 = 3;
pub const Py_mp_length: u32 = 4;
pub const Py_mp_subscript: u32 = 5;
pub const Py_nb_absolute: u32 = 6;
pub const Py_nb_add: u32 = 7;
pub const Py_nb_and: u32 = 8;
pub const Py_nb_bool: u32 = 9;
pub const Py_nb_divmod: u32 = 10;
pub const Py_nb_float: u32 = 11;
pub const Py_nb_floor_divide: u32 = 12;
pub const Py_nb_index: u32 = 13;
pub const Py_nb_inplace_add: u32 = 14;
pub const Py_nb_inplace_and: u32 = 15;
pub const Py_nb_inplace_floor_divide: u32 = 16;
pub const Py_nb_inplace_lshift: u32 = 17;
pub const Py_nb_inplace_multiply: u32 = 18;
pub const Py_nb_inplace_or: u32 = 19;
pub const Py_nb_inplace_power: u32 = 20;
pub const Py_nb_inplace_remainder: u32 = 21;
pub const Py_nb_inplace_rshift: u32 = 22;
pub const Py_nb_inplace_subtract: u32 = 23;
pub const Py_nb_inplace_true_divide: u32 = 24;
pub const Py_nb_inplace_xor: u32 = 25;
pub const Py_nb_int: u32 = 26;
pub const Py_nb_invert: u32 = 27;
pub const Py_nb_lshift: u32 = 28;
pub const Py_nb_multiply: u32 = 29;
pub const Py_nb_negative: u32 = 30;
pub const Py_nb_or: u32 = 31;
pub const Py_nb_positive: u32 = 32;
pub const Py_nb_power: u32 = 33;
pub const Py_nb_remainder: u32 = 34;
pub const Py_nb_rshift: u32 = 35;
pub const Py_nb_subtract: u32 = 36;
pub const Py_nb_true_divide: u32 = 37;
pub const Py_nb_xor: u32 = 38;
pub const Py_sq_ass_item: u32 = 39;
pub const Py_sq_concat: u32 = 40;
pub const Py_sq_contains: u32 = 41;
pub const Py_sq_inplace_concat: u32 = 42;
pub const Py_sq_inplace_repeat: u32 = 43;
pub const Py_sq_item: u32 = 44;
pub const Py_sq_length: u32 = 45;
pub const Py_sq_repeat: u32 = 46;
pub const Py_tp_alloc: u32 = 47;
pub const Py_tp_base: u32 = 48;
pub const Py_tp_bases: u32 = 49;
pub const Py_tp_call: u32 = 50;
pub const Py_tp_clear: u32 = 51;
pub const Py_tp_dealloc: u32 = 52;
pub const Py_tp_del: u32 = 53;
pub const Py_tp_descr_get: u32 = 54;
pub const Py_tp_descr_set: u32 = 55;
pub const Py_tp_doc: u32 = 56;
pub const Py_tp_getattr: u32 = 57;
pub const Py_tp_getattro: u32 = 58;
pub const Py_tp_hash: u32 = 59;
pub const Py_tp_init: u32 = 60;
pub const Py_tp_is_gc: u32 = 61;
pub const Py_tp_iter: u32 = 62;
pub const Py_tp_iternext: u32 = 63;
pub const Py_tp_methods: u32 = 64;
pub const Py_tp_new: u32 = 65;
pub const Py_tp_repr: u32 = 66;
pub const Py_tp_richcompare: u32 = 67;
pub const Py_tp_setattr: u32 = 68;
pub const Py_tp_setattro: u32 = 69;
pub const Py_tp_str: u32 = 70;
pub const Py_tp_traverse: u32 = 71;
pub const Py_tp_members: u32 = 72;
pub const Py_tp_getset: u32 = 73;
pub const Py_tp_free: u32 = 74;
pub const Py_nb_matrix_multiply: u32 = 75;
pub const Py_nb_inplace_matrix_multiply: u32 = 76;
pub const Py_am_await: u32 = 77;
pub const Py_am_aiter: u32 = 78;
pub const Py_am_anext: u32 = 79;
pub const Py_tp_finalize: u32 = 80;
pub const PY_LLONG_MIN: i64 = -9223372036854775808;
pub const PY_LLONG_MAX: u64 = 9223372036854775807;
pub const PY_ULLONG_MAX: i32 = -1;
pub const PY_SIZE_MAX: i32 = -1;
pub const CLOCKS_PER_SEC: u32 = 1000000;
pub const SIZEOF_PY_HASH_T: u32 = 8;
pub const SIZEOF_PY_UHASH_T: u32 = 8;
pub const __GNUC_VA_LIST: u32 = 1;
pub const S_IFMT: u32 = 61440;
pub const S_IFIFO: u32 = 4096;
pub const S_IFCHR: u32 = 8192;
pub const S_IFDIR: u32 = 16384;
pub const S_IFBLK: u32 = 24576;
pub const S_IFREG: u32 = 32768;
pub const S_IFLNK: u32 = 40960;
pub const S_IFSOCK: u32 = 49152;
pub const S_IFWHT: u32 = 57344;
pub const S_IRWXU: u32 = 448;
pub const S_IRUSR: u32 = 256;
pub const S_IWUSR: u32 = 128;
pub const S_IXUSR: u32 = 64;
pub const S_IRWXG: u32 = 56;
pub const S_IRGRP: u32 = 32;
pub const S_IWGRP: u32 = 16;
pub const S_IXGRP: u32 = 8;
pub const S_IRWXO: u32 = 7;
pub const S_IROTH: u32 = 4;
pub const S_IWOTH: u32 = 2;
pub const S_IXOTH: u32 = 1;
pub const S_ISUID: u32 = 2048;
pub const S_ISGID: u32 = 1024;
pub const S_ISVTX: u32 = 512;
pub const S_ISTXT: u32 = 512;
pub const S_IREAD: u32 = 256;
pub const S_IWRITE: u32 = 128;
pub const S_IEXEC: u32 = 64;
pub const ACCESSPERMS: u32 = 511;
pub const ALLPERMS: u32 = 4095;
pub const DEFFILEMODE: u32 = 438;
pub const S_BLKSIZE: u32 = 512;
pub const UF_SETTABLE: u32 = 65535;
pub const UF_NODUMP: u32 = 1;
pub const UF_IMMUTABLE: u32 = 2;
pub const UF_APPEND: u32 = 4;
pub const UF_OPAQUE: u32 = 8;
pub const UF_COMPRESSED: u32 = 32;
pub const UF_TRACKED: u32 = 64;
pub const UF_DATAVAULT: u32 = 128;
pub const UF_HIDDEN: u32 = 32768;
pub const SF_SUPPORTED: u32 = 2031616;
pub const SF_SETTABLE: u32 = 4294901760;
pub const SF_ARCHIVED: u32 = 65536;
pub const SF_IMMUTABLE: u32 = 131072;
pub const SF_APPEND: u32 = 262144;
pub const SF_RESTRICTED: u32 = 524288;
pub const SF_NOUNLINK: u32 = 1048576;
pub const UTIME_NOW: i32 = -1;
pub const UTIME_OMIT: i32 = -2;
pub const LC_ALL: u32 = 0;
pub const LC_COLLATE: u32 = 1;
pub const LC_CTYPE: u32 = 2;
pub const LC_MONETARY: u32 = 3;
pub const LC_NUMERIC: u32 = 4;
pub const LC_TIME: u32 = 5;
pub const LC_MESSAGES: u32 = 6;
pub const _LC_LAST: u32 = 7;
pub const _CACHED_RUNES: u32 = 256;
pub const _CRMASK: i32 = -256;
pub const _RUNE_MAGIC_A: &'static [u8; 9usize] = b"RuneMagA\0";
pub const _CTYPE_A: u32 = 256;
pub const _CTYPE_C: u32 = 512;
pub const _CTYPE_D: u32 = 1024;
pub const _CTYPE_G: u32 = 2048;
pub const _CTYPE_L: u32 = 4096;
pub const _CTYPE_P: u32 = 8192;
pub const _CTYPE_S: u32 = 16384;
pub const _CTYPE_U: u32 = 32768;
pub const _CTYPE_X: u32 = 65536;
pub const _CTYPE_B: u32 = 131072;
pub const _CTYPE_R: u32 = 262144;
pub const _CTYPE_I: u32 = 524288;
pub const _CTYPE_T: u32 = 1048576;
pub const _CTYPE_Q: u32 = 2097152;
pub const _CTYPE_SW0: u32 = 536870912;
pub const _CTYPE_SW1: u32 = 1073741824;
pub const _CTYPE_SW2: u32 = 2147483648;
pub const _CTYPE_SW3: u32 = 3221225472;
pub const _CTYPE_SWM: u32 = 3758096384;
pub const _CTYPE_SWS: u32 = 30;
pub const PyFloat_STR_PRECISION: u32 = 12;
pub const METH_VARARGS: u32 = 1;
pub const METH_KEYWORDS: u32 = 2;
pub const METH_NOARGS: u32 = 4;
pub const METH_O: u32 = 8;
pub const METH_CLASS: u32 = 16;
pub const METH_STATIC: u32 = 32;
pub const METH_COEXIST: u32 = 64;
pub const CO_OPTIMIZED: u32 = 1;
pub const CO_NEWLOCALS: u32 = 2;
pub const CO_VARARGS: u32 = 4;
pub const CO_VARKEYWORDS: u32 = 8;
pub const CO_NESTED: u32 = 16;
pub const CO_GENERATOR: u32 = 32;
pub const CO_COROUTINE: u32 = 128;
pub const CO_ITERABLE_COROUTINE: u32 = 256;
pub const CO_FUTURE_DIVISION: u32 = 8192;
pub const CO_FUTURE_ABSOLUTE_IMPORT: u32 = 16384;
pub const CO_FUTURE_WITH_STATEMENT: u32 = 32768;
pub const CO_FUTURE_PRINT_FUNCTION: u32 = 65536;
pub const CO_FUTURE_UNICODE_LITERALS: u32 = 131072;
pub const Py_mod_create: u32 = 1;
pub const Py_mod_exec: u32 = 2;
pub const _Py_mod_LAST_SLOT: u32 = 2;
pub const Py_CLEANUP_SUPPORTED: u32 = 131072;
pub const PYTHON_API_VERSION: u32 = 1013;
pub const PYTHON_API_STRING: &'static [u8; 5usize] = b"1013\0";
pub const PYTHON_ABI_VERSION: u32 = 3;
pub const PYTHON_ABI_STRING: &'static [u8; 2usize] = b"3\0";
pub const PyCF_MASK: u32 = 253952;
pub const PyCF_MASK_OBSOLETE: u32 = 16;
pub const PyCF_SOURCE_IS_UTF8: u32 = 256;
pub const PyCF_DONT_IMPLY_DEDENT: u32 = 512;
pub const PyCF_ONLY_AST: u32 = 1024;
pub const Py_UNICODE_SIZE: u32 = 4;
pub const SSTATE_NOT_INTERNED: u32 = 0;
pub const SSTATE_INTERNED_MORTAL: u32 = 1;
pub const SSTATE_INTERNED_IMMORTAL: u32 = 2;
pub const Py_single_input: u32 = 256;
pub const Py_file_input: u32 = 257;
pub const Py_eval_input: u32 = 258;
pub const PYPY_TRACEMALLOC: u32 = 1;
pub const WAIT_LOCK: u32 = 1;
pub const NOWAIT_LOCK: u32 = 0;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __uint32_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type wchar_t = __darwin_wchar_t;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
extern "C" {
    #[link_name = "\u{1}_imaxabs"]
    pub fn imaxabs(j: intmax_t) -> intmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: intmax_t,
    pub rem: intmax_t,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_imaxdiv"]
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    #[link_name = "\u{1}_strtoimax"]
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    #[link_name = "\u{1}_strtoumax"]
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    #[link_name = "\u{1}_wcstoimax"]
    pub fn wcstoimax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    #[link_name = "\u{1}_wcstoumax"]
    pub fn wcstoumax(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type rsize_t = ::std::os::raw::c_ulong;
pub type max_align_t = f64;
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    #[link_name = "\u{1}___math_errhandling"]
    pub fn __math_errhandling() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___fpclassifyf"]
    pub fn __fpclassifyf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___fpclassifyd"]
    pub fn __fpclassifyd(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___fpclassify"]
    pub fn __fpclassify(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_acosf"]
    pub fn acosf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_acos"]
    pub fn acos(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_acosl"]
    pub fn acosl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_asinf"]
    pub fn asinf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_asin"]
    pub fn asin(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_asinl"]
    pub fn asinl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_atanf"]
    pub fn atanf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_atan"]
    pub fn atan(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_atanl"]
    pub fn atanl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_atan2f"]
    pub fn atan2f(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_atan2"]
    pub fn atan2(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_atan2l"]
    pub fn atan2l(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_cosf"]
    pub fn cosf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_cos"]
    pub fn cos(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_cosl"]
    pub fn cosl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_sinf"]
    pub fn sinf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_sin"]
    pub fn sin(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_sinl"]
    pub fn sinl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_tanf"]
    pub fn tanf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_tan"]
    pub fn tan(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_tanl"]
    pub fn tanl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_acoshf"]
    pub fn acoshf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_acosh"]
    pub fn acosh(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_acoshl"]
    pub fn acoshl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_asinhf"]
    pub fn asinhf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_asinh"]
    pub fn asinh(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_asinhl"]
    pub fn asinhl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_atanhf"]
    pub fn atanhf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_atanh"]
    pub fn atanh(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_atanhl"]
    pub fn atanhl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_coshf"]
    pub fn coshf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_cosh"]
    pub fn cosh(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_coshl"]
    pub fn coshl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_sinhf"]
    pub fn sinhf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_sinh"]
    pub fn sinh(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_sinhl"]
    pub fn sinhl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_tanhf"]
    pub fn tanhf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_tanh"]
    pub fn tanh(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_tanhl"]
    pub fn tanhl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_expf"]
    pub fn expf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_exp"]
    pub fn exp(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_expl"]
    pub fn expl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_exp2f"]
    pub fn exp2f(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_exp2"]
    pub fn exp2(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_exp2l"]
    pub fn exp2l(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_expm1f"]
    pub fn expm1f(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_expm1"]
    pub fn expm1(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_expm1l"]
    pub fn expm1l(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_logf"]
    pub fn logf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_log"]
    pub fn log(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_logl"]
    pub fn logl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_log10f"]
    pub fn log10f(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_log10"]
    pub fn log10(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_log10l"]
    pub fn log10l(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_log2f"]
    pub fn log2f(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_log2"]
    pub fn log2(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_log2l"]
    pub fn log2l(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_log1pf"]
    pub fn log1pf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_log1p"]
    pub fn log1p(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_log1pl"]
    pub fn log1pl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_logbf"]
    pub fn logbf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_logb"]
    pub fn logb(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_logbl"]
    pub fn logbl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_modff"]
    pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_modf"]
    pub fn modf(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_modfl"]
    pub fn modfl(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ldexpf"]
    pub fn ldexpf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ldexp"]
    pub fn ldexp(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ldexpl"]
    pub fn ldexpl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_frexpf"]
    pub fn frexpf(arg1: f32, arg2: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_frexp"]
    pub fn frexp(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_frexpl"]
    pub fn frexpl(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ilogbf"]
    pub fn ilogbf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ilogb"]
    pub fn ilogb(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ilogbl"]
    pub fn ilogbl(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_scalbnf"]
    pub fn scalbnf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_scalbn"]
    pub fn scalbn(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_scalbnl"]
    pub fn scalbnl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_scalblnf"]
    pub fn scalblnf(arg1: f32, arg2: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_scalbln"]
    pub fn scalbln(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_scalblnl"]
    pub fn scalblnl(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fabsf"]
    pub fn fabsf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_fabs"]
    pub fn fabs(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fabsl"]
    pub fn fabsl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_cbrtf"]
    pub fn cbrtf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_cbrt"]
    pub fn cbrt(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_cbrtl"]
    pub fn cbrtl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_hypotf"]
    pub fn hypotf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_hypot"]
    pub fn hypot(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_hypotl"]
    pub fn hypotl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_powf"]
    pub fn powf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_pow"]
    pub fn pow(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_powl"]
    pub fn powl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_sqrtf"]
    pub fn sqrtf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_sqrt"]
    pub fn sqrt(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_sqrtl"]
    pub fn sqrtl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_erff"]
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_erf"]
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_erfl"]
    pub fn erfl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_erfcf"]
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_erfc"]
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_erfcl"]
    pub fn erfcl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_lgammaf"]
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_lgamma"]
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_lgammal"]
    pub fn lgammal(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_tgammaf"]
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_tgamma"]
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_tgammal"]
    pub fn tgammal(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ceilf"]
    pub fn ceilf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_ceil"]
    pub fn ceil(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ceill"]
    pub fn ceill(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_floorf"]
    pub fn floorf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_floor"]
    pub fn floor(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_floorl"]
    pub fn floorl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_nearbyintf"]
    pub fn nearbyintf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_nearbyint"]
    pub fn nearbyint(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_nearbyintl"]
    pub fn nearbyintl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_rintf"]
    pub fn rintf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_rint"]
    pub fn rint(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_rintl"]
    pub fn rintl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_lrintf"]
    pub fn lrintf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_lrint"]
    pub fn lrint(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_lrintl"]
    pub fn lrintl(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_roundf"]
    pub fn roundf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_round"]
    pub fn round(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_roundl"]
    pub fn roundl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_lroundf"]
    pub fn lroundf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_lround"]
    pub fn lround(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_lroundl"]
    pub fn lroundl(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_llrintf"]
    pub fn llrintf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_llrint"]
    pub fn llrint(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_llrintl"]
    pub fn llrintl(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_llroundf"]
    pub fn llroundf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_llround"]
    pub fn llround(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_llroundl"]
    pub fn llroundl(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_truncf"]
    pub fn truncf(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_trunc"]
    pub fn trunc(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_truncl"]
    pub fn truncl(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fmodf"]
    pub fn fmodf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_fmod"]
    pub fn fmod(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fmodl"]
    pub fn fmodl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_remainderf"]
    pub fn remainderf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_remainder"]
    pub fn remainder(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_remainderl"]
    pub fn remainderl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_remquof"]
    pub fn remquof(arg1: f32, arg2: f32, arg3: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_remquo"]
    pub fn remquo(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_remquol"]
    pub fn remquol(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_copysignf"]
    pub fn copysignf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_copysign"]
    pub fn copysign(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_copysignl"]
    pub fn copysignl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_nanf"]
    pub fn nanf(arg1: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_nan"]
    pub fn nan(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_nanl"]
    pub fn nanl(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_nextafterf"]
    pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_nextafter"]
    pub fn nextafter(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_nextafterl"]
    pub fn nextafterl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_nexttoward"]
    pub fn nexttoward(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_nexttowardf"]
    pub fn nexttowardf(arg1: f32, arg2: f64) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_nexttowardl"]
    pub fn nexttowardl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fdimf"]
    pub fn fdimf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_fdim"]
    pub fn fdim(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fdiml"]
    pub fn fdiml(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fmaxf"]
    pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_fmax"]
    pub fn fmax(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fmaxl"]
    pub fn fmaxl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fminf"]
    pub fn fminf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_fmin"]
    pub fn fmin(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fminl"]
    pub fn fminl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fmaf"]
    pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_fma"]
    pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fmal"]
    pub fn fmal(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}___inff"]
    pub fn __inff() -> f32;
}
extern "C" {
    #[link_name = "\u{1}___inf"]
    pub fn __inf() -> f64;
}
extern "C" {
    #[link_name = "\u{1}___infl"]
    pub fn __infl() -> f64;
}
extern "C" {
    #[link_name = "\u{1}___nan"]
    pub fn __nan() -> f32;
}
extern "C" {
    #[link_name = "\u{1}___exp10f"]
    pub fn __exp10f(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}___exp10"]
    pub fn __exp10(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}___cospif"]
    pub fn __cospif(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}___cospi"]
    pub fn __cospi(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}___sinpif"]
    pub fn __sinpif(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}___sinpi"]
    pub fn __sinpi(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}___tanpif"]
    pub fn __tanpif(arg1: f32) -> f32;
}
extern "C" {
    #[link_name = "\u{1}___tanpi"]
    pub fn __tanpi(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_j0"]
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_j1"]
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_jn"]
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_y0"]
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_y1"]
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_yn"]
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_scalb"]
    pub fn scalb(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_signgam"]
    pub static mut signgam: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rinttol"]
    pub fn rinttol(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_roundtol"]
    pub fn roundtol(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_drem"]
    pub fn drem(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_finite"]
    pub fn finite(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_gamma"]
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_significand"]
    pub fn significand(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[test]
fn bindgen_test_layout_exception() {
    assert_eq!(
        ::std::mem::size_of::<exception>(),
        40usize,
        concat!("Size of: ", stringify!(exception))
    );
    assert_eq!(
        ::std::mem::align_of::<exception>(),
        8usize,
        concat!("Alignment of ", stringify!(exception))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).arg1 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(arg1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).arg2 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(arg2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<exception>())).retval as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(exception),
            "::",
            stringify!(retval)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_matherr"]
    pub fn matherr(arg1: *mut exception) -> ::std::os::raw::c_int;
}
pub type errno_t = ::std::os::raw::c_int;
extern "C" {
    #[link_name = "\u{1}___error"]
    pub fn __error() -> *mut ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct accessx_descriptor {
    pub ad_name_offset: ::std::os::raw::c_uint,
    pub ad_flags: ::std::os::raw::c_int,
    pub ad_pad: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout_accessx_descriptor() {
    assert_eq!(
        ::std::mem::size_of::<accessx_descriptor>(),
        16usize,
        concat!("Size of: ", stringify!(accessx_descriptor))
    );
    assert_eq!(
        ::std::mem::align_of::<accessx_descriptor>(),
        4usize,
        concat!("Alignment of ", stringify!(accessx_descriptor))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<accessx_descriptor>())).ad_name_offset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(accessx_descriptor),
            "::",
            stringify!(ad_name_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<accessx_descriptor>())).ad_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(accessx_descriptor),
            "::",
            stringify!(ad_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<accessx_descriptor>())).ad_pad as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(accessx_descriptor),
            "::",
            stringify!(ad_pad)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_getattrlistbulk"]
    pub fn getattrlistbulk(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getattrlistat"]
    pub fn getattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setattrlistat"]
    pub fn setattrlistat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut ::std::os::raw::c_void,
        arg5: usize,
        arg6: u32,
    ) -> ::std::os::raw::c_int;
}
pub type uid_t = __darwin_uid_t;
pub type gid_t = __darwin_gid_t;
extern "C" {
    #[link_name = "\u{1}_faccessat"]
    pub fn faccessat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fchownat"]
    pub fn fchownat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: uid_t,
        arg4: gid_t,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_linkat"]
    pub fn linkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_readlinkat"]
    pub fn readlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_symlinkat"]
    pub fn symlinkat(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_unlinkat"]
    pub fn unlinkat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type off_t = __darwin_off_t;
pub type pid_t = __darwin_pid_t;
pub type useconds_t = __darwin_useconds_t;
extern "C" {
    #[link_name = "\u{1}__exit"]
    pub fn _exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_access"]
    pub fn access(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_alarm"]
    pub fn alarm(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_chdir"]
    pub fn chdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_chown"]
    pub fn chown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_close"]
    pub fn close(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_dup"]
    pub fn dup(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_dup2"]
    pub fn dup2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_execl"]
    pub fn execl(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_execle"]
    pub fn execle(
        __path: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_execlp"]
    pub fn execlp(
        __file: *const ::std::os::raw::c_char,
        __arg0: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_execv"]
    pub fn execv(
        __path: *const ::std::os::raw::c_char,
        __argv: *const *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_execve"]
    pub fn execve(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *const ::std::os::raw::c_char,
        __envp: *const *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_execvp"]
    pub fn execvp(
        __file: *const ::std::os::raw::c_char,
        __argv: *const *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fork"]
    pub fn fork() -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_fpathconf"]
    pub fn fpathconf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_getcwd"]
    pub fn getcwd(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_getegid"]
    pub fn getegid() -> gid_t;
}
extern "C" {
    #[link_name = "\u{1}_geteuid"]
    pub fn geteuid() -> uid_t;
}
extern "C" {
    #[link_name = "\u{1}_getgid"]
    pub fn getgid() -> gid_t;
}
extern "C" {
    #[link_name = "\u{1}_getgroups"]
    pub fn getgroups(arg1: ::std::os::raw::c_int, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getlogin"]
    pub fn getlogin() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_getpgrp"]
    pub fn getpgrp() -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_getpid"]
    pub fn getpid() -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_getppid"]
    pub fn getppid() -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_getuid"]
    pub fn getuid() -> uid_t;
}
extern "C" {
    #[link_name = "\u{1}_isatty"]
    pub fn isatty(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_link"]
    pub fn link(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lseek"]
    pub fn lseek(arg1: ::std::os::raw::c_int, arg2: off_t, arg3: ::std::os::raw::c_int) -> off_t;
}
extern "C" {
    #[link_name = "\u{1}_pathconf"]
    pub fn pathconf(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_pause"]
    pub fn pause() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pipe"]
    pub fn pipe(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_read"]
    pub fn read(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_rmdir"]
    pub fn rmdir(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setgid"]
    pub fn setgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setpgid"]
    pub fn setpgid(arg1: pid_t, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setsid"]
    pub fn setsid() -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_setuid"]
    pub fn setuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sleep"]
    pub fn sleep(arg1: ::std::os::raw::c_uint) -> ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}_sysconf"]
    pub fn sysconf(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_tcgetpgrp"]
    pub fn tcgetpgrp(arg1: ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_tcsetpgrp"]
    pub fn tcsetpgrp(arg1: ::std::os::raw::c_int, arg2: pid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ttyname"]
    pub fn ttyname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ttyname_r"]
    pub fn ttyname_r(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_unlink"]
    pub fn unlink(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_write"]
    pub fn write(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_confstr"]
    pub fn confstr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_getopt"]
    pub fn getopt(
        arg1: ::std::os::raw::c_int,
        arg2: *const *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_optarg"]
    pub static mut optarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_optind"]
    pub static mut optind: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_opterr"]
    pub static mut opterr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_optopt"]
    pub static mut optopt: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_brk"]
    pub fn brk(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_chroot"]
    pub fn chroot(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_crypt"]
    pub fn crypt(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ctermid"]
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_encrypt"]
    pub fn encrypt(arg1: *mut ::std::os::raw::c_char, arg2: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_fchdir"]
    pub fn fchdir(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_gethostid"]
    pub fn gethostid() -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_getpgid"]
    pub fn getpgid(arg1: pid_t) -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_getsid"]
    pub fn getsid(arg1: pid_t) -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_getdtablesize"]
    pub fn getdtablesize() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getpagesize"]
    pub fn getpagesize() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getpass"]
    pub fn getpass(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_getwd"]
    pub fn getwd(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_lchown"]
    pub fn lchown(
        arg1: *const ::std::os::raw::c_char,
        arg2: uid_t,
        arg3: gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lockf"]
    pub fn lockf(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: off_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nice"]
    pub fn nice(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pread"]
    pub fn pread(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_pwrite"]
    pub fn pwrite(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __nbyte: usize,
        __offset: off_t,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_sbrk"]
    pub fn sbrk(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_setpgrp"]
    pub fn setpgrp() -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_setregid"]
    pub fn setregid(arg1: gid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setreuid"]
    pub fn setreuid(arg1: uid_t, arg2: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_swab"]
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
}
extern "C" {
    #[link_name = "\u{1}_sync"]
    pub fn sync();
}
extern "C" {
    #[link_name = "\u{1}_truncate"]
    pub fn truncate(arg1: *const ::std::os::raw::c_char, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ualarm"]
    pub fn ualarm(arg1: useconds_t, arg2: useconds_t) -> useconds_t;
}
extern "C" {
    #[link_name = "\u{1}_usleep"]
    pub fn usleep(arg1: useconds_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vfork"]
    pub fn vfork() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fsync"]
    pub fn fsync(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ftruncate"]
    pub fn ftruncate(arg1: ::std::os::raw::c_int, arg2: off_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getlogin_r"]
    pub fn getlogin_r(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fchown"]
    pub fn fchown(arg1: ::std::os::raw::c_int, arg2: uid_t, arg3: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_gethostname"]
    pub fn gethostname(arg1: *mut ::std::os::raw::c_char, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_readlink"]
    pub fn readlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_setegid"]
    pub fn setegid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_seteuid"]
    pub fn seteuid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_symlink"]
    pub fn symlink(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        4usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(fds_bits)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type time_t = __darwin_time_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type sigset_t = __darwin_sigset_t;
extern "C" {
    #[link_name = "\u{1}_pselect"]
    pub fn pselect(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *const timespec,
        arg6: *const sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_select"]
    pub fn select(
        arg1: ::std::os::raw::c_int,
        arg2: *mut fd_set,
        arg3: *mut fd_set,
        arg4: *mut fd_set,
        arg5: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
pub type uuid_t = __darwin_uuid_t;
extern "C" {
    #[link_name = "\u{1}__Exit"]
    pub fn _Exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_accessx_np"]
    pub fn accessx_np(
        arg1: *const accessx_descriptor,
        arg2: usize,
        arg3: *mut ::std::os::raw::c_int,
        arg4: uid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_acct"]
    pub fn acct(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_add_profil"]
    pub fn add_profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_endusershell"]
    pub fn endusershell();
}
extern "C" {
    #[link_name = "\u{1}_execvP"]
    pub fn execvP(
        __file: *const ::std::os::raw::c_char,
        __searchpath: *const ::std::os::raw::c_char,
        __argv: *const *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fflagstostr"]
    pub fn fflagstostr(arg1: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_getdomainname"]
    pub fn getdomainname(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getgrouplist"]
    pub fn getgrouplist(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_gethostuuid"]
    pub fn gethostuuid(
        arg1: *mut ::std::os::raw::c_uchar,
        arg2: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getmode"]
    pub fn getmode(arg1: *const ::std::os::raw::c_void, arg2: mode_t) -> mode_t;
}
extern "C" {
    #[link_name = "\u{1}_getpeereid"]
    pub fn getpeereid(
        arg1: ::std::os::raw::c_int,
        arg2: *mut uid_t,
        arg3: *mut gid_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getsgroups_np"]
    pub fn getsgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getusershell"]
    pub fn getusershell() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_getwgroups_np"]
    pub fn getwgroups_np(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_initgroups"]
    pub fn initgroups(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_issetugid"]
    pub fn issetugid() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkdtemp"]
    pub fn mkdtemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_mknod"]
    pub fn mknod(
        arg1: *const ::std::os::raw::c_char,
        arg2: mode_t,
        arg3: dev_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkpath_np"]
    pub fn mkpath_np(path: *const ::std::os::raw::c_char, omode: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkpathat_np"]
    pub fn mkpathat_np(
        dfd: ::std::os::raw::c_int,
        path: *const ::std::os::raw::c_char,
        omode: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkstemp"]
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkstemps"]
    pub fn mkstemps(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mktemp"]
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_mkostemp"]
    pub fn mkostemp(
        path: *mut ::std::os::raw::c_char,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkostemps"]
    pub fn mkostemps(
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkstemp_dprotected_np"]
    pub fn mkstemp_dprotected_np(
        path: *mut ::std::os::raw::c_char,
        dpclass: ::std::os::raw::c_int,
        dpflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkdtempat_np"]
    pub fn mkdtempat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_mkstempsat_np"]
    pub fn mkstempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkostempsat_np"]
    pub fn mkostempsat_np(
        dfd: ::std::os::raw::c_int,
        path: *mut ::std::os::raw::c_char,
        slen: ::std::os::raw::c_int,
        oflags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_nfssvc"]
    pub fn nfssvc(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_profil"]
    pub fn profil(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_setugid_np"]
    pub fn pthread_setugid_np(arg1: uid_t, arg2: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pthread_getugid_np"]
    pub fn pthread_getugid_np(arg1: *mut uid_t, arg2: *mut gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_reboot"]
    pub fn reboot(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_revoke"]
    pub fn revoke(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rcmd"]
    pub fn rcmd(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rcmd_af"]
    pub fn rcmd_af(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *mut ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rresvport"]
    pub fn rresvport(arg1: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rresvport_af"]
    pub fn rresvport_af(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_iruserok"]
    pub fn iruserok(
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_iruserok_sa"]
    pub fn iruserok_sa(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ruserok"]
    pub fn ruserok(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setdomainname"]
    pub fn setdomainname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setgroups"]
    pub fn setgroups(arg1: ::std::os::raw::c_int, arg2: *const gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sethostid"]
    pub fn sethostid(arg1: ::std::os::raw::c_long);
}
extern "C" {
    #[link_name = "\u{1}_sethostname"]
    pub fn sethostname(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setkey"]
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_setlogin"]
    pub fn setlogin(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setmode"]
    pub fn setmode(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_setrgid"]
    pub fn setrgid(arg1: gid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setruid"]
    pub fn setruid(arg1: uid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setsgroups_np"]
    pub fn setsgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setusershell"]
    pub fn setusershell();
}
extern "C" {
    #[link_name = "\u{1}_setwgroups_np"]
    pub fn setwgroups_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_uchar,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strtofflags"]
    pub fn strtofflags(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_swapon"]
    pub fn swapon(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ttyslot"]
    pub fn ttyslot() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_undelete"]
    pub fn undelete(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_unwhiteout"]
    pub fn unwhiteout(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_valloc"]
    pub fn valloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_syscall"]
    pub fn syscall(arg1: ::std::os::raw::c_int, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_suboptarg"]
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_getsubopt"]
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fgetattrlist"]
    pub fn fgetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fsetattrlist"]
    pub fn fsetattrlist(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getattrlist"]
    pub fn getattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setattrlist"]
    pub fn setattrlist(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_exchangedata"]
    pub fn exchangedata(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getdirentriesattr"]
    pub fn getdirentriesattr(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut ::std::os::raw::c_void,
        arg4: usize,
        arg5: *mut ::std::os::raw::c_uint,
        arg6: *mut ::std::os::raw::c_uint,
        arg7: *mut ::std::os::raw::c_uint,
        arg8: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fssearchblock {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct searchstate {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "\u{1}_searchfs"]
    pub fn searchfs(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut fssearchblock,
        arg3: *mut ::std::os::raw::c_ulong,
        arg4: ::std::os::raw::c_uint,
        arg5: ::std::os::raw::c_uint,
        arg6: *mut searchstate,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fsctl"]
    pub fn fsctl(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ffsctl"]
    pub fn ffsctl(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_ulong,
        arg3: *mut ::std::os::raw::c_void,
        arg4: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fsync_volume_np"]
    pub fn fsync_volume_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sync_volume_np"]
    pub fn sync_volume_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_optreset"]
    pub static mut optreset: ::std::os::raw::c_int;
}
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = u32;
pub type id_t = __darwin_id_t;
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_thread_state {
    pub __eax: ::std::os::raw::c_uint,
    pub __ebx: ::std::os::raw::c_uint,
    pub __ecx: ::std::os::raw::c_uint,
    pub __edx: ::std::os::raw::c_uint,
    pub __edi: ::std::os::raw::c_uint,
    pub __esi: ::std::os::raw::c_uint,
    pub __ebp: ::std::os::raw::c_uint,
    pub __esp: ::std::os::raw::c_uint,
    pub __ss: ::std::os::raw::c_uint,
    pub __eflags: ::std::os::raw::c_uint,
    pub __eip: ::std::os::raw::c_uint,
    pub __cs: ::std::os::raw::c_uint,
    pub __ds: ::std::os::raw::c_uint,
    pub __es: ::std::os::raw::c_uint,
    pub __fs: ::std::os::raw::c_uint,
    pub __gs: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_i386_thread_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_thread_state>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_i386_thread_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_thread_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_thread_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__eax as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ebx as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ebx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ecx as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ecx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__edx as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__edx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__edi as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__edi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__esi as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__esi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ebp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ebp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__esp as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__esp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ss as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__eflags as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eflags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__eip as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__eip)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__cs as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__cs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__ds as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__ds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__es as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__fs as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__fs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_i386_thread_state>())).__gs as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_thread_state),
            "::",
            stringify!(__gs)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_control {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u8>,
    pub __bindgen_align: [u16; 0usize],
}
#[test]
fn bindgen_test_layout___darwin_fp_control() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_control>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_control))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_control>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_control))
    );
}
impl __darwin_fp_control {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __pc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___pc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn __rc(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 2u8) as u16) }
    }
    #[inline]
    pub fn set___rc(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __pc: ::std::os::raw::c_ushort,
        __rc: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(8usize, 2u8, {
            let __pc: u16 = unsafe { ::std::mem::transmute(__pc) };
            __pc as u64
        });
        __bindgen_bitfield_unit.set(10usize, 2u8, {
            let __rc: u16 = unsafe { ::std::mem::transmute(__rc) };
            __rc as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_control_t = __darwin_fp_control;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_fp_status {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 2usize], u8>,
    pub __bindgen_align: [u16; 0usize],
}
#[test]
fn bindgen_test_layout___darwin_fp_status() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_fp_status>(),
        2usize,
        concat!("Size of: ", stringify!(__darwin_fp_status))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_fp_status>(),
        2usize,
        concat!("Alignment of ", stringify!(__darwin_fp_status))
    );
}
impl __darwin_fp_status {
    #[inline]
    pub fn __invalid(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___invalid(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __denorm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(1usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___denorm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(1usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __zdiv(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(2usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___zdiv(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(2usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __ovrfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(3usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___ovrfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(3usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __undfl(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___undfl(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __precis(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___precis(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __stkflt(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___stkflt(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __errsumm(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___errsumm(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c0(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c0(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c1(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c1(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __c2(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c2(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __tos(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(11usize, 3u8) as u16) }
    }
    #[inline]
    pub fn set___tos(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(11usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn __c3(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___c3(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn __busy(&self) -> ::std::os::raw::c_ushort {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(15usize, 1u8) as u16) }
    }
    #[inline]
    pub fn set___busy(&mut self, val: ::std::os::raw::c_ushort) {
        unsafe {
            let val: u16 = ::std::mem::transmute(val);
            self._bitfield_1.set(15usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __invalid: ::std::os::raw::c_ushort,
        __denorm: ::std::os::raw::c_ushort,
        __zdiv: ::std::os::raw::c_ushort,
        __ovrfl: ::std::os::raw::c_ushort,
        __undfl: ::std::os::raw::c_ushort,
        __precis: ::std::os::raw::c_ushort,
        __stkflt: ::std::os::raw::c_ushort,
        __errsumm: ::std::os::raw::c_ushort,
        __c0: ::std::os::raw::c_ushort,
        __c1: ::std::os::raw::c_ushort,
        __c2: ::std::os::raw::c_ushort,
        __tos: ::std::os::raw::c_ushort,
        __c3: ::std::os::raw::c_ushort,
        __busy: ::std::os::raw::c_ushort,
    ) -> __BindgenBitfieldUnit<[u8; 2usize], u8> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 2usize], u8> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 1u8, {
            let __invalid: u16 = unsafe { ::std::mem::transmute(__invalid) };
            __invalid as u64
        });
        __bindgen_bitfield_unit.set(1usize, 1u8, {
            let __denorm: u16 = unsafe { ::std::mem::transmute(__denorm) };
            __denorm as u64
        });
        __bindgen_bitfield_unit.set(2usize, 1u8, {
            let __zdiv: u16 = unsafe { ::std::mem::transmute(__zdiv) };
            __zdiv as u64
        });
        __bindgen_bitfield_unit.set(3usize, 1u8, {
            let __ovrfl: u16 = unsafe { ::std::mem::transmute(__ovrfl) };
            __ovrfl as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let __undfl: u16 = unsafe { ::std::mem::transmute(__undfl) };
            __undfl as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let __precis: u16 = unsafe { ::std::mem::transmute(__precis) };
            __precis as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let __stkflt: u16 = unsafe { ::std::mem::transmute(__stkflt) };
            __stkflt as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __errsumm: u16 = unsafe { ::std::mem::transmute(__errsumm) };
            __errsumm as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let __c0: u16 = unsafe { ::std::mem::transmute(__c0) };
            __c0 as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let __c1: u16 = unsafe { ::std::mem::transmute(__c1) };
            __c1 as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let __c2: u16 = unsafe { ::std::mem::transmute(__c2) };
            __c2 as u64
        });
        __bindgen_bitfield_unit.set(11usize, 3u8, {
            let __tos: u16 = unsafe { ::std::mem::transmute(__tos) };
            __tos as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let __c3: u16 = unsafe { ::std::mem::transmute(__c3) };
            __c3 as u64
        });
        __bindgen_bitfield_unit.set(15usize, 1u8, {
            let __busy: u16 = unsafe { ::std::mem::transmute(__busy) };
            __busy as u64
        });
        __bindgen_bitfield_unit
    }
}
pub type __darwin_fp_status_t = __darwin_fp_status;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mmst_reg {
    pub __mmst_reg: [::std::os::raw::c_char; 10usize],
    pub __mmst_rsrv: [::std::os::raw::c_char; 6usize],
}
#[test]
fn bindgen_test_layout___darwin_mmst_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mmst_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_mmst_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mmst_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_mmst_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mmst_reg>())).__mmst_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mmst_reg),
            "::",
            stringify!(__mmst_reg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mmst_reg>())).__mmst_rsrv as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mmst_reg),
            "::",
            stringify!(__mmst_rsrv)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_xmm_reg {
    pub __xmm_reg: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_xmm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_xmm_reg>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_xmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_xmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_xmm_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_xmm_reg>())).__xmm_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_xmm_reg),
            "::",
            stringify!(__xmm_reg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ymm_reg {
    pub __ymm_reg: [::std::os::raw::c_char; 32usize],
}
#[test]
fn bindgen_test_layout___darwin_ymm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_ymm_reg>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_ymm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ymm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_ymm_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ymm_reg>())).__ymm_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ymm_reg),
            "::",
            stringify!(__ymm_reg)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_zmm_reg {
    pub __zmm_reg: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout___darwin_zmm_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_zmm_reg>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_zmm_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_zmm_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_zmm_reg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_zmm_reg>())).__zmm_reg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_zmm_reg),
            "::",
            stringify!(__zmm_reg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_opmask_reg {
    pub __opmask_reg: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout___darwin_opmask_reg() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_opmask_reg>(),
        8usize,
        concat!("Size of: ", stringify!(__darwin_opmask_reg))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_opmask_reg>(),
        1usize,
        concat!("Alignment of ", stringify!(__darwin_opmask_reg))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_opmask_reg>())).__opmask_reg as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_opmask_reg),
            "::",
            stringify!(__opmask_reg)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_i386_float_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_i386_float_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_float_state>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_i386_float_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_float_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_float_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_rsrv4 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_float_state>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_float_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_i386_avx_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx_state>(),
        716usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_reserved as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_mxcsrmask as *const _ as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_rsrv4 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_reserved1 as *const _ as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__avx_reserved1 as *const _ as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx_state>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx_state),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_i386_avx512_state {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 224usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
}
#[test]
fn bindgen_test_layout___darwin_i386_avx512_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_avx512_state>(),
        1036usize,
        concat!("Size of: ", stringify!(__darwin_i386_avx512_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_avx512_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_avx512_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_rsrv4 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__avx_reserved1 as *const _
                as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k0 as *const _ as usize
        },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k1 as *const _ as usize
        },
        724usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k2 as *const _ as usize
        },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k3 as *const _ as usize
        },
        740usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k4 as *const _ as usize
        },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k5 as *const _ as usize
        },
        756usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k6 as *const _ as usize
        },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_k7 as *const _ as usize
        },
        772usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_k7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh0 as *const _ as usize
        },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh1 as *const _ as usize
        },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh2 as *const _ as usize
        },
        844usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh3 as *const _ as usize
        },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh4 as *const _ as usize
        },
        908usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh5 as *const _ as usize
        },
        940usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh6 as *const _ as usize
        },
        972usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_avx512_state>())).__fpu_zmmh7 as *const _ as usize
        },
        1004usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_avx512_state),
            "::",
            stringify!(__fpu_zmmh7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
#[test]
fn bindgen_test_layout___darwin_i386_exception_state() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_i386_exception_state>(),
        12usize,
        concat!("Size of: ", stringify!(__darwin_i386_exception_state))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_i386_exception_state>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_i386_exception_state))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__trapno as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__trapno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__cpu as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__cpu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__err as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__err)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_i386_exception_state>())).__faultvaddr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_i386_exception_state),
            "::",
            stringify!(__faultvaddr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state32 {
    pub __dr0: ::std::os::raw::c_uint,
    pub __dr1: ::std::os::raw::c_uint,
    pub __dr2: ::std::os::raw::c_uint,
    pub __dr3: ::std::os::raw::c_uint,
    pub __dr4: ::std::os::raw::c_uint,
    pub __dr5: ::std::os::raw::c_uint,
    pub __dr6: ::std::os::raw::c_uint,
    pub __dr7: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state32>(),
        32usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state32))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr0 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr1 as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr2 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr3 as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr4 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr5 as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr6 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state32>())).__dr7 as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state32),
            "::",
            stringify!(__dr7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_thread_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_thread_state64>(),
        168usize,
        concat!("Size of: ", stringify!(__darwin_x86_thread_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_thread_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_thread_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rax as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rax)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rbx as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rbx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rcx as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rcx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rdx as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rdx)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rdi as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rdi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rsi as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rsi)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rbp as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rbp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rsp as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rsp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r8 as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r9 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r10 as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r11 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r12 as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r13 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r14 as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__r15 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__r15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rip as *const _ as usize
        },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__rflags as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__rflags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__cs as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__fs as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__fs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_thread_state64>())).__gs as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_thread_state64),
            "::",
            stringify!(__gs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_x86_float_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_x86_float_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_float_state64>(),
        524usize,
        concat!("Size of: ", stringify!(__darwin_x86_float_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_float_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_float_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm8 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm9 as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm10 as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm11 as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm12 as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm13 as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm14 as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_xmm15 as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_rsrv4 as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_float_state64>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_float_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_x86_avx_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx_state64>(),
        844usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_reserved as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm8 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm9 as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm10 as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm11 as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm12 as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm13 as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm14 as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_xmm15 as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_rsrv4 as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__avx_reserved1 as *const _
                as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh8 as *const _ as usize
        },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh9 as *const _ as usize
        },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh10 as *const _ as usize
        },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh11 as *const _ as usize
        },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh12 as *const _ as usize
        },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh13 as *const _ as usize
        },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh14 as *const _ as usize
        },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx_state64>())).__fpu_ymmh15 as *const _ as usize
        },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx_state64),
            "::",
            stringify!(__fpu_ymmh15)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_x86_avx512_state64 {
    pub __fpu_reserved: [::std::os::raw::c_int; 2usize],
    pub __fpu_fcw: __darwin_fp_control,
    pub __fpu_fsw: __darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: __darwin_mmst_reg,
    pub __fpu_stmm1: __darwin_mmst_reg,
    pub __fpu_stmm2: __darwin_mmst_reg,
    pub __fpu_stmm3: __darwin_mmst_reg,
    pub __fpu_stmm4: __darwin_mmst_reg,
    pub __fpu_stmm5: __darwin_mmst_reg,
    pub __fpu_stmm6: __darwin_mmst_reg,
    pub __fpu_stmm7: __darwin_mmst_reg,
    pub __fpu_xmm0: __darwin_xmm_reg,
    pub __fpu_xmm1: __darwin_xmm_reg,
    pub __fpu_xmm2: __darwin_xmm_reg,
    pub __fpu_xmm3: __darwin_xmm_reg,
    pub __fpu_xmm4: __darwin_xmm_reg,
    pub __fpu_xmm5: __darwin_xmm_reg,
    pub __fpu_xmm6: __darwin_xmm_reg,
    pub __fpu_xmm7: __darwin_xmm_reg,
    pub __fpu_xmm8: __darwin_xmm_reg,
    pub __fpu_xmm9: __darwin_xmm_reg,
    pub __fpu_xmm10: __darwin_xmm_reg,
    pub __fpu_xmm11: __darwin_xmm_reg,
    pub __fpu_xmm12: __darwin_xmm_reg,
    pub __fpu_xmm13: __darwin_xmm_reg,
    pub __fpu_xmm14: __darwin_xmm_reg,
    pub __fpu_xmm15: __darwin_xmm_reg,
    pub __fpu_rsrv4: [::std::os::raw::c_char; 96usize],
    pub __fpu_reserved1: ::std::os::raw::c_int,
    pub __avx_reserved1: [::std::os::raw::c_char; 64usize],
    pub __fpu_ymmh0: __darwin_xmm_reg,
    pub __fpu_ymmh1: __darwin_xmm_reg,
    pub __fpu_ymmh2: __darwin_xmm_reg,
    pub __fpu_ymmh3: __darwin_xmm_reg,
    pub __fpu_ymmh4: __darwin_xmm_reg,
    pub __fpu_ymmh5: __darwin_xmm_reg,
    pub __fpu_ymmh6: __darwin_xmm_reg,
    pub __fpu_ymmh7: __darwin_xmm_reg,
    pub __fpu_ymmh8: __darwin_xmm_reg,
    pub __fpu_ymmh9: __darwin_xmm_reg,
    pub __fpu_ymmh10: __darwin_xmm_reg,
    pub __fpu_ymmh11: __darwin_xmm_reg,
    pub __fpu_ymmh12: __darwin_xmm_reg,
    pub __fpu_ymmh13: __darwin_xmm_reg,
    pub __fpu_ymmh14: __darwin_xmm_reg,
    pub __fpu_ymmh15: __darwin_xmm_reg,
    pub __fpu_k0: __darwin_opmask_reg,
    pub __fpu_k1: __darwin_opmask_reg,
    pub __fpu_k2: __darwin_opmask_reg,
    pub __fpu_k3: __darwin_opmask_reg,
    pub __fpu_k4: __darwin_opmask_reg,
    pub __fpu_k5: __darwin_opmask_reg,
    pub __fpu_k6: __darwin_opmask_reg,
    pub __fpu_k7: __darwin_opmask_reg,
    pub __fpu_zmmh0: __darwin_ymm_reg,
    pub __fpu_zmmh1: __darwin_ymm_reg,
    pub __fpu_zmmh2: __darwin_ymm_reg,
    pub __fpu_zmmh3: __darwin_ymm_reg,
    pub __fpu_zmmh4: __darwin_ymm_reg,
    pub __fpu_zmmh5: __darwin_ymm_reg,
    pub __fpu_zmmh6: __darwin_ymm_reg,
    pub __fpu_zmmh7: __darwin_ymm_reg,
    pub __fpu_zmmh8: __darwin_ymm_reg,
    pub __fpu_zmmh9: __darwin_ymm_reg,
    pub __fpu_zmmh10: __darwin_ymm_reg,
    pub __fpu_zmmh11: __darwin_ymm_reg,
    pub __fpu_zmmh12: __darwin_ymm_reg,
    pub __fpu_zmmh13: __darwin_ymm_reg,
    pub __fpu_zmmh14: __darwin_ymm_reg,
    pub __fpu_zmmh15: __darwin_ymm_reg,
    pub __fpu_zmm16: __darwin_zmm_reg,
    pub __fpu_zmm17: __darwin_zmm_reg,
    pub __fpu_zmm18: __darwin_zmm_reg,
    pub __fpu_zmm19: __darwin_zmm_reg,
    pub __fpu_zmm20: __darwin_zmm_reg,
    pub __fpu_zmm21: __darwin_zmm_reg,
    pub __fpu_zmm22: __darwin_zmm_reg,
    pub __fpu_zmm23: __darwin_zmm_reg,
    pub __fpu_zmm24: __darwin_zmm_reg,
    pub __fpu_zmm25: __darwin_zmm_reg,
    pub __fpu_zmm26: __darwin_zmm_reg,
    pub __fpu_zmm27: __darwin_zmm_reg,
    pub __fpu_zmm28: __darwin_zmm_reg,
    pub __fpu_zmm29: __darwin_zmm_reg,
    pub __fpu_zmm30: __darwin_zmm_reg,
    pub __fpu_zmm31: __darwin_zmm_reg,
}
#[test]
fn bindgen_test_layout___darwin_x86_avx512_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_avx512_state64>(),
        2444usize,
        concat!("Size of: ", stringify!(__darwin_x86_avx512_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_avx512_state64>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_x86_avx512_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_reserved as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_reserved)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_fcw as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fcw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_fsw as *const _ as usize
        },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fsw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ftw as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ftw)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv1 as *const _ as usize
        },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_fop as *const _ as usize
        },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_fop)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ip as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ip)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_cs as *const _ as usize
        },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_cs)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv2 as *const _ as usize
        },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_dp as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_dp)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ds as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ds)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv3 as *const _ as usize
        },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_mxcsr as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_mxcsr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_mxcsrmask as *const _
                as usize
        },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_mxcsrmask)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm0 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm1 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm2 as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm3 as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm4 as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm5 as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm6 as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_stmm7 as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_stmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm0 as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm1 as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm2 as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm3 as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm4 as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm5 as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm6 as *const _ as usize
        },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm7 as *const _ as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm8 as *const _ as usize
        },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm9 as *const _ as usize
        },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm10 as *const _ as usize
        },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm11 as *const _ as usize
        },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm12 as *const _ as usize
        },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm13 as *const _ as usize
        },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm14 as *const _ as usize
        },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_xmm15 as *const _ as usize
        },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_xmm15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_rsrv4 as *const _ as usize
        },
        424usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_rsrv4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_reserved1 as *const _
                as usize
        },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__avx_reserved1 as *const _
                as usize
        },
        524usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__avx_reserved1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh0 as *const _ as usize
        },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh1 as *const _ as usize
        },
        604usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh2 as *const _ as usize
        },
        620usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh3 as *const _ as usize
        },
        636usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh4 as *const _ as usize
        },
        652usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh5 as *const _ as usize
        },
        668usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh6 as *const _ as usize
        },
        684usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh7 as *const _ as usize
        },
        700usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh8 as *const _ as usize
        },
        716usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh9 as *const _ as usize
        },
        732usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh10 as *const _
                as usize
        },
        748usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh11 as *const _
                as usize
        },
        764usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh12 as *const _
                as usize
        },
        780usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh13 as *const _
                as usize
        },
        796usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh14 as *const _
                as usize
        },
        812usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_ymmh15 as *const _
                as usize
        },
        828usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_ymmh15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k0 as *const _ as usize
        },
        844usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k1 as *const _ as usize
        },
        852usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k2 as *const _ as usize
        },
        860usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k3 as *const _ as usize
        },
        868usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k4 as *const _ as usize
        },
        876usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k5 as *const _ as usize
        },
        884usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k6 as *const _ as usize
        },
        892usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_k7 as *const _ as usize
        },
        900usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_k7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh0 as *const _ as usize
        },
        908usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh1 as *const _ as usize
        },
        940usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh2 as *const _ as usize
        },
        972usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh3 as *const _ as usize
        },
        1004usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh4 as *const _ as usize
        },
        1036usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh5 as *const _ as usize
        },
        1068usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh6 as *const _ as usize
        },
        1100usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh7 as *const _ as usize
        },
        1132usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh7)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh8 as *const _ as usize
        },
        1164usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh9 as *const _ as usize
        },
        1196usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh9)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh10 as *const _
                as usize
        },
        1228usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh10)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh11 as *const _
                as usize
        },
        1260usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh11)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh12 as *const _
                as usize
        },
        1292usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh12)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh13 as *const _
                as usize
        },
        1324usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh13)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh14 as *const _
                as usize
        },
        1356usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh14)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmmh15 as *const _
                as usize
        },
        1388usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmmh15)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm16 as *const _ as usize
        },
        1420usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm17 as *const _ as usize
        },
        1484usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm17)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm18 as *const _ as usize
        },
        1548usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm18)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm19 as *const _ as usize
        },
        1612usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm19)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm20 as *const _ as usize
        },
        1676usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm20)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm21 as *const _ as usize
        },
        1740usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm21)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm22 as *const _ as usize
        },
        1804usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm22)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm23 as *const _ as usize
        },
        1868usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm23)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm24 as *const _ as usize
        },
        1932usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm24)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm25 as *const _ as usize
        },
        1996usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm25)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm26 as *const _ as usize
        },
        2060usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm26)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm27 as *const _ as usize
        },
        2124usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm27)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm28 as *const _ as usize
        },
        2188usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm28)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm29 as *const _ as usize
        },
        2252usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm29)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm30 as *const _ as usize
        },
        2316usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm30)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_avx512_state64>())).__fpu_zmm31 as *const _ as usize
        },
        2380usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_avx512_state64),
            "::",
            stringify!(__fpu_zmm31)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_exception_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_exception_state64>(),
        16usize,
        concat!("Size of: ", stringify!(__darwin_x86_exception_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_exception_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_exception_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__trapno as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__trapno)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__cpu as *const _ as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__cpu)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__err as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__err)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_exception_state64>())).__faultvaddr as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_exception_state64),
            "::",
            stringify!(__faultvaddr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
#[test]
fn bindgen_test_layout___darwin_x86_debug_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_debug_state64>(),
        64usize,
        concat!("Size of: ", stringify!(__darwin_x86_debug_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_debug_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_debug_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr0 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr0)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr1 as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr3 as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr3)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr4 as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr5 as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr5)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr6 as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr6)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_debug_state64>())).__dr7 as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_debug_state64),
            "::",
            stringify!(__dr7)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_x86_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
#[test]
fn bindgen_test_layout___darwin_x86_cpmu_state64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_x86_cpmu_state64>(),
        128usize,
        concat!("Size of: ", stringify!(__darwin_x86_cpmu_state64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_x86_cpmu_state64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_x86_cpmu_state64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_x86_cpmu_state64>())).__ctrs as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_x86_cpmu_state64),
            "::",
            stringify!(__ctrs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_float_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext32>(),
        600usize,
        concat!("Size of: ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext32>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext32>())).__ss as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext32>())).__fs as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext32),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext_avx32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx32>(),
        792usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx32))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx32>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx32),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx32>())).__ss as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx32),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx32>())).__fs as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx32),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext_avx512_32 {
    pub __es: __darwin_i386_exception_state,
    pub __ss: __darwin_i386_thread_state,
    pub __fs: __darwin_i386_avx512_state,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_32() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_32>(),
        1112usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_32))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_32>(),
        4usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx512_32))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_32>())).__es as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_32),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_32>())).__ss as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_32),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_32>())).__fs as *const _ as usize
        },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_32),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_float_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext64>(),
        712usize,
        concat!("Size of: ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64>())).__ss as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext64>())).__fs as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext64),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext_avx64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx64>(),
        1032usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx64>())).__es as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx64>())).__ss as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_mcontext_avx64>())).__fs as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx64),
            "::",
            stringify!(__fs)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __darwin_mcontext_avx512_64 {
    pub __es: __darwin_x86_exception_state64,
    pub __ss: __darwin_x86_thread_state64,
    pub __fs: __darwin_x86_avx512_state64,
}
#[test]
fn bindgen_test_layout___darwin_mcontext_avx512_64() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_mcontext_avx512_64>(),
        2632usize,
        concat!("Size of: ", stringify!(__darwin_mcontext_avx512_64))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_mcontext_avx512_64>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_mcontext_avx512_64))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_64>())).__es as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64),
            "::",
            stringify!(__es)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_64>())).__ss as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64),
            "::",
            stringify!(__ss)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_mcontext_avx512_64>())).__fs as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_mcontext_avx512_64),
            "::",
            stringify!(__fs)
        )
    );
}
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___darwin_sigaltstack() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_sigaltstack>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_sigaltstack>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_sigaltstack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_sigaltstack>())).ss_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_sigaltstack>())).ss_size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_sigaltstack>())).ss_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_sigaltstack),
            "::",
            stringify!(ss_flags)
        )
    );
}
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
#[test]
fn bindgen_test_layout___darwin_ucontext() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_ucontext>(),
        56usize,
        concat!("Size of: ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_ucontext>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_ucontext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_onstack as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_onstack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_sigmask as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_sigmask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_stack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_link as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_mcsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_mcsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__darwin_ucontext>())).uc_mcontext as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_ucontext),
            "::",
            stringify!(uc_mcontext)
        )
    );
}
pub type ucontext_t = __darwin_ucontext;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_sigval() {
    assert_eq!(
        ::std::mem::size_of::<sigval>(),
        8usize,
        concat!("Size of: ", stringify!(sigval))
    );
    assert_eq!(
        ::std::mem::align_of::<sigval>(),
        8usize,
        concat!("Alignment of ", stringify!(sigval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_int as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigval>())).sival_ptr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigval),
            "::",
            stringify!(sival_ptr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
#[test]
fn bindgen_test_layout_sigevent() {
    assert_eq!(
        ::std::mem::size_of::<sigevent>(),
        32usize,
        concat!("Size of: ", stringify!(sigevent))
    );
    assert_eq!(
        ::std::mem::align_of::<sigevent>(),
        8usize,
        concat!("Alignment of ", stringify!(sigevent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_notify as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_signo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigevent>())).sigev_notify_function as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify_function)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<sigevent>())).sigev_notify_attributes as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sigevent),
            "::",
            stringify!(sigev_notify_attributes)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
#[test]
fn bindgen_test_layout___siginfo() {
    assert_eq!(
        ::std::mem::size_of::<__siginfo>(),
        104usize,
        concat!("Size of: ", stringify!(__siginfo))
    );
    assert_eq!(
        ::std::mem::align_of::<__siginfo>(),
        8usize,
        concat!("Alignment of ", stringify!(__siginfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_signo as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_signo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_errno as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_errno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_code as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_pid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_uid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_status as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_value as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).si_band as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(si_band)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__siginfo>())).__pad as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__siginfo),
            "::",
            stringify!(__pad)
        )
    );
}
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout___sigaction_u() {
    assert_eq!(
        ::std::mem::size_of::<__sigaction_u>(),
        8usize,
        concat!("Size of: ", stringify!(__sigaction_u))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction_u>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction_u))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction_u>())).__sa_handler as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction_u),
            "::",
            stringify!(__sa_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction_u>())).__sa_sigaction as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction_u),
            "::",
            stringify!(__sa_sigaction)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sigaction() {
    assert_eq!(
        ::std::mem::size_of::<__sigaction>(),
        24usize,
        concat!("Size of: ", stringify!(__sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigaction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).__sigaction_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(__sigaction_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).sa_tramp as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_tramp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).sa_mask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigaction>())).sa_flags as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigaction() {
    assert_eq!(
        ::std::mem::size_of::<sigaction>(),
        16usize,
        concat!("Size of: ", stringify!(sigaction))
    );
    assert_eq!(
        ::std::mem::align_of::<sigaction>(),
        8usize,
        concat!("Alignment of ", stringify!(sigaction))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).__sigaction_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(__sigaction_u)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigaction>())).sa_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigaction),
            "::",
            stringify!(sa_flags)
        )
    );
}
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigvec() {
    assert_eq!(
        ::std::mem::size_of::<sigvec>(),
        16usize,
        concat!("Size of: ", stringify!(sigvec))
    );
    assert_eq!(
        ::std::mem::align_of::<sigvec>(),
        8usize,
        concat!("Alignment of ", stringify!(sigvec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigvec>())).sv_handler as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_handler)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigvec>())).sv_mask as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigvec>())).sv_flags as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(sigvec),
            "::",
            stringify!(sv_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_sigstack() {
    assert_eq!(
        ::std::mem::size_of::<sigstack>(),
        16usize,
        concat!("Size of: ", stringify!(sigstack))
    );
    assert_eq!(
        ::std::mem::align_of::<sigstack>(),
        8usize,
        concat!("Alignment of ", stringify!(sigstack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigstack>())).ss_sp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_sp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sigstack>())).ss_onstack as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sigstack),
            "::",
            stringify!(ss_onstack)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_signal"]
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<
                unsafe extern "C" fn(arg1: ::std::os::raw::c_int),
            >,
        ),
    >;
}
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_rusage() {
    assert_eq!(
        ::std::mem::size_of::<rusage>(),
        144usize,
        concat!("Size of: ", stringify!(rusage))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_utime as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_utime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_stime as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_stime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_maxrss as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_maxrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_ixrss as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_ixrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_idrss as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_idrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_isrss as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_isrss)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_minflt as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_minflt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_majflt as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_majflt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nswap as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nswap)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_inblock as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_inblock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_oublock as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_oublock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_msgsnd as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_msgsnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_msgrcv as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_msgrcv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nsignals as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nsignals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nvcsw as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nvcsw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage>())).ru_nivcsw as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage),
            "::",
            stringify!(ru_nivcsw)
        )
    );
}
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v0() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v0>(),
        96usize,
        concat!("Size of: ", stringify!(rusage_info_v0))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v0>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v0))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v0>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v0>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v0),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v1() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v1>(),
        144usize,
        concat!("Size of: ", stringify!(rusage_info_v1))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v1>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v1>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v1),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v2() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v2>(),
        160usize,
        concat!("Size of: ", stringify!(rusage_info_v2))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v2>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_diskio_bytesread as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v2>())).ri_diskio_byteswritten as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v2),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
#[test]
fn bindgen_test_layout_rusage_info_v3() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v3>(),
        232usize,
        concat!("Size of: ", stringify!(rusage_info_v3))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v3>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_diskio_bytesread as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_diskio_byteswritten as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_default as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_maintenance as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_background as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_utility as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_legacy as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_user_initiated as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_cpu_time_qos_user_interactive as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_billed_system_time as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v3>())).ri_serviced_system_time as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v3),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_unused: [u64; 2usize],
}
#[test]
fn bindgen_test_layout_rusage_info_v4() {
    assert_eq!(
        ::std::mem::size_of::<rusage_info_v4>(),
        296usize,
        concat!("Size of: ", stringify!(rusage_info_v4))
    );
    assert_eq!(
        ::std::mem::align_of::<rusage_info_v4>(),
        8usize,
        concat!("Alignment of ", stringify!(rusage_info_v4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_uuid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_uuid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_user_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_user_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_system_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_pkg_idle_wkups as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_interrupt_wkups as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_pageins as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_pageins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_wired_size as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_wired_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_resident_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_resident_size)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_phys_footprint as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_phys_footprint)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_proc_start_abstime as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_proc_start_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_proc_exit_abstime as *const _ as usize
        },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_proc_exit_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_user_time as *const _ as usize
        },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_user_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_system_time as *const _ as usize
        },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_pkg_idle_wkups as *const _ as usize
        },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_pkg_idle_wkups)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_interrupt_wkups as *const _ as usize
        },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_interrupt_wkups)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_pageins as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_pageins)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_child_elapsed_abstime as *const _ as usize
        },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_child_elapsed_abstime)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_diskio_bytesread as *const _ as usize
        },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_diskio_bytesread)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_diskio_byteswritten as *const _ as usize
        },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_diskio_byteswritten)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_default as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_default)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_maintenance as *const _
                as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_maintenance)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_background as *const _
                as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_background)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_utility as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_utility)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_legacy as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_legacy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_user_initiated as *const _
                as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_user_initiated)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_cpu_time_qos_user_interactive as *const _
                as usize
        },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cpu_time_qos_user_interactive)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_billed_system_time as *const _ as usize
        },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_billed_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_serviced_system_time as *const _ as usize
        },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_serviced_system_time)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_logical_writes as *const _ as usize
        },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_logical_writes)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_lifetime_max_phys_footprint as *const _
                as usize
        },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_lifetime_max_phys_footprint)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_instructions as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_instructions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_cycles as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_cycles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_billed_energy as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_billed_energy)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<rusage_info_v4>())).ri_serviced_energy as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_serviced_energy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rusage_info_v4>())).ri_unused as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(rusage_info_v4),
            "::",
            stringify!(ri_unused)
        )
    );
}
pub type rusage_info_current = rusage_info_v4;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
#[test]
fn bindgen_test_layout_rlimit() {
    assert_eq!(
        ::std::mem::size_of::<rlimit>(),
        16usize,
        concat!("Size of: ", stringify!(rlimit))
    );
    assert_eq!(
        ::std::mem::align_of::<rlimit>(),
        8usize,
        concat!("Alignment of ", stringify!(rlimit))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rlimit>())).rlim_cur as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rlimit),
            "::",
            stringify!(rlim_cur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rlimit>())).rlim_max as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rlimit),
            "::",
            stringify!(rlim_max)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
#[test]
fn bindgen_test_layout_proc_rlimit_control_wakeupmon() {
    assert_eq!(
        ::std::mem::size_of::<proc_rlimit_control_wakeupmon>(),
        8usize,
        concat!("Size of: ", stringify!(proc_rlimit_control_wakeupmon))
    );
    assert_eq!(
        ::std::mem::align_of::<proc_rlimit_control_wakeupmon>(),
        4usize,
        concat!("Alignment of ", stringify!(proc_rlimit_control_wakeupmon))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<proc_rlimit_control_wakeupmon>())).wm_flags as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(proc_rlimit_control_wakeupmon),
            "::",
            stringify!(wm_flags)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<proc_rlimit_control_wakeupmon>())).wm_rate as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(proc_rlimit_control_wakeupmon),
            "::",
            stringify!(wm_rate)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_getpriority"]
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getiopolicy_np"]
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getrlimit"]
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getrusage"]
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setpriority"]
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setiopolicy_np"]
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setrlimit"]
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_1))
    );
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize], u16>,
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Size of: ", stringify!(wait__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<wait__bindgen_ty_2>(),
        4usize,
        concat!("Alignment of ", stringify!(wait__bindgen_ty_2))
    );
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize], u16> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize], u16> =
            Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[test]
fn bindgen_test_layout_wait() {
    assert_eq!(
        ::std::mem::size_of::<wait>(),
        4usize,
        concat!("Size of: ", stringify!(wait))
    );
    assert_eq!(
        ::std::mem::align_of::<wait>(),
        4usize,
        concat!("Alignment of ", stringify!(wait))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_status as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(wait),
            "::",
            stringify!(w_status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_T as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_T))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<wait>())).w_S as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(wait), "::", stringify!(w_S))
    );
}
extern "C" {
    #[link_name = "\u{1}_wait"]
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_waitpid"]
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_waitid"]
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wait3"]
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_wait4"]
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    #[link_name = "\u{1}_alloca"]
    pub fn alloca(arg1: usize) -> *mut ::std::os::raw::c_void;
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(
        ::std::mem::size_of::<div_t>(),
        8usize,
        concat!("Size of: ", stringify!(div_t))
    );
    assert_eq!(
        ::std::mem::align_of::<div_t>(),
        4usize,
        concat!("Alignment of ", stringify!(div_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<div_t>())).rem as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(div_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<ldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(ldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<ldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(ldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(
        ::std::mem::size_of::<lldiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(lldiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<lldiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(lldiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lldiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lldiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}___mb_cur_max"]
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_abort"]
    pub fn abort();
}
extern "C" {
    #[link_name = "\u{1}_abs"]
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_atexit"]
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_atof"]
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_atoi"]
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_atol"]
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_atoll"]
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_bsearch"]
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_calloc"]
    pub fn calloc(__count: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_div"]
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    #[link_name = "\u{1}_exit"]
    pub fn exit(arg1: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_free"]
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_getenv"]
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_labs"]
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_ldiv"]
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    #[link_name = "\u{1}_llabs"]
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_lldiv"]
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    #[link_name = "\u{1}_malloc"]
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_mblen"]
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mbstowcs"]
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::std::os::raw::c_char, arg3: usize) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_mbtowc"]
    pub fn mbtowc(
        arg1: *mut wchar_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_posix_memalign"]
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_qsort"]
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    #[link_name = "\u{1}_rand"]
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_realloc"]
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_srand"]
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    #[link_name = "\u{1}_strtod"]
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_strtof"]
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    #[link_name = "\u{1}_strtol"]
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_strtold"]
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_strtoll"]
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_strtoul"]
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strtoull"]
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    #[link_name = "\u{1}_system"]
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_wcstombs"]
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const wchar_t, arg3: usize) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_wctomb"]
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_a64l"]
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_drand48"]
    pub fn drand48() -> f64;
}
extern "C" {
    #[link_name = "\u{1}_ecvt"]
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_erand48"]
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_fcvt"]
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_gcvt"]
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_grantpt"]
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_initstate"]
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_jrand48"]
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_l64a"]
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_lcong48"]
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    #[link_name = "\u{1}_lrand48"]
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_mrand48"]
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_nrand48"]
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_posix_openpt"]
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ptsname"]
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_putenv"]
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_random"]
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_rand_r"]
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_seed48"]
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    #[link_name = "\u{1}_setenv"]
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setstate"]
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_srand48"]
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
extern "C" {
    #[link_name = "\u{1}_srandom"]
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    #[link_name = "\u{1}_unlockpt"]
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_unsetenv"]
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_arc4random"]
    pub fn arc4random() -> u32;
}
extern "C" {
    #[link_name = "\u{1}_arc4random_addrandom"]
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_arc4random_buf"]
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
}
extern "C" {
    #[link_name = "\u{1}_arc4random_stir"]
    pub fn arc4random_stir();
}
extern "C" {
    #[link_name = "\u{1}_arc4random_uniform"]
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    #[link_name = "\u{1}_atexit_b"]
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_bsearch_b"]
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_cgetcap"]
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_cgetclose"]
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_cgetent"]
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_cgetfirst"]
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_cgetmatch"]
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_cgetnext"]
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_cgetnum"]
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_cgetset"]
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_cgetstr"]
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_cgetustr"]
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_daemon"]
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_devname"]
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_devname_r"]
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_getbsize"]
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_getloadavg"]
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getprogname"]
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_heapsort"]
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_heapsort_b"]
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mergesort"]
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mergesort_b"]
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_psort"]
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    #[link_name = "\u{1}_psort_b"]
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_psort_r"]
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    #[link_name = "\u{1}_qsort_b"]
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    #[link_name = "\u{1}_qsort_r"]
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    #[link_name = "\u{1}_radixsort"]
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setprogname"]
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_sradixsort"]
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sranddev"]
    pub fn sranddev();
}
extern "C" {
    #[link_name = "\u{1}_srandomdev"]
    pub fn srandomdev();
}
extern "C" {
    #[link_name = "\u{1}_reallocf"]
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_strtoq"]
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}_strtouq"]
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
pub type va_list = __darwin_va_list;
extern "C" {
    #[link_name = "\u{1}_renameat"]
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_renamex_np"]
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_renameatx_np"]
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout___sbuf() {
    assert_eq!(
        ::std::mem::size_of::<__sbuf>(),
        16usize,
        concat!("Size of: ", stringify!(__sbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<__sbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(__sbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sbuf>()))._size as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sbuf),
            "::",
            stringify!(_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
#[test]
fn bindgen_test_layout___sFILE() {
    assert_eq!(
        ::std::mem::size_of::<__sFILE>(),
        152usize,
        concat!("Size of: ", stringify!(__sFILE))
    );
    assert_eq!(
        ::std::mem::align_of::<__sFILE>(),
        8usize,
        concat!("Alignment of ", stringify!(__sFILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._p as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_p)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._r as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._w as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._file as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_file)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._bf as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_bf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lbfsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lbfsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._cookie as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_cookie)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._close as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_close)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._read as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._seek as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_seek)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._write as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ub as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ub)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._extra as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_extra)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ur as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ur)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._ubuf as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_ubuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._nbuf as *const _ as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_nbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._lb as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_lb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._blksize as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sFILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(__sFILE),
            "::",
            stringify!(_offset)
        )
    );
}
pub type FILE = __sFILE;
extern "C" {
    #[link_name = "\u{1}___stdinp"]
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}___stdoutp"]
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}___stderrp"]
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_clearerr"]
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_fclose"]
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_feof"]
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ferror"]
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fflush"]
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fgetc"]
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fgetpos"]
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fgets"]
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fopen"]
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_fprintf"]
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fputc"]
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fputs"]
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fread"]
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __nitems: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_freopen"]
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_fscanf"]
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fseek"]
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fsetpos"]
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ftell"]
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_fwrite"]
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __nitems: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_getc"]
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getchar"]
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_gets"]
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_perror"]
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_printf"]
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putc"]
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putchar"]
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_puts"]
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_remove"]
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rename"]
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_rewind"]
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_scanf"]
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setbuf"]
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_setvbuf"]
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sprintf"]
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sscanf"]
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_tmpfile"]
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_tmpnam"]
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ungetc"]
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vfprintf"]
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vprintf"]
    pub fn vprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vsprintf"]
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fdopen"]
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_fileno"]
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_pclose"]
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_popen"]
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}___srget"]
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___svfscanf"]
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___swbuf"]
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_flockfile"]
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_ftrylockfile"]
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_funlockfile"]
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    #[link_name = "\u{1}_getc_unlocked"]
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getchar_unlocked"]
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putc_unlocked"]
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putchar_unlocked"]
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getw"]
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_putw"]
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_tempnam"]
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fseeko"]
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ftello"]
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    #[link_name = "\u{1}_snprintf"]
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vfscanf"]
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vscanf"]
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vsnprintf"]
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vsscanf"]
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_dprintf"]
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vdprintf"]
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_getdelim"]
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_getline"]
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    #[link_name = "\u{1}_fmemopen"]
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_open_memstream"]
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_sys_nerr"]
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "\u{1}_asprintf"]
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ctermid_r"]
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fgetln"]
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fmtcheck"]
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_fpurge"]
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_setbuffer"]
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_setlinebuf"]
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_vasprintf"]
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_zopen"]
    pub fn zopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut FILE;
}
extern "C" {
    #[link_name = "\u{1}_funopen"]
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
pub type Py_ssize_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _object {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
}
#[test]
fn bindgen_test_layout__object() {
    assert_eq!(
        ::std::mem::size_of::<_object>(),
        24usize,
        concat!("Size of: ", stringify!(_object))
    );
    assert_eq!(
        ::std::mem::align_of::<_object>(),
        8usize,
        concat!("Alignment of ", stringify!(_object))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_object>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_object),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_object>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_object),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_object>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_object),
            "::",
            stringify!(ob_type)
        )
    );
}
pub type PyObject = _object;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyVarObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub ob_size: Py_ssize_t,
}
#[test]
fn bindgen_test_layout_PyVarObject() {
    assert_eq!(
        ::std::mem::size_of::<PyVarObject>(),
        32usize,
        concat!("Size of: ", stringify!(PyVarObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyVarObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyVarObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyVarObject>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyVarObject),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyVarObject>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyVarObject),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyVarObject>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyVarObject),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyVarObject>())).ob_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyVarObject),
            "::",
            stringify!(ob_size)
        )
    );
}
pub type freefunc = ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
pub type destructor = ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject)>;
pub type printfunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut FILE, arg3: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int,
>;
pub type getattrfunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut ::std::os::raw::c_char) -> *mut PyObject,
>;
pub type getattrofunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject,
>;
pub type setattrfunc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut PyObject,
    ) -> ::std::os::raw::c_int,
>;
pub type setattrofunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject, arg3: *mut PyObject)
        -> ::std::os::raw::c_int,
>;
pub type cmpfunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> ::std::os::raw::c_int,
>;
pub type reprfunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject>;
pub type hashfunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_long>;
pub type richcmpfunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject, arg3: ::std::os::raw::c_int)
        -> *mut PyObject,
>;
pub type getiterfunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject>;
pub type iternextfunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject>;
pub type descrgetfunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject, arg3: *mut PyObject)
        -> *mut PyObject,
>;
pub type descrsetfunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject, arg3: *mut PyObject)
        -> ::std::os::raw::c_int,
>;
pub type initproc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject, arg3: *mut PyObject)
        -> ::std::os::raw::c_int,
>;
pub type newfunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut _typeobject, arg2: *mut PyObject, arg3: *mut PyObject)
        -> *mut PyObject,
>;
pub type allocfunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut _typeobject, arg2: Py_ssize_t) -> *mut PyObject,
>;
pub type unaryfunc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject>;
pub type binaryfunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject,
>;
pub type ternaryfunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject, arg3: *mut PyObject)
        -> *mut PyObject,
>;
pub type inquiry =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject) -> ::std::os::raw::c_int>;
pub type lenfunc = ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject) -> Py_ssize_t>;
pub type ssizeargfunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: Py_ssize_t) -> *mut PyObject,
>;
pub type ssizessizeargfunc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: Py_ssize_t, arg3: Py_ssize_t) -> *mut PyObject,
>;
pub type ssizeobjargproc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: Py_ssize_t, arg3: *mut PyObject)
        -> ::std::os::raw::c_int,
>;
pub type ssizessizeobjargproc = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: Py_ssize_t,
        arg3: Py_ssize_t,
        arg4: *mut PyObject,
    ) -> ::std::os::raw::c_int,
>;
pub type objobjargproc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject, arg3: *mut PyObject)
        -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bufferinfo {
    pub buf: *mut ::std::os::raw::c_void,
    pub obj: *mut PyObject,
    pub len: Py_ssize_t,
    pub itemsize: Py_ssize_t,
    pub readonly: ::std::os::raw::c_int,
    pub ndim: ::std::os::raw::c_int,
    pub format: *mut ::std::os::raw::c_char,
    pub shape: *mut Py_ssize_t,
    pub strides: *mut Py_ssize_t,
    pub suboffsets: *mut Py_ssize_t,
    pub _format: [::std::os::raw::c_uchar; 128usize],
    pub _strides: [Py_ssize_t; 32usize],
    pub _shape: [Py_ssize_t; 32usize],
    pub internal: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_bufferinfo() {
    assert_eq!(
        ::std::mem::size_of::<bufferinfo>(),
        720usize,
        concat!("Size of: ", stringify!(bufferinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<bufferinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(bufferinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>())).obj as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(obj)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>())).len as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>())).itemsize as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(itemsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>())).readonly as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(readonly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>())).ndim as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(ndim)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>())).format as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>())).shape as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(shape)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>())).strides as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(strides)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>())).suboffsets as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(suboffsets)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>()))._format as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(_format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>()))._strides as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(_strides)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>()))._shape as *const _ as usize },
        456usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(_shape)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferinfo>())).internal as *const _ as usize },
        712usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferinfo),
            "::",
            stringify!(internal)
        )
    );
}
pub type Py_buffer = bufferinfo;
pub type getbufferproc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut Py_buffer, arg3: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int,
>;
pub type releasebufferproc =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut Py_buffer)>;
pub type objobjproc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> ::std::os::raw::c_int,
>;
pub type visitproc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int,
>;
pub type traverseproc = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: visitproc, arg3: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyNumberMethods {
    pub nb_add: binaryfunc,
    pub nb_subtract: binaryfunc,
    pub nb_multiply: binaryfunc,
    pub nb_remainder: binaryfunc,
    pub nb_divmod: binaryfunc,
    pub nb_power: ternaryfunc,
    pub nb_negative: unaryfunc,
    pub nb_positive: unaryfunc,
    pub nb_absolute: unaryfunc,
    pub nb_bool: inquiry,
    pub nb_invert: unaryfunc,
    pub nb_lshift: binaryfunc,
    pub nb_rshift: binaryfunc,
    pub nb_and: binaryfunc,
    pub nb_xor: binaryfunc,
    pub nb_or: binaryfunc,
    pub nb_int: unaryfunc,
    pub nb_reserved: *mut ::std::os::raw::c_void,
    pub nb_float: unaryfunc,
    pub nb_inplace_add: binaryfunc,
    pub nb_inplace_subtract: binaryfunc,
    pub nb_inplace_multiply: binaryfunc,
    pub nb_inplace_remainder: binaryfunc,
    pub nb_inplace_power: ternaryfunc,
    pub nb_inplace_lshift: binaryfunc,
    pub nb_inplace_rshift: binaryfunc,
    pub nb_inplace_and: binaryfunc,
    pub nb_inplace_xor: binaryfunc,
    pub nb_inplace_or: binaryfunc,
    pub nb_floor_divide: binaryfunc,
    pub nb_true_divide: binaryfunc,
    pub nb_inplace_floor_divide: binaryfunc,
    pub nb_inplace_true_divide: binaryfunc,
    pub nb_index: unaryfunc,
    pub nb_matrix_multiply: binaryfunc,
    pub nb_inplace_matrix_multiply: binaryfunc,
}
#[test]
fn bindgen_test_layout_PyNumberMethods() {
    assert_eq!(
        ::std::mem::size_of::<PyNumberMethods>(),
        288usize,
        concat!("Size of: ", stringify!(PyNumberMethods))
    );
    assert_eq!(
        ::std::mem::align_of::<PyNumberMethods>(),
        8usize,
        concat!("Alignment of ", stringify!(PyNumberMethods))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_add as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_add)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_subtract as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_subtract)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_multiply as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_multiply)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_remainder as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_remainder)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_divmod as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_divmod)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_power as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_power)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_negative as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_negative)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_positive as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_positive)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_absolute as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_absolute)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_bool as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_bool)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_invert as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_invert)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_lshift as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_lshift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_rshift as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_rshift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_and as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_and)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_xor as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_xor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_or as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_or)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_int as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_int)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_reserved as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_reserved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_float as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_float)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_add as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_add)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_subtract as *const _ as usize
        },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_subtract)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_multiply as *const _ as usize
        },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_multiply)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_remainder as *const _ as usize
        },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_remainder)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_power as *const _ as usize
        },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_power)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_lshift as *const _ as usize
        },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_lshift)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_rshift as *const _ as usize
        },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_rshift)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_and as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_and)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_xor as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_xor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_or as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_or)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_floor_divide as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_floor_divide)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_true_divide as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_true_divide)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_floor_divide as *const _ as usize
        },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_floor_divide)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_true_divide as *const _ as usize
        },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_true_divide)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyNumberMethods>())).nb_index as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_index)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyNumberMethods>())).nb_matrix_multiply as *const _ as usize
        },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_matrix_multiply)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyNumberMethods>())).nb_inplace_matrix_multiply as *const _
                as usize
        },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(PyNumberMethods),
            "::",
            stringify!(nb_inplace_matrix_multiply)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PySequenceMethods {
    pub sq_length: lenfunc,
    pub sq_concat: binaryfunc,
    pub sq_repeat: ssizeargfunc,
    pub sq_item: ssizeargfunc,
    pub was_sq_slice: *mut ::std::os::raw::c_void,
    pub sq_ass_item: ssizeobjargproc,
    pub was_sq_ass_slice: *mut ::std::os::raw::c_void,
    pub sq_contains: objobjproc,
    pub sq_inplace_concat: binaryfunc,
    pub sq_inplace_repeat: ssizeargfunc,
}
#[test]
fn bindgen_test_layout_PySequenceMethods() {
    assert_eq!(
        ::std::mem::size_of::<PySequenceMethods>(),
        80usize,
        concat!("Size of: ", stringify!(PySequenceMethods))
    );
    assert_eq!(
        ::std::mem::align_of::<PySequenceMethods>(),
        8usize,
        concat!("Alignment of ", stringify!(PySequenceMethods))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySequenceMethods>())).sq_length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PySequenceMethods),
            "::",
            stringify!(sq_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySequenceMethods>())).sq_concat as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PySequenceMethods),
            "::",
            stringify!(sq_concat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySequenceMethods>())).sq_repeat as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PySequenceMethods),
            "::",
            stringify!(sq_repeat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySequenceMethods>())).sq_item as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PySequenceMethods),
            "::",
            stringify!(sq_item)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySequenceMethods>())).was_sq_slice as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PySequenceMethods),
            "::",
            stringify!(was_sq_slice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySequenceMethods>())).sq_ass_item as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PySequenceMethods),
            "::",
            stringify!(sq_ass_item)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PySequenceMethods>())).was_sq_ass_slice as *const _ as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PySequenceMethods),
            "::",
            stringify!(was_sq_ass_slice)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySequenceMethods>())).sq_contains as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PySequenceMethods),
            "::",
            stringify!(sq_contains)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PySequenceMethods>())).sq_inplace_concat as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PySequenceMethods),
            "::",
            stringify!(sq_inplace_concat)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PySequenceMethods>())).sq_inplace_repeat as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PySequenceMethods),
            "::",
            stringify!(sq_inplace_repeat)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyMappingMethods {
    pub mp_length: lenfunc,
    pub mp_subscript: binaryfunc,
    pub mp_ass_subscript: objobjargproc,
}
#[test]
fn bindgen_test_layout_PyMappingMethods() {
    assert_eq!(
        ::std::mem::size_of::<PyMappingMethods>(),
        24usize,
        concat!("Size of: ", stringify!(PyMappingMethods))
    );
    assert_eq!(
        ::std::mem::align_of::<PyMappingMethods>(),
        8usize,
        concat!("Alignment of ", stringify!(PyMappingMethods))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMappingMethods>())).mp_length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMappingMethods),
            "::",
            stringify!(mp_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMappingMethods>())).mp_subscript as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMappingMethods),
            "::",
            stringify!(mp_subscript)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyMappingMethods>())).mp_ass_subscript as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMappingMethods),
            "::",
            stringify!(mp_ass_subscript)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyAsyncMethods {
    pub am_await: unaryfunc,
    pub am_aiter: unaryfunc,
    pub am_anext: unaryfunc,
}
#[test]
fn bindgen_test_layout_PyAsyncMethods() {
    assert_eq!(
        ::std::mem::size_of::<PyAsyncMethods>(),
        24usize,
        concat!("Size of: ", stringify!(PyAsyncMethods))
    );
    assert_eq!(
        ::std::mem::align_of::<PyAsyncMethods>(),
        8usize,
        concat!("Alignment of ", stringify!(PyAsyncMethods))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyAsyncMethods>())).am_await as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyAsyncMethods),
            "::",
            stringify!(am_await)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyAsyncMethods>())).am_aiter as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyAsyncMethods),
            "::",
            stringify!(am_aiter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyAsyncMethods>())).am_anext as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyAsyncMethods),
            "::",
            stringify!(am_anext)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyBufferProcs {
    pub bf_getbuffer: getbufferproc,
    pub bf_releasebuffer: releasebufferproc,
}
#[test]
fn bindgen_test_layout_PyBufferProcs() {
    assert_eq!(
        ::std::mem::size_of::<PyBufferProcs>(),
        16usize,
        concat!("Size of: ", stringify!(PyBufferProcs))
    );
    assert_eq!(
        ::std::mem::align_of::<PyBufferProcs>(),
        8usize,
        concat!("Alignment of ", stringify!(PyBufferProcs))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyBufferProcs>())).bf_getbuffer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBufferProcs),
            "::",
            stringify!(bf_getbuffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyBufferProcs>())).bf_releasebuffer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBufferProcs),
            "::",
            stringify!(bf_releasebuffer)
        )
    );
}
pub type getter = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut ::std::os::raw::c_void) -> *mut PyObject,
>;
pub type setter = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyGetSetDef {
    pub name: *mut ::std::os::raw::c_char,
    pub get: getter,
    pub set: setter,
    pub doc: *mut ::std::os::raw::c_char,
    pub closure: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_PyGetSetDef() {
    assert_eq!(
        ::std::mem::size_of::<PyGetSetDef>(),
        40usize,
        concat!("Size of: ", stringify!(PyGetSetDef))
    );
    assert_eq!(
        ::std::mem::align_of::<PyGetSetDef>(),
        8usize,
        concat!("Alignment of ", stringify!(PyGetSetDef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGetSetDef>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGetSetDef),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGetSetDef>())).get as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGetSetDef),
            "::",
            stringify!(get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGetSetDef>())).set as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGetSetDef),
            "::",
            stringify!(set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGetSetDef>())).doc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGetSetDef),
            "::",
            stringify!(doc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGetSetDef>())).closure as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGetSetDef),
            "::",
            stringify!(closure)
        )
    );
}
pub type PyCFunction = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject) -> *mut PyObject,
>;
pub type PyCFunctionWithKeywords = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut PyObject, arg2: *mut PyObject, arg3: *mut PyObject)
        -> *mut PyObject,
>;
pub type PyNoArgsFunction =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject) -> *mut PyObject>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyMethodDef {
    pub ml_name: *const ::std::os::raw::c_char,
    pub ml_meth: PyCFunction,
    pub ml_flags: ::std::os::raw::c_int,
    pub ml_doc: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_PyMethodDef() {
    assert_eq!(
        ::std::mem::size_of::<PyMethodDef>(),
        32usize,
        concat!("Size of: ", stringify!(PyMethodDef))
    );
    assert_eq!(
        ::std::mem::align_of::<PyMethodDef>(),
        8usize,
        concat!("Alignment of ", stringify!(PyMethodDef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMethodDef>())).ml_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMethodDef),
            "::",
            stringify!(ml_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMethodDef>())).ml_meth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMethodDef),
            "::",
            stringify!(ml_meth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMethodDef>())).ml_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMethodDef),
            "::",
            stringify!(ml_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMethodDef>())).ml_doc as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMethodDef),
            "::",
            stringify!(ml_doc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyCFunctionObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub m_ml: *mut PyMethodDef,
    pub m_self: *mut PyObject,
    pub m_module: *mut PyObject,
    pub m_weakreflist: *mut PyObject,
}
#[test]
fn bindgen_test_layout_PyCFunctionObject() {
    assert_eq!(
        ::std::mem::size_of::<PyCFunctionObject>(),
        56usize,
        concat!("Size of: ", stringify!(PyCFunctionObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyCFunctionObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyCFunctionObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCFunctionObject>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCFunctionObject),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCFunctionObject>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCFunctionObject),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCFunctionObject>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCFunctionObject),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCFunctionObject>())).m_ml as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCFunctionObject),
            "::",
            stringify!(m_ml)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCFunctionObject>())).m_self as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCFunctionObject),
            "::",
            stringify!(m_self)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCFunctionObject>())).m_module as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCFunctionObject),
            "::",
            stringify!(m_module)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCFunctionObject>())).m_weakreflist as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCFunctionObject),
            "::",
            stringify!(m_weakreflist)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyMemberDef {
    pub name: *mut ::std::os::raw::c_char,
    pub type_: ::std::os::raw::c_int,
    pub offset: Py_ssize_t,
    pub flags: ::std::os::raw::c_int,
    pub doc: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_PyMemberDef() {
    assert_eq!(
        ::std::mem::size_of::<PyMemberDef>(),
        40usize,
        concat!("Size of: ", stringify!(PyMemberDef))
    );
    assert_eq!(
        ::std::mem::align_of::<PyMemberDef>(),
        8usize,
        concat!("Alignment of ", stringify!(PyMemberDef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemberDef>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemberDef),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemberDef>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemberDef),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemberDef>())).offset as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemberDef),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemberDef>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemberDef),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemberDef>())).doc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemberDef),
            "::",
            stringify!(doc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _typeobject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub ob_size: Py_ssize_t,
    pub tp_name: *const ::std::os::raw::c_char,
    pub tp_basicsize: Py_ssize_t,
    pub tp_itemsize: Py_ssize_t,
    pub tp_dealloc: destructor,
    pub tp_print: printfunc,
    pub tp_getattr: getattrfunc,
    pub tp_setattr: setattrfunc,
    pub tp_as_async: *mut PyAsyncMethods,
    pub tp_repr: reprfunc,
    pub tp_as_number: *mut PyNumberMethods,
    pub tp_as_sequence: *mut PySequenceMethods,
    pub tp_as_mapping: *mut PyMappingMethods,
    pub tp_hash: hashfunc,
    pub tp_call: ternaryfunc,
    pub tp_str: reprfunc,
    pub tp_getattro: getattrofunc,
    pub tp_setattro: setattrofunc,
    pub tp_as_buffer: *mut PyBufferProcs,
    pub tp_flags: ::std::os::raw::c_ulong,
    pub tp_doc: *const ::std::os::raw::c_char,
    pub tp_traverse: traverseproc,
    pub tp_clear: inquiry,
    pub tp_richcompare: richcmpfunc,
    pub tp_weaklistoffset: Py_ssize_t,
    pub tp_iter: getiterfunc,
    pub tp_iternext: iternextfunc,
    pub tp_methods: *mut PyMethodDef,
    pub tp_members: *mut PyMemberDef,
    pub tp_getset: *mut PyGetSetDef,
    pub tp_base: *mut _typeobject,
    pub tp_dict: *mut PyObject,
    pub tp_descr_get: descrgetfunc,
    pub tp_descr_set: descrsetfunc,
    pub tp_dictoffset: Py_ssize_t,
    pub tp_init: initproc,
    pub tp_alloc: allocfunc,
    pub tp_new: newfunc,
    pub tp_free: freefunc,
    pub tp_is_gc: inquiry,
    pub tp_bases: *mut PyObject,
    pub tp_mro: *mut PyObject,
    pub tp_cache: *mut PyObject,
    pub tp_subclasses: *mut PyObject,
    pub tp_weaklist: *mut PyObject,
    pub tp_del: destructor,
    pub tp_version_tag: ::std::os::raw::c_uint,
    pub tp_finalize: destructor,
}
#[test]
fn bindgen_test_layout__typeobject() {
    assert_eq!(
        ::std::mem::size_of::<_typeobject>(),
        408usize,
        concat!("Size of: ", stringify!(_typeobject))
    );
    assert_eq!(
        ::std::mem::align_of::<_typeobject>(),
        8usize,
        concat!("Alignment of ", stringify!(_typeobject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).ob_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(ob_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_name as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_basicsize as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_basicsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_itemsize as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_itemsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_dealloc as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_dealloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_print as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_print)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_getattr as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_getattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_setattr as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_setattr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_as_async as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_as_async)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_repr as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_repr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_as_number as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_as_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_as_sequence as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_as_sequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_as_mapping as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_as_mapping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_hash as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_hash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_call as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_call)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_str as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_getattro as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_getattro)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_setattro as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_setattro)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_as_buffer as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_as_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_flags as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_doc as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_doc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_traverse as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_traverse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_clear as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_richcompare as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_richcompare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_weaklistoffset as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_weaklistoffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_iter as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_iter)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_iternext as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_iternext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_methods as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_methods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_members as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_members)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_getset as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_getset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_base as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_dict as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_dict)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_descr_get as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_descr_get)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_descr_set as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_descr_set)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_dictoffset as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_dictoffset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_init as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_alloc as *const _ as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_alloc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_new as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_new)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_free as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_is_gc as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_is_gc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_bases as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_bases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_mro as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_mro)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_cache as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_cache)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_subclasses as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_subclasses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_weaklist as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_weaklist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_del as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_del)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_version_tag as *const _ as usize },
        392usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_version_tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_typeobject>())).tp_finalize as *const _ as usize },
        400usize,
        concat!(
            "Offset of field: ",
            stringify!(_typeobject),
            "::",
            stringify!(tp_finalize)
        )
    );
}
pub type PyTypeObject = _typeobject;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyType_Slot {
    pub slot: ::std::os::raw::c_int,
    pub pfunc: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_PyType_Slot() {
    assert_eq!(
        ::std::mem::size_of::<PyType_Slot>(),
        16usize,
        concat!("Size of: ", stringify!(PyType_Slot))
    );
    assert_eq!(
        ::std::mem::align_of::<PyType_Slot>(),
        8usize,
        concat!("Alignment of ", stringify!(PyType_Slot))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyType_Slot>())).slot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyType_Slot),
            "::",
            stringify!(slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyType_Slot>())).pfunc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyType_Slot),
            "::",
            stringify!(pfunc)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyType_Spec {
    pub name: *const ::std::os::raw::c_char,
    pub basicsize: ::std::os::raw::c_int,
    pub itemsize: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_uint,
    pub slots: *mut PyType_Slot,
}
#[test]
fn bindgen_test_layout_PyType_Spec() {
    assert_eq!(
        ::std::mem::size_of::<PyType_Spec>(),
        32usize,
        concat!("Size of: ", stringify!(PyType_Spec))
    );
    assert_eq!(
        ::std::mem::align_of::<PyType_Spec>(),
        8usize,
        concat!("Alignment of ", stringify!(PyType_Spec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyType_Spec>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyType_Spec),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyType_Spec>())).basicsize as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyType_Spec),
            "::",
            stringify!(basicsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyType_Spec>())).itemsize as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(PyType_Spec),
            "::",
            stringify!(itemsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyType_Spec>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyType_Spec),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyType_Spec>())).slots as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyType_Spec),
            "::",
            stringify!(slots)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _heaptypeobject {
    pub ht_type: PyTypeObject,
    pub as_async: PyAsyncMethods,
    pub as_number: PyNumberMethods,
    pub as_mapping: PyMappingMethods,
    pub as_sequence: PySequenceMethods,
    pub as_buffer: PyBufferProcs,
    pub ht_name: *mut PyObject,
    pub ht_slots: *mut PyObject,
    pub ht_qualname: *mut PyObject,
}
#[test]
fn bindgen_test_layout__heaptypeobject() {
    assert_eq!(
        ::std::mem::size_of::<_heaptypeobject>(),
        864usize,
        concat!("Size of: ", stringify!(_heaptypeobject))
    );
    assert_eq!(
        ::std::mem::align_of::<_heaptypeobject>(),
        8usize,
        concat!("Alignment of ", stringify!(_heaptypeobject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_heaptypeobject>())).ht_type as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_heaptypeobject),
            "::",
            stringify!(ht_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_heaptypeobject>())).as_async as *const _ as usize },
        408usize,
        concat!(
            "Offset of field: ",
            stringify!(_heaptypeobject),
            "::",
            stringify!(as_async)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_heaptypeobject>())).as_number as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(_heaptypeobject),
            "::",
            stringify!(as_number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_heaptypeobject>())).as_mapping as *const _ as usize },
        720usize,
        concat!(
            "Offset of field: ",
            stringify!(_heaptypeobject),
            "::",
            stringify!(as_mapping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_heaptypeobject>())).as_sequence as *const _ as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(_heaptypeobject),
            "::",
            stringify!(as_sequence)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_heaptypeobject>())).as_buffer as *const _ as usize },
        824usize,
        concat!(
            "Offset of field: ",
            stringify!(_heaptypeobject),
            "::",
            stringify!(as_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_heaptypeobject>())).ht_name as *const _ as usize },
        840usize,
        concat!(
            "Offset of field: ",
            stringify!(_heaptypeobject),
            "::",
            stringify!(ht_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_heaptypeobject>())).ht_slots as *const _ as usize },
        848usize,
        concat!(
            "Offset of field: ",
            stringify!(_heaptypeobject),
            "::",
            stringify!(ht_slots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_heaptypeobject>())).ht_qualname as *const _ as usize },
        856usize,
        concat!(
            "Offset of field: ",
            stringify!(_heaptypeobject),
            "::",
            stringify!(ht_qualname)
        )
    );
}
pub type PyHeapTypeObject = _heaptypeobject;
extern "C" {
    #[link_name = "\u{1}_PyPyType_FromSpec"]
    pub fn PyType_FromSpec(arg1: *mut PyType_Spec) -> *mut PyObject;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _gc_head {
    pub dummy: ::std::os::raw::c_char,
    _bindgen_union_align: u8,
}
#[test]
fn bindgen_test_layout__gc_head() {
    assert_eq!(
        ::std::mem::size_of::<_gc_head>(),
        1usize,
        concat!("Size of: ", stringify!(_gc_head))
    );
    assert_eq!(
        ::std::mem::align_of::<_gc_head>(),
        1usize,
        concat!("Alignment of ", stringify!(_gc_head))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_gc_head>())).dummy as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_gc_head),
            "::",
            stringify!(dummy)
        )
    );
}
pub type PyGC_Head = _gc_head;
extern "C" {
    #[link_name = "\u{1}_PyPyObject_AsReadBuffer"]
    pub fn PyObject_AsReadBuffer(
        arg1: *mut PyObject,
        arg2: *mut *const ::std::os::raw::c_void,
        arg3: *mut Py_ssize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_AsWriteBuffer"]
    pub fn PyObject_AsWriteBuffer(
        arg1: *mut PyObject,
        arg2: *mut *mut ::std::os::raw::c_void,
        arg3: *mut Py_ssize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_CheckReadBuffer"]
    pub fn PyObject_CheckReadBuffer(arg1: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyBuffer_GetPointer"]
    pub fn PyBuffer_GetPointer(
        view: *mut Py_buffer,
        indices: *mut Py_ssize_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_PyPyBuffer_ToContiguous"]
    pub fn PyBuffer_ToContiguous(
        buf: *mut ::std::os::raw::c_void,
        view: *mut Py_buffer,
        len: Py_ssize_t,
        fort: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyBuffer_FromContiguous"]
    pub fn PyBuffer_FromContiguous(
        view: *mut Py_buffer,
        buf: *mut ::std::os::raw::c_void,
        len: Py_ssize_t,
        fort: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_CallFinalizerFromDealloc"]
    pub fn PyObject_CallFinalizerFromDealloc(arg1: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyType_Register"]
    pub fn PyType_Register(arg1: *mut PyTypeObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_GetBuffer"]
    pub fn PyObject_GetBuffer(
        obj: *mut PyObject,
        view: *mut Py_buffer,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyBuffer_Release"]
    pub fn PyBuffer_Release(view: *mut Py_buffer);
}
pub type clock_t = __darwin_clock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_tzname"]
    pub static mut tzname: [*mut ::std::os::raw::c_char; 0usize];
}
extern "C" {
    #[link_name = "\u{1}_getdate_err"]
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_timezone"]
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_daylight"]
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_asctime"]
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_clock"]
    pub fn clock() -> clock_t;
}
extern "C" {
    #[link_name = "\u{1}_ctime"]
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_difftime"]
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_getdate"]
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    #[link_name = "\u{1}_gmtime"]
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    #[link_name = "\u{1}_localtime"]
    pub fn localtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    #[link_name = "\u{1}_mktime"]
    pub fn mktime(arg1: *mut tm) -> time_t;
}
extern "C" {
    #[link_name = "\u{1}_strftime"]
    pub fn strftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
    ) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_strptime"]
    pub fn strptime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_time"]
    pub fn time(arg1: *mut time_t) -> time_t;
}
extern "C" {
    #[link_name = "\u{1}_tzset"]
    pub fn tzset();
}
extern "C" {
    #[link_name = "\u{1}_asctime_r"]
    pub fn asctime_r(
        arg1: *const tm,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ctime_r"]
    pub fn ctime_r(
        arg1: *const time_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_gmtime_r"]
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    #[link_name = "\u{1}_localtime_r"]
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    #[link_name = "\u{1}_posix2time"]
    pub fn posix2time(arg1: time_t) -> time_t;
}
extern "C" {
    #[link_name = "\u{1}_tzsetwall"]
    pub fn tzsetwall();
}
extern "C" {
    #[link_name = "\u{1}_time2posix"]
    pub fn time2posix(arg1: time_t) -> time_t;
}
extern "C" {
    #[link_name = "\u{1}_timelocal"]
    pub fn timelocal(arg1: *const tm) -> time_t;
}
extern "C" {
    #[link_name = "\u{1}_timegm"]
    pub fn timegm(arg1: *const tm) -> time_t;
}
extern "C" {
    #[link_name = "\u{1}_nanosleep"]
    pub fn nanosleep(__rqtp: *const timespec, __rmtp: *mut timespec) -> ::std::os::raw::c_int;
}
pub const clockid_t__CLOCK_REALTIME: clockid_t = 0;
pub const clockid_t__CLOCK_MONOTONIC: clockid_t = 6;
pub const clockid_t__CLOCK_MONOTONIC_RAW: clockid_t = 4;
pub const clockid_t__CLOCK_MONOTONIC_RAW_APPROX: clockid_t = 5;
pub const clockid_t__CLOCK_UPTIME_RAW: clockid_t = 8;
pub const clockid_t__CLOCK_UPTIME_RAW_APPROX: clockid_t = 9;
pub const clockid_t__CLOCK_PROCESS_CPUTIME_ID: clockid_t = 12;
pub const clockid_t__CLOCK_THREAD_CPUTIME_ID: clockid_t = 16;
pub type clockid_t = u32;
extern "C" {
    #[link_name = "\u{1}_clock_getres"]
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_clock_gettime"]
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_clock_gettime_nsec_np"]
    pub fn clock_gettime_nsec_np(__clock_id: clockid_t) -> __uint64_t;
}
extern "C" {
    #[link_name = "\u{1}_clock_settime"]
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
pub type Py_uintptr_t = ::std::os::raw::c_ulong;
pub type Py_intptr_t = ::std::os::raw::c_long;
pub type Py_hash_t = Py_ssize_t;
pub type Py_uhash_t = usize;
pub type __gnuc_va_list = __builtin_va_list;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type nlink_t = __uint16_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ostat {
    pub st_dev: __uint16_t,
    pub st_ino: ino_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_uid: __uint16_t,
    pub st_gid: __uint16_t,
    pub st_rdev: __uint16_t,
    pub st_size: __int32_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_blksize: __int32_t,
    pub st_blocks: __int32_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
}
#[test]
fn bindgen_test_layout_ostat() {
    assert_eq!(
        ::std::mem::size_of::<ostat>(),
        88usize,
        concat!("Size of: ", stringify!(ostat))
    );
    assert_eq!(
        ::std::mem::align_of::<ostat>(),
        8usize,
        concat!("Alignment of ", stringify!(ostat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_ino as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_nlink as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_uid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_gid as *const _ as usize },
        14usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_rdev as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_size as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_atimespec as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_atimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_mtimespec as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_mtimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_ctimespec as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_ctimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_blksize as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_blocks as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_flags as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ostat>())).st_gen as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ostat),
            "::",
            stringify!(st_gen)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat {
    pub st_dev: dev_t,
    pub st_ino: ino_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
#[test]
fn bindgen_test_layout_stat() {
    assert_eq!(
        ::std::mem::size_of::<stat>(),
        120usize,
        concat!("Size of: ", stringify!(stat))
    );
    assert_eq!(
        ::std::mem::align_of::<stat>(),
        8usize,
        concat!("Alignment of ", stringify!(stat))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ino as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_nlink as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_uid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_rdev as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_atimespec as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_atimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_mtimespec as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_mtimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_ctimespec as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_ctimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_size as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blocks as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_blksize as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_flags as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_gen as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_gen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_lspare as *const _ as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_lspare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat>())).st_qspare as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat),
            "::",
            stringify!(st_qspare)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stat64 {
    pub st_dev: dev_t,
    pub st_mode: mode_t,
    pub st_nlink: nlink_t,
    pub st_ino: __darwin_ino64_t,
    pub st_uid: uid_t,
    pub st_gid: gid_t,
    pub st_rdev: dev_t,
    pub st_atimespec: timespec,
    pub st_mtimespec: timespec,
    pub st_ctimespec: timespec,
    pub st_birthtimespec: timespec,
    pub st_size: off_t,
    pub st_blocks: blkcnt_t,
    pub st_blksize: blksize_t,
    pub st_flags: __uint32_t,
    pub st_gen: __uint32_t,
    pub st_lspare: __int32_t,
    pub st_qspare: [__int64_t; 2usize],
}
#[test]
fn bindgen_test_layout_stat64() {
    assert_eq!(
        ::std::mem::size_of::<stat64>(),
        144usize,
        concat!("Size of: ", stringify!(stat64))
    );
    assert_eq!(
        ::std::mem::align_of::<stat64>(),
        8usize,
        concat!("Alignment of ", stringify!(stat64))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_dev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_dev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_mode as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_nlink as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_nlink)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_ino as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_ino)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_uid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_uid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_gid as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_gid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_rdev as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_rdev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_atimespec as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_atimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_mtimespec as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_mtimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_ctimespec as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_ctimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_birthtimespec as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_birthtimespec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_size as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_blocks as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_blocks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_blksize as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_blksize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_flags as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_gen as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_gen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_lspare as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_lspare)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<stat64>())).st_qspare as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(stat64),
            "::",
            stringify!(st_qspare)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_chmod"]
    pub fn chmod(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fchmod"]
    pub fn fchmod(arg1: ::std::os::raw::c_int, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstat"]
    pub fn fstat(arg1: ::std::os::raw::c_int, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lstat"]
    pub fn lstat(arg1: *const ::std::os::raw::c_char, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkdir"]
    pub fn mkdir(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkfifo"]
    pub fn mkfifo(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_stat"]
    pub fn stat(arg1: *const ::std::os::raw::c_char, arg2: *mut stat) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_umask"]
    pub fn umask(arg1: mode_t) -> mode_t;
}
extern "C" {
    #[link_name = "\u{1}_fchmodat"]
    pub fn fchmodat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstatat"]
    pub fn fstatat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut stat,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkdirat"]
    pub fn mkdirat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: mode_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_futimens"]
    pub fn futimens(__fd: ::std::os::raw::c_int, __times: *const timespec)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_utimensat"]
    pub fn utimensat(
        __fd: ::std::os::raw::c_int,
        __path: *const ::std::os::raw::c_char,
        __times: *const timespec,
        __flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _filesec {
    _unused: [u8; 0],
}
pub type filesec_t = *mut _filesec;
extern "C" {
    #[link_name = "\u{1}_chflags"]
    pub fn chflags(arg1: *const ::std::os::raw::c_char, arg2: __uint32_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_chmodx_np"]
    pub fn chmodx_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fchflags"]
    pub fn fchflags(arg1: ::std::os::raw::c_int, arg2: __uint32_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fchmodx_np"]
    pub fn fchmodx_np(arg1: ::std::os::raw::c_int, arg2: filesec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstatx_np"]
    pub fn fstatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lchflags"]
    pub fn lchflags(arg1: *const ::std::os::raw::c_char, arg2: __uint32_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lchmod"]
    pub fn lchmod(arg1: *const ::std::os::raw::c_char, arg2: mode_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lstatx_np"]
    pub fn lstatx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkdirx_np"]
    pub fn mkdirx_np(arg1: *const ::std::os::raw::c_char, arg2: filesec_t)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_mkfifox_np"]
    pub fn mkfifox_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_statx_np"]
    pub fn statx_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_umaskx_np"]
    pub fn umaskx_np(arg1: filesec_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstatx64_np"]
    pub fn fstatx64_np(
        arg1: ::std::os::raw::c_int,
        arg2: *mut stat64,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lstatx64_np"]
    pub fn lstatx64_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat64,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_statx64_np"]
    pub fn statx64_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut stat64,
        arg3: filesec_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fstat64"]
    pub fn fstat64(arg1: ::std::os::raw::c_int, arg2: *mut stat64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_lstat64"]
    pub fn lstat64(arg1: *const ::std::os::raw::c_char, arg2: *mut stat64)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_stat64"]
    pub fn stat64(arg1: *const ::std::os::raw::c_char, arg2: *mut stat64) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_WarnFormat"]
    pub fn PyErr_WarnFormat(
        category: *mut PyObject,
        stack_level: Py_ssize_t,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_memchr"]
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_memcmp"]
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_memcpy"]
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_memmove"]
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_memset"]
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_strcat"]
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strchr"]
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strcmp"]
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strcoll"]
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strcpy"]
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strcspn"]
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strerror"]
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strlen"]
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strncat"]
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strncmp"]
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strncpy"]
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strpbrk"]
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strrchr"]
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strspn"]
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strstr"]
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strtok"]
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strxfrm"]
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strtok_r"]
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strdup"]
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_memccpy"]
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_stpcpy"]
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_stpncpy"]
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strndup"]
    pub fn strndup(__s1: *const ::std::os::raw::c_char, __n: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strnlen"]
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    #[link_name = "\u{1}_strsignal"]
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_memset_s"]
    pub fn memset_s(
        __s: *mut ::std::os::raw::c_void,
        __smax: rsize_t,
        __c: ::std::os::raw::c_int,
        __n: rsize_t,
    ) -> errno_t;
}
extern "C" {
    #[link_name = "\u{1}_memmem"]
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_memset_pattern4"]
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_memset_pattern8"]
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_memset_pattern16"]
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_strcasestr"]
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strnstr"]
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_strlcat"]
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: usize,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strlcpy"]
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: usize,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_strmode"]
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_strsep"]
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_timingsafe_bcmp"]
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_bcmp"]
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_bcopy"]
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    #[link_name = "\u{1}_bzero"]
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: usize);
}
extern "C" {
    #[link_name = "\u{1}_index"]
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_rindex"]
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_ffs"]
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strcasecmp"]
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_strncasecmp"]
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ffsl"]
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_ffsll"]
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_fls"]
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_flsl"]
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_flsll"]
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___assert_rtn"]
    pub fn __assert_rtn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}___eprintf"]
    pub fn __eprintf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
        arg4: *const ::std::os::raw::c_char,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_lconv() {
    assert_eq!(
        ::std::mem::size_of::<lconv>(),
        96usize,
        concat!("Size of: ", stringify!(lconv))
    );
    assert_eq!(
        ::std::mem::align_of::<lconv>(),
        8usize,
        concat!("Alignment of ", stringify!(lconv))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).decimal_point as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(decimal_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).thousands_sep as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(thousands_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).grouping as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(grouping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_curr_symbol as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_curr_symbol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).currency_symbol as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(currency_symbol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).mon_decimal_point as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_decimal_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).mon_thousands_sep as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_thousands_sep)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).mon_grouping as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(mon_grouping)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).positive_sign as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(positive_sign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).negative_sign as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(negative_sign)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_frac_digits as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_frac_digits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).frac_digits as *const _ as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(frac_digits)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).p_cs_precedes as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).p_sep_by_space as *const _ as usize },
        83usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).n_cs_precedes as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).n_sep_by_space as *const _ as usize },
        85usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).p_sign_posn as *const _ as usize },
        86usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(p_sign_posn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).n_sign_posn as *const _ as usize },
        87usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(n_sign_posn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_p_cs_precedes as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_n_cs_precedes as *const _ as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_cs_precedes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_p_sep_by_space as *const _ as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_n_sep_by_space as *const _ as usize },
        91usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_sep_by_space)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_p_sign_posn as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_p_sign_posn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<lconv>())).int_n_sign_posn as *const _ as usize },
        93usize,
        concat!(
            "Offset of field: ",
            stringify!(lconv),
            "::",
            stringify!(int_n_sign_posn)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_localeconv"]
    pub fn localeconv() -> *mut lconv;
}
extern "C" {
    #[link_name = "\u{1}_setlocale"]
    pub fn setlocale(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type wint_t = __darwin_wint_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneEntry {
    pub __min: __darwin_rune_t,
    pub __max: __darwin_rune_t,
    pub __map: __darwin_rune_t,
    pub __types: *mut __uint32_t,
}
#[test]
fn bindgen_test_layout__RuneEntry() {
    assert_eq!(
        ::std::mem::size_of::<_RuneEntry>(),
        24usize,
        concat!("Size of: ", stringify!(_RuneEntry))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneEntry>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneEntry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneEntry>())).__min as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneEntry>())).__max as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneEntry>())).__map as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__map)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneEntry>())).__types as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneEntry),
            "::",
            stringify!(__types)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneRange {
    pub __nranges: ::std::os::raw::c_int,
    pub __ranges: *mut _RuneEntry,
}
#[test]
fn bindgen_test_layout__RuneRange() {
    assert_eq!(
        ::std::mem::size_of::<_RuneRange>(),
        16usize,
        concat!("Size of: ", stringify!(_RuneRange))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneRange>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneRange))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneRange>())).__nranges as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneRange),
            "::",
            stringify!(__nranges)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneRange>())).__ranges as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneRange),
            "::",
            stringify!(__ranges)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneCharClass {
    pub __name: [::std::os::raw::c_char; 14usize],
    pub __mask: __uint32_t,
}
#[test]
fn bindgen_test_layout__RuneCharClass() {
    assert_eq!(
        ::std::mem::size_of::<_RuneCharClass>(),
        20usize,
        concat!("Size of: ", stringify!(_RuneCharClass))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneCharClass>(),
        4usize,
        concat!("Alignment of ", stringify!(_RuneCharClass))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneCharClass>())).__name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneCharClass),
            "::",
            stringify!(__name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneCharClass>())).__mask as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneCharClass),
            "::",
            stringify!(__mask)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _RuneLocale {
    pub __magic: [::std::os::raw::c_char; 8usize],
    pub __encoding: [::std::os::raw::c_char; 32usize],
    pub __sgetrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: __darwin_size_t,
            arg3: *mut *const ::std::os::raw::c_char,
        ) -> __darwin_rune_t,
    >,
    pub __sputrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: __darwin_rune_t,
            arg2: *mut ::std::os::raw::c_char,
            arg3: __darwin_size_t,
            arg4: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub __invalid_rune: __darwin_rune_t,
    pub __runetype: [__uint32_t; 256usize],
    pub __maplower: [__darwin_rune_t; 256usize],
    pub __mapupper: [__darwin_rune_t; 256usize],
    pub __runetype_ext: _RuneRange,
    pub __maplower_ext: _RuneRange,
    pub __mapupper_ext: _RuneRange,
    pub __variable: *mut ::std::os::raw::c_void,
    pub __variable_len: ::std::os::raw::c_int,
    pub __ncharclasses: ::std::os::raw::c_int,
    pub __charclasses: *mut _RuneCharClass,
}
#[test]
fn bindgen_test_layout__RuneLocale() {
    assert_eq!(
        ::std::mem::size_of::<_RuneLocale>(),
        3208usize,
        concat!("Size of: ", stringify!(_RuneLocale))
    );
    assert_eq!(
        ::std::mem::align_of::<_RuneLocale>(),
        8usize,
        concat!("Alignment of ", stringify!(_RuneLocale))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__magic as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__magic)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__encoding as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__encoding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__sgetrune as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__sgetrune)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__sputrune as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__sputrune)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__invalid_rune as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__invalid_rune)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__runetype as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__runetype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__maplower as *const _ as usize },
        1084usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__maplower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__mapupper as *const _ as usize },
        2108usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__mapupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__runetype_ext as *const _ as usize },
        3136usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__runetype_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__maplower_ext as *const _ as usize },
        3152usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__maplower_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__mapupper_ext as *const _ as usize },
        3168usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__mapupper_ext)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__variable as *const _ as usize },
        3184usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__variable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__variable_len as *const _ as usize },
        3192usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__variable_len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__ncharclasses as *const _ as usize },
        3196usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__ncharclasses)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_RuneLocale>())).__charclasses as *const _ as usize },
        3200usize,
        concat!(
            "Offset of field: ",
            stringify!(_RuneLocale),
            "::",
            stringify!(__charclasses)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__DefaultRuneLocale"]
    pub static mut _DefaultRuneLocale: _RuneLocale;
}
extern "C" {
    #[link_name = "\u{1}__CurrentRuneLocale"]
    pub static mut _CurrentRuneLocale: *mut _RuneLocale;
}
extern "C" {
    #[link_name = "\u{1}____runetype"]
    pub fn ___runetype(arg1: __darwin_ct_rune_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}____tolower"]
    pub fn ___tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    #[link_name = "\u{1}____toupper"]
    pub fn ___toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    #[link_name = "\u{1}___maskrune"]
    pub fn __maskrune(
        arg1: __darwin_ct_rune_t,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}___toupper"]
    pub fn __toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    #[link_name = "\u{1}___tolower"]
    pub fn __tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyFloatObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub ob_fval: f64,
}
#[test]
fn bindgen_test_layout_PyFloatObject() {
    assert_eq!(
        ::std::mem::size_of::<PyFloatObject>(),
        32usize,
        concat!("Size of: ", stringify!(PyFloatObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyFloatObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyFloatObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyFloatObject>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFloatObject),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyFloatObject>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFloatObject),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyFloatObject>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFloatObject),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyFloatObject>())).ob_fval as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFloatObject),
            "::",
            stringify!(ob_fval)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Py_complex_t {
    pub real: f64,
    pub imag: f64,
}
#[test]
fn bindgen_test_layout_Py_complex_t() {
    assert_eq!(
        ::std::mem::size_of::<Py_complex_t>(),
        16usize,
        concat!("Size of: ", stringify!(Py_complex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<Py_complex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(Py_complex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Py_complex_t>())).real as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Py_complex_t),
            "::",
            stringify!(real)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Py_complex_t>())).imag as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Py_complex_t),
            "::",
            stringify!(imag)
        )
    );
}
pub type Py_complex = Py_complex_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyComplexObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub cval: Py_complex,
}
#[test]
fn bindgen_test_layout_PyComplexObject() {
    assert_eq!(
        ::std::mem::size_of::<PyComplexObject>(),
        40usize,
        concat!("Size of: ", stringify!(PyComplexObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyComplexObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyComplexObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyComplexObject>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyComplexObject),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyComplexObject>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyComplexObject),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyComplexObject>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyComplexObject),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyComplexObject>())).cval as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyComplexObject),
            "::",
            stringify!(cval)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_PyPyComplex_AsCComplex"]
    pub fn PyComplex_AsCComplex(obj: *mut PyObject) -> Py_complex;
}
extern "C" {
    #[link_name = "\u{1}_PyPyComplex_FromCComplex"]
    pub fn PyComplex_FromCComplex(c: Py_complex) -> *mut PyObject;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyFunctionObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub func_name: *mut PyObject,
}
#[test]
fn bindgen_test_layout_PyFunctionObject() {
    assert_eq!(
        ::std::mem::size_of::<PyFunctionObject>(),
        32usize,
        concat!("Size of: ", stringify!(PyFunctionObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyFunctionObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyFunctionObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyFunctionObject>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFunctionObject),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyFunctionObject>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFunctionObject),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyFunctionObject>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFunctionObject),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyFunctionObject>())).func_name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyFunctionObject),
            "::",
            stringify!(func_name)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_PyPyFunction_Type"]
    pub static mut PyFunction_Type: PyTypeObject;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyCodeObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub co_name: *mut PyObject,
    pub co_filename: *mut PyObject,
    pub co_argcount: ::std::os::raw::c_int,
    pub co_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PyCodeObject() {
    assert_eq!(
        ::std::mem::size_of::<PyCodeObject>(),
        48usize,
        concat!("Size of: ", stringify!(PyCodeObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyCodeObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyCodeObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_name as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_filename as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_filename)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_argcount as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_argcount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCodeObject>())).co_flags as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCodeObject),
            "::",
            stringify!(co_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyModuleDef_Base {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub m_init: ::std::option::Option<unsafe extern "C" fn() -> *mut PyObject>,
    pub m_index: Py_ssize_t,
    pub m_copy: *mut PyObject,
}
#[test]
fn bindgen_test_layout_PyModuleDef_Base() {
    assert_eq!(
        ::std::mem::size_of::<PyModuleDef_Base>(),
        48usize,
        concat!("Size of: ", stringify!(PyModuleDef_Base))
    );
    assert_eq!(
        ::std::mem::align_of::<PyModuleDef_Base>(),
        8usize,
        concat!("Alignment of ", stringify!(PyModuleDef_Base))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef_Base>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef_Base),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef_Base>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef_Base),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef_Base>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef_Base),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef_Base>())).m_init as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef_Base),
            "::",
            stringify!(m_init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef_Base>())).m_index as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef_Base),
            "::",
            stringify!(m_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef_Base>())).m_copy as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef_Base),
            "::",
            stringify!(m_copy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyModuleDef_Slot {
    pub slot: ::std::os::raw::c_int,
    pub value: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_PyModuleDef_Slot() {
    assert_eq!(
        ::std::mem::size_of::<PyModuleDef_Slot>(),
        16usize,
        concat!("Size of: ", stringify!(PyModuleDef_Slot))
    );
    assert_eq!(
        ::std::mem::align_of::<PyModuleDef_Slot>(),
        8usize,
        concat!("Alignment of ", stringify!(PyModuleDef_Slot))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef_Slot>())).slot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef_Slot),
            "::",
            stringify!(slot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef_Slot>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef_Slot),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyModuleDef {
    pub m_base: PyModuleDef_Base,
    pub m_name: *const ::std::os::raw::c_char,
    pub m_doc: *const ::std::os::raw::c_char,
    pub m_size: Py_ssize_t,
    pub m_methods: *mut PyMethodDef,
    pub m_slots: *mut PyModuleDef_Slot,
    pub m_traverse: traverseproc,
    pub m_clear: inquiry,
    pub m_free: freefunc,
}
#[test]
fn bindgen_test_layout_PyModuleDef() {
    assert_eq!(
        ::std::mem::size_of::<PyModuleDef>(),
        112usize,
        concat!("Size of: ", stringify!(PyModuleDef))
    );
    assert_eq!(
        ::std::mem::align_of::<PyModuleDef>(),
        8usize,
        concat!("Alignment of ", stringify!(PyModuleDef))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef>())).m_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef),
            "::",
            stringify!(m_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef>())).m_name as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef),
            "::",
            stringify!(m_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef>())).m_doc as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef),
            "::",
            stringify!(m_doc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef>())).m_size as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef),
            "::",
            stringify!(m_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef>())).m_methods as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef),
            "::",
            stringify!(m_methods)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef>())).m_slots as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef),
            "::",
            stringify!(m_slots)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef>())).m_traverse as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef),
            "::",
            stringify!(m_traverse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef>())).m_clear as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef),
            "::",
            stringify!(m_clear)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleDef>())).m_free as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleDef),
            "::",
            stringify!(m_free)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyModuleObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub md_def: *mut PyModuleDef,
    pub md_state: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_PyModuleObject() {
    assert_eq!(
        ::std::mem::size_of::<PyModuleObject>(),
        40usize,
        concat!("Size of: ", stringify!(PyModuleObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyModuleObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyModuleObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleObject>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleObject),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleObject>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleObject),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleObject>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleObject),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleObject>())).md_def as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleObject),
            "::",
            stringify!(md_def)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyModuleObject>())).md_state as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyModuleObject),
            "::",
            stringify!(md_state)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_PyPyModuleDef_Init"]
    pub fn PyModuleDef_Init(arg1: *mut PyModuleDef) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyArg_Parse"]
    pub fn PyArg_Parse(
        arg1: *mut PyObject,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyArg_ParseTuple"]
    pub fn PyArg_ParseTuple(
        arg1: *mut PyObject,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyArg_VaParse"]
    pub fn PyArg_VaParse(
        arg1: *mut PyObject,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyArg_ParseTupleAndKeywords"]
    pub fn PyArg_ParseTupleAndKeywords(
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyArg_VaParseTupleAndKeywords"]
    pub fn PyArg_VaParseTupleAndKeywords(
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut *mut ::std::os::raw::c_char,
        arg5: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__PyPyArg_Parse_SizeT"]
    pub fn _PyArg_Parse_SizeT(
        arg1: *mut PyObject,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__PyPyArg_ParseTuple_SizeT"]
    pub fn _PyArg_ParseTuple_SizeT(
        arg1: *mut PyObject,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__PyPyArg_VaParse_SizeT"]
    pub fn _PyArg_VaParse_SizeT(
        arg1: *mut PyObject,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__PyPyArg_ParseTupleAndKeywords_SizeT"]
    pub fn _PyArg_ParseTupleAndKeywords_SizeT(
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut *mut ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__PyPyArg_VaParseTupleAndKeywords_SizeT"]
    pub fn _PyArg_VaParseTupleAndKeywords_SizeT(
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut *mut ::std::os::raw::c_char,
        arg5: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyModule_Create2"]
    pub fn PyModule_Create2(arg1: *mut PyModuleDef, apiver: ::std::os::raw::c_int)
        -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyModule_AddObject"]
    pub fn PyModule_AddObject(
        m: *mut PyObject,
        name: *const ::std::os::raw::c_char,
        o: *mut PyObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyModule_AddIntConstant"]
    pub fn PyModule_AddIntConstant(
        m: *mut PyObject,
        name: *const ::std::os::raw::c_char,
        value: ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyModule_AddStringConstant"]
    pub fn PyModule_AddStringConstant(
        m: *mut PyObject,
        name: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyModule_GetDef"]
    pub fn PyModule_GetDef(arg1: *mut PyObject) -> *mut PyModuleDef;
}
extern "C" {
    #[link_name = "\u{1}_PyPyModule_GetState"]
    pub fn PyModule_GetState(arg1: *mut PyObject) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_BuildValue"]
    pub fn Py_BuildValue(arg1: *const ::std::os::raw::c_char, ...) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_VaBuildValue"]
    pub fn Py_VaBuildValue(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPy_BuildValue_SizeT"]
    pub fn _Py_BuildValue_SizeT(arg1: *const ::std::os::raw::c_char, ...) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPy_VaBuildValue_SizeT"]
    pub fn _Py_VaBuildValue_SizeT(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPyArg_NoKeywords"]
    pub fn _PyArg_NoKeywords(
        funcname: *const ::std::os::raw::c_char,
        kw: *mut PyObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyArg_UnpackTuple"]
    pub fn PyArg_UnpackTuple(
        args: *mut PyObject,
        name: *const ::std::os::raw::c_char,
        min: Py_ssize_t,
        max: Py_ssize_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__PyPy_PackageContext"]
    pub static mut _Py_PackageContext: *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_FatalError"]
    pub fn Py_FatalError(msg: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_PyPy_DebugFlag"]
    pub static mut Py_DebugFlag: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_VerboseFlag"]
    pub static mut Py_VerboseFlag: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Py_QuietFlag"]
    pub static mut Py_QuietFlag: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_InteractiveFlag"]
    pub static mut Py_InteractiveFlag: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_InspectFlag"]
    pub static mut Py_InspectFlag: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_OptimizeFlag"]
    pub static mut Py_OptimizeFlag: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_NoSiteFlag"]
    pub static mut Py_NoSiteFlag: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_BytesWarningFlag"]
    pub static mut Py_BytesWarningFlag: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_UseClassExceptionsFlag"]
    pub static mut Py_UseClassExceptionsFlag: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_FrozenFlag"]
    pub static mut Py_FrozenFlag: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_IgnoreEnvironmentFlag"]
    pub static mut Py_IgnoreEnvironmentFlag: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_DivisionWarningFlag"]
    pub static mut Py_DivisionWarningFlag: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_DontWriteBytecodeFlag"]
    pub static mut Py_DontWriteBytecodeFlag: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_NoUserSiteDirectory"]
    pub static mut Py_NoUserSiteDirectory: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_Py_UnbufferedStdioFlag"]
    pub static mut Py_UnbufferedStdioFlag: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_HashRandomizationFlag"]
    pub static mut Py_HashRandomizationFlag: ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyCompilerFlags {
    pub cf_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_PyCompilerFlags() {
    assert_eq!(
        ::std::mem::size_of::<PyCompilerFlags>(),
        4usize,
        concat!("Size of: ", stringify!(PyCompilerFlags))
    );
    assert_eq!(
        ::std::mem::align_of::<PyCompilerFlags>(),
        4usize,
        concat!("Alignment of ", stringify!(PyCompilerFlags))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCompilerFlags>())).cf_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCompilerFlags),
            "::",
            stringify!(cf_flags)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_NewException"]
    pub fn PyErr_NewException(
        name: *const ::std::os::raw::c_char,
        base: *mut PyObject,
        dict: *mut PyObject,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_NewExceptionWithDoc"]
    pub fn PyErr_NewExceptionWithDoc(
        name: *const ::std::os::raw::c_char,
        doc: *const ::std::os::raw::c_char,
        base: *mut PyObject,
        dict: *mut PyObject,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_Format"]
    pub fn PyErr_Format(
        exception: *mut PyObject,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyOS_snprintf"]
    pub fn PyOS_snprintf(
        str: *mut ::std::os::raw::c_char,
        size: usize,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyOS_vsnprintf"]
    pub fn PyOS_vsnprintf(
        str: *mut ::std::os::raw::c_char,
        size: usize,
        format: *const ::std::os::raw::c_char,
        va: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyStopIterationObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub value: *mut PyObject,
}
#[test]
fn bindgen_test_layout_PyStopIterationObject() {
    assert_eq!(
        ::std::mem::size_of::<PyStopIterationObject>(),
        32usize,
        concat!("Size of: ", stringify!(PyStopIterationObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyStopIterationObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyStopIterationObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStopIterationObject>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStopIterationObject),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyStopIterationObject>())).ob_pypy_link as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStopIterationObject),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStopIterationObject>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStopIterationObject),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyStopIterationObject>())).value as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyStopIterationObject),
            "::",
            stringify!(value)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_PyPySys_WriteStdout"]
    pub fn PySys_WriteStdout(format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}_PyPySys_WriteStderr"]
    pub fn PySys_WriteStderr(format: *const ::std::os::raw::c_char, ...);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyByteArrayObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub ob_size: Py_ssize_t,
}
#[test]
fn bindgen_test_layout_PyByteArrayObject() {
    assert_eq!(
        ::std::mem::size_of::<PyByteArrayObject>(),
        32usize,
        concat!("Size of: ", stringify!(PyByteArrayObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyByteArrayObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyByteArrayObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyByteArrayObject>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyByteArrayObject),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyByteArrayObject>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyByteArrayObject),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyByteArrayObject>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyByteArrayObject),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyByteArrayObject>())).ob_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyByteArrayObject),
            "::",
            stringify!(ob_size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyDescrObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub d_type: *mut PyTypeObject,
    pub d_name: *mut PyObject,
    pub d_qualname: *mut PyObject,
}
#[test]
fn bindgen_test_layout_PyDescrObject() {
    assert_eq!(
        ::std::mem::size_of::<PyDescrObject>(),
        48usize,
        concat!("Size of: ", stringify!(PyDescrObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyDescrObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyDescrObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDescrObject>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDescrObject),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDescrObject>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDescrObject),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDescrObject>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDescrObject),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDescrObject>())).d_type as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDescrObject),
            "::",
            stringify!(d_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDescrObject>())).d_name as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDescrObject),
            "::",
            stringify!(d_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDescrObject>())).d_qualname as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDescrObject),
            "::",
            stringify!(d_qualname)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyMethodDescrObject {
    pub d_common: PyDescrObject,
    pub d_method: *mut PyMethodDef,
}
#[test]
fn bindgen_test_layout_PyMethodDescrObject() {
    assert_eq!(
        ::std::mem::size_of::<PyMethodDescrObject>(),
        56usize,
        concat!("Size of: ", stringify!(PyMethodDescrObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyMethodDescrObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyMethodDescrObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMethodDescrObject>())).d_common as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMethodDescrObject),
            "::",
            stringify!(d_common)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMethodDescrObject>())).d_method as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMethodDescrObject),
            "::",
            stringify!(d_method)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyMemberDescrObject {
    pub d_common: PyDescrObject,
    pub d_member: *mut PyMemberDef,
}
#[test]
fn bindgen_test_layout_PyMemberDescrObject() {
    assert_eq!(
        ::std::mem::size_of::<PyMemberDescrObject>(),
        56usize,
        concat!("Size of: ", stringify!(PyMemberDescrObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyMemberDescrObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyMemberDescrObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemberDescrObject>())).d_common as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemberDescrObject),
            "::",
            stringify!(d_common)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemberDescrObject>())).d_member as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemberDescrObject),
            "::",
            stringify!(d_member)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyGetSetDescrObject {
    pub d_common: PyDescrObject,
    pub d_getset: *mut PyGetSetDef,
}
#[test]
fn bindgen_test_layout_PyGetSetDescrObject() {
    assert_eq!(
        ::std::mem::size_of::<PyGetSetDescrObject>(),
        56usize,
        concat!("Size of: ", stringify!(PyGetSetDescrObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyGetSetDescrObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyGetSetDescrObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGetSetDescrObject>())).d_common as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGetSetDescrObject),
            "::",
            stringify!(d_common)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGetSetDescrObject>())).d_getset as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGetSetDescrObject),
            "::",
            stringify!(d_getset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyWrapperDescrObject {
    pub d_common: PyDescrObject,
    pub d_base: *mut wrapperbase,
    pub d_wrapped: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_PyWrapperDescrObject() {
    assert_eq!(
        ::std::mem::size_of::<PyWrapperDescrObject>(),
        64usize,
        concat!("Size of: ", stringify!(PyWrapperDescrObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyWrapperDescrObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyWrapperDescrObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyWrapperDescrObject>())).d_common as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyWrapperDescrObject),
            "::",
            stringify!(d_common)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyWrapperDescrObject>())).d_base as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyWrapperDescrObject),
            "::",
            stringify!(d_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyWrapperDescrObject>())).d_wrapped as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PyWrapperDescrObject),
            "::",
            stringify!(d_wrapped)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyTupleObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub ob_size: Py_ssize_t,
    pub ob_item: [*mut PyObject; 1usize],
}
#[test]
fn bindgen_test_layout_PyTupleObject() {
    assert_eq!(
        ::std::mem::size_of::<PyTupleObject>(),
        40usize,
        concat!("Size of: ", stringify!(PyTupleObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyTupleObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyTupleObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyTupleObject>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyTupleObject),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyTupleObject>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyTupleObject),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyTupleObject>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyTupleObject),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyTupleObject>())).ob_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyTupleObject),
            "::",
            stringify!(ob_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyTupleObject>())).ob_item as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyTupleObject),
            "::",
            stringify!(ob_item)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_PyPyTuple_Pack"]
    pub fn PyTuple_Pack(arg1: Py_ssize_t, ...) -> *mut PyObject;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyDictObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub _tmpkeys: *mut PyObject,
}
#[test]
fn bindgen_test_layout_PyDictObject() {
    assert_eq!(
        ::std::mem::size_of::<PyDictObject>(),
        32usize,
        concat!("Size of: ", stringify!(PyDictObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyDictObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyDictObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDictObject>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDictObject),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDictObject>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDictObject),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDictObject>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDictObject),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDictObject>()))._tmpkeys as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDictObject),
            "::",
            stringify!(_tmpkeys)
        )
    );
}
pub type Py_UNICODE = wchar_t;
pub type Py_UCS4 = ::std::os::raw::c_uint;
pub type Py_UCS2 = ::std::os::raw::c_ushort;
pub type Py_UCS1 = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PyASCIIObject_state_t {
    pub interned: ::std::os::raw::c_uint,
    pub kind: ::std::os::raw::c_uint,
    pub compact: ::std::os::raw::c_uint,
    pub ascii: ::std::os::raw::c_uint,
    pub ready: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout__PyASCIIObject_state_t() {
    assert_eq!(
        ::std::mem::size_of::<_PyASCIIObject_state_t>(),
        20usize,
        concat!("Size of: ", stringify!(_PyASCIIObject_state_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_PyASCIIObject_state_t>(),
        4usize,
        concat!("Alignment of ", stringify!(_PyASCIIObject_state_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyASCIIObject_state_t>())).interned as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyASCIIObject_state_t),
            "::",
            stringify!(interned)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyASCIIObject_state_t>())).kind as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyASCIIObject_state_t),
            "::",
            stringify!(kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyASCIIObject_state_t>())).compact as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyASCIIObject_state_t),
            "::",
            stringify!(compact)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyASCIIObject_state_t>())).ascii as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyASCIIObject_state_t),
            "::",
            stringify!(ascii)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_PyASCIIObject_state_t>())).ready as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_PyASCIIObject_state_t),
            "::",
            stringify!(ready)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyASCIIObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub length: Py_ssize_t,
    pub state: _PyASCIIObject_state_t,
    pub wstr: *mut wchar_t,
}
#[test]
fn bindgen_test_layout_PyASCIIObject() {
    assert_eq!(
        ::std::mem::size_of::<PyASCIIObject>(),
        64usize,
        concat!("Size of: ", stringify!(PyASCIIObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyASCIIObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyASCIIObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyASCIIObject>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyASCIIObject),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyASCIIObject>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyASCIIObject),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyASCIIObject>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyASCIIObject),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyASCIIObject>())).length as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyASCIIObject),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyASCIIObject>())).state as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyASCIIObject),
            "::",
            stringify!(state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyASCIIObject>())).wstr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PyASCIIObject),
            "::",
            stringify!(wstr)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyCompactUnicodeObject {
    pub _base: PyASCIIObject,
    pub utf8_length: Py_ssize_t,
    pub utf8: *mut ::std::os::raw::c_char,
    pub wstr_length: Py_ssize_t,
}
#[test]
fn bindgen_test_layout_PyCompactUnicodeObject() {
    assert_eq!(
        ::std::mem::size_of::<PyCompactUnicodeObject>(),
        88usize,
        concat!("Size of: ", stringify!(PyCompactUnicodeObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyCompactUnicodeObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyCompactUnicodeObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCompactUnicodeObject>()))._base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCompactUnicodeObject),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyCompactUnicodeObject>())).utf8_length as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCompactUnicodeObject),
            "::",
            stringify!(utf8_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCompactUnicodeObject>())).utf8 as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCompactUnicodeObject),
            "::",
            stringify!(utf8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyCompactUnicodeObject>())).wstr_length as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCompactUnicodeObject),
            "::",
            stringify!(wstr_length)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyUnicodeObject {
    pub _base: PyCompactUnicodeObject,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_PyUnicodeObject() {
    assert_eq!(
        ::std::mem::size_of::<PyUnicodeObject>(),
        96usize,
        concat!("Size of: ", stringify!(PyUnicodeObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyUnicodeObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyUnicodeObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyUnicodeObject>()))._base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyUnicodeObject),
            "::",
            stringify!(_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyUnicodeObject>())).data as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(PyUnicodeObject),
            "::",
            stringify!(data)
        )
    );
}
pub const PyUnicode_Kind_PyUnicode_WCHAR_KIND: PyUnicode_Kind = 0;
pub const PyUnicode_Kind_PyUnicode_1BYTE_KIND: PyUnicode_Kind = 1;
pub const PyUnicode_Kind_PyUnicode_2BYTE_KIND: PyUnicode_Kind = 2;
pub const PyUnicode_Kind_PyUnicode_4BYTE_KIND: PyUnicode_Kind = 4;
pub type PyUnicode_Kind = u32;
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_GetLength"]
    pub fn PyUnicode_GetLength(unicode: *mut PyObject) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_GetSize"]
    pub fn PyUnicode_GetSize(unicode: *mut PyObject) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_FromFormatV"]
    pub fn PyUnicode_FromFormatV(
        format: *const ::std::os::raw::c_char,
        vargs: *mut __va_list_tag,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_FromFormat"]
    pub fn PyUnicode_FromFormat(format: *const ::std::os::raw::c_char, ...) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_AsWideCharString"]
    pub fn PyUnicode_AsWideCharString(
        unicode: *mut PyObject,
        size: *mut Py_ssize_t,
    ) -> *mut wchar_t;
}
extern "C" {
    #[link_name = "\u{1}_PyUnicode_AsUTF8AndSize"]
    pub fn PyUnicode_AsUTF8AndSize(
        unicode: *mut PyObject,
        size: *mut Py_ssize_t,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _frame {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub f_code: *mut PyCodeObject,
    pub f_globals: *mut PyObject,
    pub f_locals: *mut PyObject,
    pub f_lineno: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__frame() {
    assert_eq!(
        ::std::mem::size_of::<_frame>(),
        56usize,
        concat!("Size of: ", stringify!(_frame))
    );
    assert_eq!(
        ::std::mem::align_of::<_frame>(),
        8usize,
        concat!("Alignment of ", stringify!(_frame))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_frame>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_frame),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_frame>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_frame),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_frame>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_frame),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_frame>())).f_code as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_frame),
            "::",
            stringify!(f_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_frame>())).f_globals as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_frame),
            "::",
            stringify!(f_globals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_frame>())).f_locals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_frame),
            "::",
            stringify!(f_locals)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_frame>())).f_lineno as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_frame),
            "::",
            stringify!(f_lineno)
        )
    );
}
pub type PyFrameObject = _frame;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PyMemoryViewObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub view: Py_buffer,
}
#[test]
fn bindgen_test_layout_PyMemoryViewObject() {
    assert_eq!(
        ::std::mem::size_of::<PyMemoryViewObject>(),
        744usize,
        concat!("Size of: ", stringify!(PyMemoryViewObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyMemoryViewObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyMemoryViewObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemoryViewObject>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemoryViewObject),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemoryViewObject>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemoryViewObject),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemoryViewObject>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemoryViewObject),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMemoryViewObject>())).view as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMemoryViewObject),
            "::",
            stringify!(view)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_PyPyEval_CallFunction"]
    pub fn PyEval_CallFunction(
        obj: *mut PyObject,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyEval_CallMethod"]
    pub fn PyEval_CallMethod(
        obj: *mut PyObject,
        name: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_CallFunction"]
    pub fn PyObject_CallFunction(
        obj: *mut PyObject,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_CallMethod"]
    pub fn PyObject_CallMethod(
        obj: *mut PyObject,
        name: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPyObject_CallFunction_SizeT"]
    pub fn _PyObject_CallFunction_SizeT(
        obj: *mut PyObject,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPyObject_CallMethod_SizeT"]
    pub fn _PyObject_CallMethod_SizeT(
        obj: *mut PyObject,
        name: *const ::std::os::raw::c_char,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_CallFunctionObjArgs"]
    pub fn PyObject_CallFunctionObjArgs(callable: *mut PyObject, ...) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_CallMethodObjArgs"]
    pub fn PyObject_CallMethodObjArgs(
        callable: *mut PyObject,
        name: *mut PyObject,
        ...
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMem_RawMalloc"]
    pub fn PyMem_RawMalloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMem_RawCalloc"]
    pub fn PyMem_RawCalloc(nelem: usize, elsize: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMem_RawRealloc"]
    pub fn PyMem_RawRealloc(
        ptr: *mut ::std::os::raw::c_void,
        new_size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMem_RawFree"]
    pub fn PyMem_RawFree(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_PyPyMem_Malloc"]
    pub fn PyMem_Malloc(size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMem_Calloc"]
    pub fn PyMem_Calloc(nelem: usize, elsize: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMem_Realloc"]
    pub fn PyMem_Realloc(
        ptr: *mut ::std::os::raw::c_void,
        new_size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMem_Free"]
    pub fn PyMem_Free(ptr: *mut ::std::os::raw::c_void);
}
pub type _PyTraceMalloc_domain_t = ::std::os::raw::c_uint;
extern "C" {
    #[link_name = "\u{1}__PyPyTraceMalloc_Track"]
    pub fn _PyTraceMalloc_Track(
        domain: _PyTraceMalloc_domain_t,
        ptr: usize,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__PyPyTraceMalloc_Untrack"]
    pub fn _PyTraceMalloc_Untrack(
        domain: _PyTraceMalloc_domain_t,
        ptr: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCObject_Type"]
    pub static mut PyCObject_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCObject_FromVoidPtr"]
    pub fn PyCObject_FromVoidPtr(
        cobj: *mut ::std::os::raw::c_void,
        destruct: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCObject_FromVoidPtrAndDesc"]
    pub fn PyCObject_FromVoidPtrAndDesc(
        cobj: *mut ::std::os::raw::c_void,
        desc: *mut ::std::os::raw::c_void,
        destruct: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_void,
            ),
        >,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCObject_AsVoidPtr"]
    pub fn PyCObject_AsVoidPtr(arg1: *mut PyObject) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCObject_GetDesc"]
    pub fn PyCObject_GetDesc(arg1: *mut PyObject) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCObject_Import"]
    pub fn PyCObject_Import(
        module_name: *const ::std::os::raw::c_char,
        cobject_name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCObject_SetVoidPtr"]
    pub fn PyCObject_SetVoidPtr(
        self_: *mut PyObject,
        cobj: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyCObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub cobject: *mut ::std::os::raw::c_void,
    pub desc: *mut ::std::os::raw::c_void,
    pub destructor: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_PyCObject() {
    assert_eq!(
        ::std::mem::size_of::<PyCObject>(),
        48usize,
        concat!("Size of: ", stringify!(PyCObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyCObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyCObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCObject>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCObject),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCObject>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCObject),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCObject>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCObject),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCObject>())).cobject as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCObject),
            "::",
            stringify!(cobject)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCObject>())).desc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCObject),
            "::",
            stringify!(desc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyCObject>())).destructor as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyCObject),
            "::",
            stringify!(destructor)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}__PyPy_get_cobject_type"]
    pub fn _Py_get_cobject_type() -> *mut PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCapsule_Type"]
    pub static mut PyCapsule_Type: PyTypeObject;
}
pub type PyCapsule_Destructor = ::std::option::Option<unsafe extern "C" fn(arg1: *mut PyObject)>;
extern "C" {
    #[link_name = "\u{1}_PyPyCapsule_New"]
    pub fn PyCapsule_New(
        pointer: *mut ::std::os::raw::c_void,
        name: *const ::std::os::raw::c_char,
        destructor: PyCapsule_Destructor,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCapsule_GetPointer"]
    pub fn PyCapsule_GetPointer(
        capsule: *mut PyObject,
        name: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCapsule_GetDestructor"]
    pub fn PyCapsule_GetDestructor(capsule: *mut PyObject) -> PyCapsule_Destructor;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCapsule_GetName"]
    pub fn PyCapsule_GetName(capsule: *mut PyObject) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCapsule_GetContext"]
    pub fn PyCapsule_GetContext(capsule: *mut PyObject) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCapsule_IsValid"]
    pub fn PyCapsule_IsValid(
        capsule: *mut PyObject,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCapsule_SetPointer"]
    pub fn PyCapsule_SetPointer(
        capsule: *mut PyObject,
        pointer: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCapsule_SetDestructor"]
    pub fn PyCapsule_SetDestructor(
        capsule: *mut PyObject,
        destructor: PyCapsule_Destructor,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCapsule_SetName"]
    pub fn PyCapsule_SetName(
        capsule: *mut PyObject,
        name: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCapsule_SetContext"]
    pub fn PyCapsule_SetContext(
        capsule: *mut PyObject,
        context: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCapsule_Import"]
    pub fn PyCapsule_Import(
        name: *const ::std::os::raw::c_char,
        no_block: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}__PyPy_get_capsule_type"]
    pub fn _Py_get_capsule_type() -> *mut PyTypeObject;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyBytesObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub ob_size: Py_ssize_t,
    pub ob_shash: ::std::os::raw::c_long,
    pub ob_sstate: ::std::os::raw::c_int,
    pub ob_sval: [::std::os::raw::c_char; 1usize],
}
#[test]
fn bindgen_test_layout_PyBytesObject() {
    assert_eq!(
        ::std::mem::size_of::<PyBytesObject>(),
        48usize,
        concat!("Size of: ", stringify!(PyBytesObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyBytesObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyBytesObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyBytesObject>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBytesObject),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyBytesObject>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBytesObject),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyBytesObject>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBytesObject),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyBytesObject>())).ob_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBytesObject),
            "::",
            stringify!(ob_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyBytesObject>())).ob_shash as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBytesObject),
            "::",
            stringify!(ob_shash)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyBytesObject>())).ob_sstate as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBytesObject),
            "::",
            stringify!(ob_sstate)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyBytesObject>())).ob_sval as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBytesObject),
            "::",
            stringify!(ob_sval)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_PyPyBytes_FromFormatV"]
    pub fn PyBytes_FromFormatV(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut __va_list_tag,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyBytes_FromFormat"]
    pub fn PyBytes_FromFormat(arg1: *const ::std::os::raw::c_char, ...) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}__Py_EllipsisObject"]
    pub static mut _Py_EllipsisObject: PyObject;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PySliceObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub start: *mut PyObject,
    pub stop: *mut PyObject,
    pub step: *mut PyObject,
}
#[test]
fn bindgen_test_layout_PySliceObject() {
    assert_eq!(
        ::std::mem::size_of::<PySliceObject>(),
        48usize,
        concat!("Size of: ", stringify!(PySliceObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PySliceObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PySliceObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySliceObject>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PySliceObject),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySliceObject>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PySliceObject),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySliceObject>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PySliceObject),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySliceObject>())).start as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PySliceObject),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySliceObject>())).stop as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PySliceObject),
            "::",
            stringify!(stop)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PySliceObject>())).step as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PySliceObject),
            "::",
            stringify!(step)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyGenObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub gi_code: *mut PyObject,
}
#[test]
fn bindgen_test_layout_PyGenObject() {
    assert_eq!(
        ::std::mem::size_of::<PyGenObject>(),
        32usize,
        concat!("Size of: ", stringify!(PyGenObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyGenObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyGenObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGenObject>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGenObject),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGenObject>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGenObject),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGenObject>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGenObject),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyGenObject>())).gi_code as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyGenObject),
            "::",
            stringify!(gi_code)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyDateTime_CAPI {
    pub DateType: *mut PyTypeObject,
    pub DateTimeType: *mut PyTypeObject,
    pub TimeType: *mut PyTypeObject,
    pub DeltaType: *mut PyTypeObject,
    pub TZInfoType: *mut PyTypeObject,
    pub Date_FromDate: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut PyTypeObject,
        ) -> *mut PyObject,
    >,
    pub DateTime_FromDateAndTime: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
            arg5: ::std::os::raw::c_int,
            arg6: ::std::os::raw::c_int,
            arg7: ::std::os::raw::c_int,
            arg8: *mut PyObject,
            arg9: *mut PyTypeObject,
        ) -> *mut PyObject,
    >,
    pub Time_FromTime: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
            arg5: *mut PyObject,
            arg6: *mut PyTypeObject,
        ) -> *mut PyObject,
    >,
    pub Delta_FromDelta: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: ::std::os::raw::c_int,
            arg5: *mut PyTypeObject,
        ) -> *mut PyObject,
    >,
}
#[test]
fn bindgen_test_layout_PyDateTime_CAPI() {
    assert_eq!(
        ::std::mem::size_of::<PyDateTime_CAPI>(),
        72usize,
        concat!("Size of: ", stringify!(PyDateTime_CAPI))
    );
    assert_eq!(
        ::std::mem::align_of::<PyDateTime_CAPI>(),
        8usize,
        concat!("Alignment of ", stringify!(PyDateTime_CAPI))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDateTime_CAPI>())).DateType as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_CAPI),
            "::",
            stringify!(DateType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDateTime_CAPI>())).DateTimeType as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_CAPI),
            "::",
            stringify!(DateTimeType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDateTime_CAPI>())).TimeType as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_CAPI),
            "::",
            stringify!(TimeType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDateTime_CAPI>())).DeltaType as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_CAPI),
            "::",
            stringify!(DeltaType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDateTime_CAPI>())).TZInfoType as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_CAPI),
            "::",
            stringify!(TZInfoType)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDateTime_CAPI>())).Date_FromDate as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_CAPI),
            "::",
            stringify!(Date_FromDate)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyDateTime_CAPI>())).DateTime_FromDateAndTime as *const _
                as usize
        },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_CAPI),
            "::",
            stringify!(DateTime_FromDateAndTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDateTime_CAPI>())).Time_FromTime as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_CAPI),
            "::",
            stringify!(Time_FromTime)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDateTime_CAPI>())).Delta_FromDelta as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_CAPI),
            "::",
            stringify!(Delta_FromDelta)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_PyDateTimeAPI"]
    pub static mut PyDateTimeAPI: *mut PyDateTime_CAPI;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyDateTime_Delta {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
}
#[test]
fn bindgen_test_layout_PyDateTime_Delta() {
    assert_eq!(
        ::std::mem::size_of::<PyDateTime_Delta>(),
        24usize,
        concat!("Size of: ", stringify!(PyDateTime_Delta))
    );
    assert_eq!(
        ::std::mem::align_of::<PyDateTime_Delta>(),
        8usize,
        concat!("Alignment of ", stringify!(PyDateTime_Delta))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDateTime_Delta>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_Delta),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDateTime_Delta>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_Delta),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDateTime_Delta>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_Delta),
            "::",
            stringify!(ob_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyDateTime_Date {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
}
#[test]
fn bindgen_test_layout_PyDateTime_Date() {
    assert_eq!(
        ::std::mem::size_of::<PyDateTime_Date>(),
        24usize,
        concat!("Size of: ", stringify!(PyDateTime_Date))
    );
    assert_eq!(
        ::std::mem::align_of::<PyDateTime_Date>(),
        8usize,
        concat!("Alignment of ", stringify!(PyDateTime_Date))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDateTime_Date>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_Date),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDateTime_Date>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_Date),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDateTime_Date>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_Date),
            "::",
            stringify!(ob_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyDateTime_Time {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
}
#[test]
fn bindgen_test_layout_PyDateTime_Time() {
    assert_eq!(
        ::std::mem::size_of::<PyDateTime_Time>(),
        24usize,
        concat!("Size of: ", stringify!(PyDateTime_Time))
    );
    assert_eq!(
        ::std::mem::align_of::<PyDateTime_Time>(),
        8usize,
        concat!("Alignment of ", stringify!(PyDateTime_Time))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDateTime_Time>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_Time),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDateTime_Time>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_Time),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDateTime_Time>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_Time),
            "::",
            stringify!(ob_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyDateTime_DateTime {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
}
#[test]
fn bindgen_test_layout_PyDateTime_DateTime() {
    assert_eq!(
        ::std::mem::size_of::<PyDateTime_DateTime>(),
        24usize,
        concat!("Size of: ", stringify!(PyDateTime_DateTime))
    );
    assert_eq!(
        ::std::mem::align_of::<PyDateTime_DateTime>(),
        8usize,
        concat!("Alignment of ", stringify!(PyDateTime_DateTime))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDateTime_DateTime>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_DateTime),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyDateTime_DateTime>())).ob_pypy_link as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_DateTime),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDateTime_DateTime>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_DateTime),
            "::",
            stringify!(ob_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyDateTime_TZInfo {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
}
#[test]
fn bindgen_test_layout_PyDateTime_TZInfo() {
    assert_eq!(
        ::std::mem::size_of::<PyDateTime_TZInfo>(),
        24usize,
        concat!("Size of: ", stringify!(PyDateTime_TZInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<PyDateTime_TZInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(PyDateTime_TZInfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDateTime_TZInfo>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_TZInfo),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDateTime_TZInfo>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_TZInfo),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyDateTime_TZInfo>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyDateTime_TZInfo),
            "::",
            stringify!(ob_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _is {
    pub next: *mut _is,
}
#[test]
fn bindgen_test_layout__is() {
    assert_eq!(
        ::std::mem::size_of::<_is>(),
        8usize,
        concat!("Size of: ", stringify!(_is))
    );
    assert_eq!(
        ::std::mem::align_of::<_is>(),
        8usize,
        concat!("Alignment of ", stringify!(_is))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_is>())).next as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(_is), "::", stringify!(next))
    );
}
pub type PyInterpreterState = _is;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ts {
    pub interp: *mut PyInterpreterState,
    pub dict: *mut PyObject,
}
#[test]
fn bindgen_test_layout__ts() {
    assert_eq!(
        ::std::mem::size_of::<_ts>(),
        16usize,
        concat!("Size of: ", stringify!(_ts))
    );
    assert_eq!(
        ::std::mem::align_of::<_ts>(),
        8usize,
        concat!("Alignment of ", stringify!(_ts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).interp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_ts),
            "::",
            stringify!(interp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_ts>())).dict as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(_ts), "::", stringify!(dict))
    );
}
pub type PyThreadState = _ts;
pub const PyGILState_LOCKED: _bindgen_ty_1 = 0;
pub const PyGILState_UNLOCKED: _bindgen_ty_1 = 1;
pub type _bindgen_ty_1 = u32;
pub type PyGILState_STATE = ::std::os::raw::c_int;
extern "C" {
    #[link_name = "\u{1}_Py_FileSystemDefaultEncoding"]
    pub static mut Py_FileSystemDefaultEncoding: *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__PyPy_setfilesystemdefaultencoding"]
    pub fn _Py_setfilesystemdefaultencoding(arg1: *const ::std::os::raw::c_char);
}
pub type PyOS_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
extern "C" {
    #[link_name = "\u{1}_PyPyOS_setsig"]
    pub fn PyOS_setsig(
        sig: ::std::os::raw::c_int,
        handler: PyOS_sighandler_t,
    ) -> PyOS_sighandler_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyOS_getsig"]
    pub fn PyOS_getsig(sig: ::std::os::raw::c_int) -> PyOS_sighandler_t;
}
pub type PyThread_type_lock = *mut ::std::os::raw::c_void;
extern "C" {
    #[link_name = "\u{1}_PyPyThread_get_thread_ident"]
    pub fn PyThread_get_thread_ident() -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_PyPyThread_allocate_lock"]
    pub fn PyThread_allocate_lock() -> PyThread_type_lock;
}
extern "C" {
    #[link_name = "\u{1}_PyPyThread_free_lock"]
    pub fn PyThread_free_lock(arg1: PyThread_type_lock);
}
extern "C" {
    #[link_name = "\u{1}_PyPyThread_acquire_lock"]
    pub fn PyThread_acquire_lock(
        arg1: PyThread_type_lock,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyThread_release_lock"]
    pub fn PyThread_release_lock(arg1: PyThread_type_lock);
}
extern "C" {
    #[link_name = "\u{1}_PyPyThread_start_new_thread"]
    pub fn PyThread_start_new_thread(
        func: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}_PyPyThread_create_key"]
    pub fn PyThread_create_key() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyThread_delete_key"]
    pub fn PyThread_delete_key(arg1: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_PyPyThread_set_key_value"]
    pub fn PyThread_set_key_value(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyThread_get_key_value"]
    pub fn PyThread_get_key_value(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_PyPyThread_delete_key_value"]
    pub fn PyThread_delete_key_value(key: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_PyPyThread_ReInitTLS"]
    pub fn PyThread_ReInitTLS();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _traceback {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
    pub tb_next: *mut _traceback,
    pub tb_frame: *mut _frame,
    pub tb_lasti: ::std::os::raw::c_int,
    pub tb_lineno: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__traceback() {
    assert_eq!(
        ::std::mem::size_of::<_traceback>(),
        48usize,
        concat!("Size of: ", stringify!(_traceback))
    );
    assert_eq!(
        ::std::mem::align_of::<_traceback>(),
        8usize,
        concat!("Alignment of ", stringify!(_traceback))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_traceback>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_traceback),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_traceback>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_traceback),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_traceback>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_traceback),
            "::",
            stringify!(ob_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_traceback>())).tb_next as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_traceback),
            "::",
            stringify!(tb_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_traceback>())).tb_frame as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_traceback),
            "::",
            stringify!(tb_frame)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_traceback>())).tb_lasti as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_traceback),
            "::",
            stringify!(tb_lasti)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_traceback>())).tb_lineno as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(_traceback),
            "::",
            stringify!(tb_lineno)
        )
    );
}
pub type PyTracebackObject = _traceback;
extern "C" {
    #[link_name = "\u{1}__PyPy_RestoreSignals"]
    pub fn _Py_RestoreSignals();
}
extern "C" {
    #[link_name = "\u{1}_PyPyMethod_Type"]
    pub static mut PyMethod_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyRange_Type"]
    pub static mut PyRange_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyTraceBack_Type"]
    pub static mut PyTraceBack_Type: PyTypeObject;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyMethodObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
}
#[test]
fn bindgen_test_layout_PyMethodObject() {
    assert_eq!(
        ::std::mem::size_of::<PyMethodObject>(),
        24usize,
        concat!("Size of: ", stringify!(PyMethodObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyMethodObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyMethodObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMethodObject>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMethodObject),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMethodObject>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMethodObject),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyMethodObject>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyMethodObject),
            "::",
            stringify!(ob_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyListObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
}
#[test]
fn bindgen_test_layout_PyListObject() {
    assert_eq!(
        ::std::mem::size_of::<PyListObject>(),
        24usize,
        concat!("Size of: ", stringify!(PyListObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyListObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyListObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyListObject>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyListObject),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyListObject>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyListObject),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyListObject>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyListObject),
            "::",
            stringify!(ob_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyLongObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
}
#[test]
fn bindgen_test_layout_PyLongObject() {
    assert_eq!(
        ::std::mem::size_of::<PyLongObject>(),
        24usize,
        concat!("Size of: ", stringify!(PyLongObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyLongObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyLongObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyLongObject>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyLongObject),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyLongObject>())).ob_pypy_link as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyLongObject),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyLongObject>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyLongObject),
            "::",
            stringify!(ob_type)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PyBaseExceptionObject {
    pub ob_refcnt: Py_ssize_t,
    pub ob_pypy_link: Py_ssize_t,
    pub ob_type: *mut _typeobject,
}
#[test]
fn bindgen_test_layout_PyBaseExceptionObject() {
    assert_eq!(
        ::std::mem::size_of::<PyBaseExceptionObject>(),
        24usize,
        concat!("Size of: ", stringify!(PyBaseExceptionObject))
    );
    assert_eq!(
        ::std::mem::align_of::<PyBaseExceptionObject>(),
        8usize,
        concat!("Alignment of ", stringify!(PyBaseExceptionObject))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyBaseExceptionObject>())).ob_refcnt as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBaseExceptionObject),
            "::",
            stringify!(ob_refcnt)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<PyBaseExceptionObject>())).ob_pypy_link as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBaseExceptionObject),
            "::",
            stringify!(ob_pypy_link)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<PyBaseExceptionObject>())).ob_type as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(PyBaseExceptionObject),
            "::",
            stringify!(ob_type)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}_PyPySlice_GetIndicesEx"]
    pub fn PySlice_GetIndicesEx(
        arg0: *mut PyObject,
        arg1: Py_ssize_t,
        arg2: *mut Py_ssize_t,
        arg3: *mut Py_ssize_t,
        arg4: *mut Py_ssize_t,
        arg5: *mut Py_ssize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyAnySet_Check"]
    pub fn PyAnySet_Check(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyAnySet_CheckExact"]
    pub fn PyAnySet_CheckExact(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyBool_Check"]
    pub fn PyBool_Check(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyBool_CheckExact"]
    pub fn PyBool_CheckExact(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyBool_FromLong"]
    pub fn PyBool_FromLong(arg0: Py_ssize_t) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyBuffer_FillInfo"]
    pub fn PyBuffer_FillInfo(
        arg0: *mut Py_buffer,
        arg1: *mut PyObject,
        arg2: *mut ::std::os::raw::c_void,
        arg3: Py_ssize_t,
        arg4: Py_ssize_t,
        arg5: Py_ssize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyBuffer_IsContiguous"]
    pub fn PyBuffer_IsContiguous(
        arg0: *mut Py_buffer,
        arg1: ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyByteArray_AsString"]
    pub fn PyByteArray_AsString(arg0: *mut PyObject) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_PyPyByteArray_Check"]
    pub fn PyByteArray_Check(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyByteArray_CheckExact"]
    pub fn PyByteArray_CheckExact(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyByteArray_Concat"]
    pub fn PyByteArray_Concat(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyByteArray_FromObject"]
    pub fn PyByteArray_FromObject(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyByteArray_FromStringAndSize"]
    pub fn PyByteArray_FromStringAndSize(
        arg0: *const ::std::os::raw::c_char,
        arg1: Py_ssize_t,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyByteArray_Resize"]
    pub fn PyByteArray_Resize(arg0: *mut PyObject, arg1: Py_ssize_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyByteArray_Size"]
    pub fn PyByteArray_Size(arg0: *mut PyObject) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyBytes_AS_STRING"]
    pub fn PyBytes_AS_STRING(arg0: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_PyPyBytes_AsString"]
    pub fn PyBytes_AsString(arg0: *mut PyObject) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_PyPyBytes_AsStringAndSize"]
    pub fn PyBytes_AsStringAndSize(
        arg0: *mut PyObject,
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut Py_ssize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyBytes_Concat"]
    pub fn PyBytes_Concat(arg0: *mut *mut PyObject, arg1: *mut PyObject);
}
extern "C" {
    #[link_name = "\u{1}_PyPyBytes_ConcatAndDel"]
    pub fn PyBytes_ConcatAndDel(arg0: *mut *mut PyObject, arg1: *mut PyObject);
}
extern "C" {
    #[link_name = "\u{1}_PyPyBytes_FromObject"]
    pub fn PyBytes_FromObject(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyBytes_FromString"]
    pub fn PyBytes_FromString(arg0: *const ::std::os::raw::c_char) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyBytes_FromStringAndSize"]
    pub fn PyBytes_FromStringAndSize(
        arg0: *const ::std::os::raw::c_char,
        arg1: Py_ssize_t,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyBytes_Size"]
    pub fn PyBytes_Size(arg0: *mut PyObject) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCFunction_Check"]
    pub fn PyCFunction_Check(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCFunction_GetFunction"]
    pub fn PyCFunction_GetFunction(arg0: *mut PyObject) -> PyCFunction;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCFunction_NewEx"]
    pub fn PyCFunction_NewEx(
        arg0: *mut PyMethodDef,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCallIter_New"]
    pub fn PyCallIter_New(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCallable_Check"]
    pub fn PyCallable_Check(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyClassMethod_New"]
    pub fn PyClassMethod_New(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCode_Check"]
    pub fn PyCode_Check(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCode_CheckExact"]
    pub fn PyCode_CheckExact(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCode_GetNumFree"]
    pub fn PyCode_GetNumFree(arg0: *mut PyCodeObject) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCode_New"]
    pub fn PyCode_New(
        arg0: ::std::os::raw::c_int,
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut PyObject,
        arg6: *mut PyObject,
        arg7: *mut PyObject,
        arg8: *mut PyObject,
        arg9: *mut PyObject,
        arg10: *mut PyObject,
        arg11: *mut PyObject,
        arg12: *mut PyObject,
        arg13: ::std::os::raw::c_int,
        arg14: *mut PyObject,
    ) -> *mut PyCodeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCode_NewEmpty"]
    pub fn PyCode_NewEmpty(
        arg0: *const ::std::os::raw::c_char,
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut PyCodeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCodec_IncrementalDecoder"]
    pub fn PyCodec_IncrementalDecoder(
        arg0: *const ::std::os::raw::c_char,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCodec_IncrementalEncoder"]
    pub fn PyCodec_IncrementalEncoder(
        arg0: *const ::std::os::raw::c_char,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyComplex_Check"]
    pub fn PyComplex_Check(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyComplex_CheckExact"]
    pub fn PyComplex_CheckExact(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyComplex_FromDoubles"]
    pub fn PyComplex_FromDoubles(arg0: f64, arg1: f64) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyComplex_ImagAsDouble"]
    pub fn PyComplex_ImagAsDouble(arg0: *mut PyObject) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_PyPyComplex_RealAsDouble"]
    pub fn PyComplex_RealAsDouble(arg0: *mut PyObject) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCoro_Check"]
    pub fn PyCoro_Check(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCoro_CheckExact"]
    pub fn PyCoro_CheckExact(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDateTime_Check"]
    pub fn PyDateTime_Check(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDateTime_CheckExact"]
    pub fn PyDateTime_CheckExact(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDateTime_DATE_GET_HOUR"]
    pub fn PyDateTime_DATE_GET_HOUR(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDateTime_DATE_GET_MICROSECOND"]
    pub fn PyDateTime_DATE_GET_MICROSECOND(
        arg0: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDateTime_DATE_GET_MINUTE"]
    pub fn PyDateTime_DATE_GET_MINUTE(arg0: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDateTime_DATE_GET_SECOND"]
    pub fn PyDateTime_DATE_GET_SECOND(arg0: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDateTime_DELTA_GET_DAYS"]
    pub fn PyDateTime_DELTA_GET_DAYS(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDateTime_DELTA_GET_MICROSECONDS"]
    pub fn PyDateTime_DELTA_GET_MICROSECONDS(
        arg0: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDateTime_DELTA_GET_SECONDS"]
    pub fn PyDateTime_DELTA_GET_SECONDS(
        arg0: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDateTime_FromTimestamp"]
    pub fn PyDateTime_FromTimestamp(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDateTime_GET_DAY"]
    pub fn PyDateTime_GET_DAY(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDateTime_GET_MONTH"]
    pub fn PyDateTime_GET_MONTH(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDateTime_GET_YEAR"]
    pub fn PyDateTime_GET_YEAR(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDateTime_TIME_GET_HOUR"]
    pub fn PyDateTime_TIME_GET_HOUR(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDateTime_TIME_GET_MICROSECOND"]
    pub fn PyDateTime_TIME_GET_MICROSECOND(
        arg0: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDateTime_TIME_GET_MINUTE"]
    pub fn PyDateTime_TIME_GET_MINUTE(arg0: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDateTime_TIME_GET_SECOND"]
    pub fn PyDateTime_TIME_GET_SECOND(arg0: *mut ::std::os::raw::c_void)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDate_Check"]
    pub fn PyDate_Check(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDate_CheckExact"]
    pub fn PyDate_CheckExact(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDate_FromTimestamp"]
    pub fn PyDate_FromTimestamp(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDelta_Check"]
    pub fn PyDelta_Check(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDelta_CheckExact"]
    pub fn PyDelta_CheckExact(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDescr_NewClassMethod"]
    pub fn PyDescr_NewClassMethod(
        arg0: *mut PyTypeObject,
        arg1: *mut PyMethodDef,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDictProxy_Check"]
    pub fn PyDictProxy_Check(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDictProxy_CheckExact"]
    pub fn PyDictProxy_CheckExact(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDictProxy_New"]
    pub fn PyDictProxy_New(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDict_Clear"]
    pub fn PyDict_Clear(arg0: *mut PyObject);
}
extern "C" {
    #[link_name = "\u{1}_PyPyDict_Contains"]
    pub fn PyDict_Contains(arg0: *mut PyObject, arg1: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDict_Copy"]
    pub fn PyDict_Copy(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDict_DelItem"]
    pub fn PyDict_DelItem(arg0: *mut PyObject, arg1: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDict_DelItemString"]
    pub fn PyDict_DelItemString(
        arg0: *mut PyObject,
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDict_GetItem"]
    pub fn PyDict_GetItem(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDict_GetItemString"]
    pub fn PyDict_GetItemString(
        arg0: *mut PyObject,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDict_Items"]
    pub fn PyDict_Items(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDict_Keys"]
    pub fn PyDict_Keys(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDict_Merge"]
    pub fn PyDict_Merge(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDict_New"]
    pub fn PyDict_New() -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDict_Next"]
    pub fn PyDict_Next(
        arg0: *mut PyObject,
        arg1: *mut Py_ssize_t,
        arg2: *mut *mut PyObject,
        arg3: *mut *mut PyObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDict_SetDefault"]
    pub fn PyDict_SetDefault(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDict_SetItem"]
    pub fn PyDict_SetItem(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDict_SetItemString"]
    pub fn PyDict_SetItemString(
        arg0: *mut PyObject,
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDict_Size"]
    pub fn PyDict_Size(arg0: *mut PyObject) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDict_Update"]
    pub fn PyDict_Update(arg0: *mut PyObject, arg1: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDict_Values"]
    pub fn PyDict_Values(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_BadArgument"]
    pub fn PyErr_BadArgument() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_BadInternalCall"]
    pub fn PyErr_BadInternalCall();
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_CheckSignals"]
    pub fn PyErr_CheckSignals() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_Clear"]
    pub fn PyErr_Clear();
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_Display"]
    pub fn PyErr_Display(arg0: *mut PyObject, arg1: *mut PyObject, arg2: *mut PyObject);
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_ExceptionMatches"]
    pub fn PyErr_ExceptionMatches(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_Fetch"]
    pub fn PyErr_Fetch(
        arg0: *mut *mut PyObject,
        arg1: *mut *mut PyObject,
        arg2: *mut *mut PyObject,
    );
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_GetExcInfo"]
    pub fn PyErr_GetExcInfo(
        arg0: *mut *mut PyObject,
        arg1: *mut *mut PyObject,
        arg2: *mut *mut PyObject,
    );
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_GivenExceptionMatches"]
    pub fn PyErr_GivenExceptionMatches(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_NoMemory"]
    pub fn PyErr_NoMemory() -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_NormalizeException"]
    pub fn PyErr_NormalizeException(
        arg0: *mut *mut PyObject,
        arg1: *mut *mut PyObject,
        arg2: *mut *mut PyObject,
    );
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_Occurred"]
    pub fn PyErr_Occurred() -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_Print"]
    pub fn PyErr_Print();
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_PrintEx"]
    pub fn PyErr_PrintEx(arg0: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_Restore"]
    pub fn PyErr_Restore(arg0: *mut PyObject, arg1: *mut PyObject, arg2: *mut PyObject);
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_SetExcInfo"]
    pub fn PyErr_SetExcInfo(arg0: *mut PyObject, arg1: *mut PyObject, arg2: *mut PyObject);
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_SetFromErrno"]
    pub fn PyErr_SetFromErrno(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_SetFromErrnoWithFilename"]
    pub fn PyErr_SetFromErrnoWithFilename(
        arg0: *mut PyObject,
        arg1: *mut ::std::os::raw::c_char,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_SetFromErrnoWithFilenameObject"]
    pub fn PyErr_SetFromErrnoWithFilenameObject(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_SetInterrupt"]
    pub fn PyErr_SetInterrupt();
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_SetNone"]
    pub fn PyErr_SetNone(arg0: *mut PyObject);
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_SetObject"]
    pub fn PyErr_SetObject(arg0: *mut PyObject, arg1: *mut PyObject);
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_SetString"]
    pub fn PyErr_SetString(arg0: *mut PyObject, arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_Warn"]
    pub fn PyErr_Warn(
        arg0: *mut PyObject,
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_WarnEx"]
    pub fn PyErr_WarnEx(
        arg0: *mut PyObject,
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyErr_WriteUnraisable"]
    pub fn PyErr_WriteUnraisable(arg0: *mut PyObject);
}
extern "C" {
    #[link_name = "\u{1}_PyPyEval_AcquireThread"]
    pub fn PyEval_AcquireThread(arg0: *mut PyThreadState);
}
extern "C" {
    #[link_name = "\u{1}_PyPyEval_CallObjectWithKeywords"]
    pub fn PyEval_CallObjectWithKeywords(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyEval_EvalCode"]
    pub fn PyEval_EvalCode(
        arg0: *mut PyCodeObject,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyEval_GetBuiltins"]
    pub fn PyEval_GetBuiltins() -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyEval_GetGlobals"]
    pub fn PyEval_GetGlobals() -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyEval_GetLocals"]
    pub fn PyEval_GetLocals() -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyEval_InitThreads"]
    pub fn PyEval_InitThreads();
}
extern "C" {
    #[link_name = "\u{1}_PyPyEval_MergeCompilerFlags"]
    pub fn PyEval_MergeCompilerFlags(arg0: *mut PyCompilerFlags) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyEval_ReleaseThread"]
    pub fn PyEval_ReleaseThread(arg0: *mut PyThreadState);
}
extern "C" {
    #[link_name = "\u{1}_PyPyEval_RestoreThread"]
    pub fn PyEval_RestoreThread(arg0: *mut PyThreadState);
}
extern "C" {
    #[link_name = "\u{1}_PyPyEval_SaveThread"]
    pub fn PyEval_SaveThread() -> *mut PyThreadState;
}
extern "C" {
    #[link_name = "\u{1}_PyPyEval_ThreadsInitialized"]
    pub fn PyEval_ThreadsInitialized() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExceptionInstance_Class"]
    pub fn PyExceptionInstance_Class(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyException_GetCause"]
    pub fn PyException_GetCause(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyException_GetContext"]
    pub fn PyException_GetContext(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyException_GetTraceback"]
    pub fn PyException_GetTraceback(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyException_SetCause"]
    pub fn PyException_SetCause(arg0: *mut PyObject, arg1: *mut PyObject);
}
extern "C" {
    #[link_name = "\u{1}_PyPyException_SetContext"]
    pub fn PyException_SetContext(arg0: *mut PyObject, arg1: *mut PyObject);
}
extern "C" {
    #[link_name = "\u{1}_PyPyException_SetTraceback"]
    pub fn PyException_SetTraceback(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyFile_FromFile"]
    pub fn PyFile_FromFile(
        arg0: *mut FILE,
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_void,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyFile_FromString"]
    pub fn PyFile_FromString(
        arg0: *const ::std::os::raw::c_char,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyFile_GetLine"]
    pub fn PyFile_GetLine(arg0: *mut PyObject, arg1: ::std::os::raw::c_int) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyFile_Name"]
    pub fn PyFile_Name(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyFile_SetBufSize"]
    pub fn PyFile_SetBufSize(arg0: *mut PyObject, arg1: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_PyPyFile_WriteObject"]
    pub fn PyFile_WriteObject(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyFile_WriteString"]
    pub fn PyFile_WriteString(
        arg0: *const ::std::os::raw::c_char,
        arg1: *mut PyObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyFloat_AS_DOUBLE"]
    pub fn PyFloat_AS_DOUBLE(arg0: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_PyPyFloat_AsDouble"]
    pub fn PyFloat_AsDouble(arg0: *mut PyObject) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_PyPyFloat_Check"]
    pub fn PyFloat_Check(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyFloat_CheckExact"]
    pub fn PyFloat_CheckExact(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyFloat_FromDouble"]
    pub fn PyFloat_FromDouble(arg0: f64) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyFloat_FromString"]
    pub fn PyFloat_FromString(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyFrame_New"]
    pub fn PyFrame_New(
        arg0: *mut PyThreadState,
        arg1: *mut PyCodeObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> *mut PyFrameObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyFrozenSet_Check"]
    pub fn PyFrozenSet_Check(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyFrozenSet_CheckExact"]
    pub fn PyFrozenSet_CheckExact(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyFrozenSet_New"]
    pub fn PyFrozenSet_New(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyFunction_Check"]
    pub fn PyFunction_Check(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyFunction_CheckExact"]
    pub fn PyFunction_CheckExact(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyFunction_GetCode"]
    pub fn PyFunction_GetCode(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyGILState_Ensure"]
    pub fn PyGILState_Ensure() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyGILState_Release"]
    pub fn PyGILState_Release(arg0: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_PyPyGen_Check"]
    pub fn PyGen_Check(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyGen_CheckExact"]
    pub fn PyGen_CheckExact(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyImport_AddModule"]
    pub fn PyImport_AddModule(arg0: *const ::std::os::raw::c_char) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyImport_ExecCodeModule"]
    pub fn PyImport_ExecCodeModule(
        arg0: *mut ::std::os::raw::c_char,
        arg1: *mut PyObject,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyImport_ExecCodeModuleEx"]
    pub fn PyImport_ExecCodeModuleEx(
        arg0: *mut ::std::os::raw::c_char,
        arg1: *mut PyObject,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyImport_GetModuleDict"]
    pub fn PyImport_GetModuleDict() -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyImport_Import"]
    pub fn PyImport_Import(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyImport_ImportModule"]
    pub fn PyImport_ImportModule(arg0: *const ::std::os::raw::c_char) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyImport_ImportModuleLevelObject"]
    pub fn PyImport_ImportModuleLevelObject(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
        arg4: ::std::os::raw::c_int,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyImport_ImportModuleNoBlock"]
    pub fn PyImport_ImportModuleNoBlock(arg0: *const ::std::os::raw::c_char) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyImport_ReloadModule"]
    pub fn PyImport_ReloadModule(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyIndex_Check"]
    pub fn PyIndex_Check(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyInstanceMethod_Check"]
    pub fn PyInstanceMethod_Check(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyInstanceMethod_Function"]
    pub fn PyInstanceMethod_Function(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyInstanceMethod_GET_FUNCTION"]
    pub fn PyInstanceMethod_GET_FUNCTION(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyInstanceMethod_New"]
    pub fn PyInstanceMethod_New(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyInterpreterState_Head"]
    pub fn PyInterpreterState_Head() -> *mut PyInterpreterState;
}
extern "C" {
    #[link_name = "\u{1}_PyPyInterpreterState_Next"]
    pub fn PyInterpreterState_Next(arg0: *mut PyInterpreterState) -> *mut PyInterpreterState;
}
extern "C" {
    #[link_name = "\u{1}_PyPyIter_Check"]
    pub fn PyIter_Check(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyIter_Next"]
    pub fn PyIter_Next(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyList_Append"]
    pub fn PyList_Append(arg0: *mut PyObject, arg1: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyList_AsTuple"]
    pub fn PyList_AsTuple(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyList_GET_ITEM"]
    pub fn PyList_GET_ITEM(arg0: *mut ::std::os::raw::c_void, arg1: Py_ssize_t) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyList_GET_SIZE"]
    pub fn PyList_GET_SIZE(arg0: *mut ::std::os::raw::c_void) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyList_GetItem"]
    pub fn PyList_GetItem(arg0: *mut PyObject, arg1: Py_ssize_t) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyList_GetSlice"]
    pub fn PyList_GetSlice(
        arg0: *mut PyObject,
        arg1: Py_ssize_t,
        arg2: Py_ssize_t,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyList_Insert"]
    pub fn PyList_Insert(
        arg0: *mut PyObject,
        arg1: Py_ssize_t,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyList_New"]
    pub fn PyList_New(arg0: Py_ssize_t) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyList_Reverse"]
    pub fn PyList_Reverse(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyList_SET_ITEM"]
    pub fn PyList_SET_ITEM(
        arg0: *mut ::std::os::raw::c_void,
        arg1: Py_ssize_t,
        arg2: *mut PyObject,
    );
}
extern "C" {
    #[link_name = "\u{1}_PyPyList_SetItem"]
    pub fn PyList_SetItem(
        arg0: *mut PyObject,
        arg1: Py_ssize_t,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyList_SetSlice"]
    pub fn PyList_SetSlice(
        arg0: *mut PyObject,
        arg1: Py_ssize_t,
        arg2: Py_ssize_t,
        arg3: *mut PyObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyList_Size"]
    pub fn PyList_Size(arg0: *mut PyObject) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyList_Sort"]
    pub fn PyList_Sort(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_AsDouble"]
    pub fn PyLong_AsDouble(arg0: *mut PyObject) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_AsLong"]
    pub fn PyLong_AsLong(arg0: *mut PyObject) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_AsLongAndOverflow"]
    pub fn PyLong_AsLongAndOverflow(
        arg0: *mut PyObject,
        arg1: *mut ::std::os::raw::c_int,
    ) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_AsLongLong"]
    pub fn PyLong_AsLongLong(arg0: *mut PyObject) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_AsLongLongAndOverflow"]
    pub fn PyLong_AsLongLongAndOverflow(
        arg0: *mut PyObject,
        arg1: *mut ::std::os::raw::c_int,
    ) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_AsSize_t"]
    pub fn PyLong_AsSize_t(arg0: *mut PyObject) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_AsSsize_t"]
    pub fn PyLong_AsSsize_t(arg0: *mut PyObject) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_AsUnsignedLong"]
    pub fn PyLong_AsUnsignedLong(arg0: *mut PyObject) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_AsUnsignedLongLong"]
    pub fn PyLong_AsUnsignedLongLong(arg0: *mut PyObject) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_AsUnsignedLongLongMask"]
    pub fn PyLong_AsUnsignedLongLongMask(arg0: *mut PyObject) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_AsUnsignedLongMask"]
    pub fn PyLong_AsUnsignedLongMask(arg0: *mut PyObject) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_AsVoidPtr"]
    pub fn PyLong_AsVoidPtr(arg0: *mut PyObject) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_FromDouble"]
    pub fn PyLong_FromDouble(arg0: f64) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_FromLong"]
    pub fn PyLong_FromLong(arg0: Py_ssize_t) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_FromLongLong"]
    pub fn PyLong_FromLongLong(arg0: Py_ssize_t) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_FromSize_t"]
    pub fn PyLong_FromSize_t(arg0: ::std::os::raw::c_ulong) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_FromSsize_t"]
    pub fn PyLong_FromSsize_t(arg0: Py_ssize_t) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_FromString"]
    pub fn PyLong_FromString(
        arg0: *const ::std::os::raw::c_char,
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_FromUnicode"]
    pub fn PyLong_FromUnicode(
        arg0: *mut wchar_t,
        arg1: Py_ssize_t,
        arg2: ::std::os::raw::c_int,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_FromUnicodeObject"]
    pub fn PyLong_FromUnicodeObject(
        arg0: *mut PyObject,
        arg1: ::std::os::raw::c_int,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_FromUnsignedLong"]
    pub fn PyLong_FromUnsignedLong(arg0: ::std::os::raw::c_ulong) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_FromUnsignedLongLong"]
    pub fn PyLong_FromUnsignedLongLong(arg0: ::std::os::raw::c_ulong) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_FromVoidPtr"]
    pub fn PyLong_FromVoidPtr(arg0: *mut ::std::os::raw::c_void) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMapping_Check"]
    pub fn PyMapping_Check(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMapping_GetItemString"]
    pub fn PyMapping_GetItemString(
        arg0: *mut PyObject,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMapping_HasKey"]
    pub fn PyMapping_HasKey(arg0: *mut PyObject, arg1: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMapping_HasKeyString"]
    pub fn PyMapping_HasKeyString(
        arg0: *mut PyObject,
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMapping_Items"]
    pub fn PyMapping_Items(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMapping_Keys"]
    pub fn PyMapping_Keys(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMapping_Length"]
    pub fn PyMapping_Length(arg0: *mut PyObject) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMapping_SetItemString"]
    pub fn PyMapping_SetItemString(
        arg0: *mut PyObject,
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMapping_Size"]
    pub fn PyMapping_Size(arg0: *mut PyObject) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMapping_Values"]
    pub fn PyMapping_Values(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMemoryView_Check"]
    pub fn PyMemoryView_Check(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMemoryView_CheckExact"]
    pub fn PyMemoryView_CheckExact(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMemoryView_FromBuffer"]
    pub fn PyMemoryView_FromBuffer(arg0: *mut Py_buffer) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMemoryView_FromMemory"]
    pub fn PyMemoryView_FromMemory(
        arg0: *mut ::std::os::raw::c_char,
        arg1: Py_ssize_t,
        arg2: ::std::os::raw::c_int,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMemoryView_FromObject"]
    pub fn PyMemoryView_FromObject(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMethodDescr_Check"]
    pub fn PyMethodDescr_Check(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMethodDescr_CheckExact"]
    pub fn PyMethodDescr_CheckExact(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMethod_Check"]
    pub fn PyMethod_Check(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMethod_CheckExact"]
    pub fn PyMethod_CheckExact(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMethod_Function"]
    pub fn PyMethod_Function(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMethod_New"]
    pub fn PyMethod_New(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMethod_Self"]
    pub fn PyMethod_Self(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyModule_Check"]
    pub fn PyModule_Check(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyModule_Create2"]
    pub fn PyPyModule_Create2(arg0: *mut PyModuleDef, arg1: ::std::os::raw::c_int)
        -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyModule_GetDict"]
    pub fn PyModule_GetDict(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyModule_GetName"]
    pub fn PyModule_GetName(arg0: *mut PyObject) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_PyPyModule_New"]
    pub fn PyModule_New(arg0: *mut ::std::os::raw::c_char) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_Absolute"]
    pub fn PyNumber_Absolute(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_Add"]
    pub fn PyNumber_Add(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_And"]
    pub fn PyNumber_And(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_AsSsize_t"]
    pub fn PyNumber_AsSsize_t(arg0: *mut PyObject, arg1: *mut PyObject) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_Check"]
    pub fn PyNumber_Check(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_Divide"]
    pub fn PyNumber_Divide(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_Divmod"]
    pub fn PyNumber_Divmod(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_Float"]
    pub fn PyNumber_Float(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_FloorDivide"]
    pub fn PyNumber_FloorDivide(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_InPlaceAdd"]
    pub fn PyNumber_InPlaceAdd(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_InPlaceAnd"]
    pub fn PyNumber_InPlaceAnd(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_InPlaceDivide"]
    pub fn PyNumber_InPlaceDivide(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_InPlaceFloorDivide"]
    pub fn PyNumber_InPlaceFloorDivide(arg0: *mut PyObject, arg1: *mut PyObject)
        -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_InPlaceLshift"]
    pub fn PyNumber_InPlaceLshift(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_InPlaceMatrixMultiply"]
    pub fn PyNumber_InPlaceMatrixMultiply(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_InPlaceMultiply"]
    pub fn PyNumber_InPlaceMultiply(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_InPlaceOr"]
    pub fn PyNumber_InPlaceOr(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_InPlacePower"]
    pub fn PyNumber_InPlacePower(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_InPlaceRemainder"]
    pub fn PyNumber_InPlaceRemainder(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_InPlaceRshift"]
    pub fn PyNumber_InPlaceRshift(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_InPlaceSubtract"]
    pub fn PyNumber_InPlaceSubtract(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_InPlaceTrueDivide"]
    pub fn PyNumber_InPlaceTrueDivide(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_InPlaceXor"]
    pub fn PyNumber_InPlaceXor(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_Index"]
    pub fn PyNumber_Index(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_Invert"]
    pub fn PyNumber_Invert(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_Long"]
    pub fn PyNumber_Long(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_Lshift"]
    pub fn PyNumber_Lshift(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_MatrixMultiply"]
    pub fn PyNumber_MatrixMultiply(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_Multiply"]
    pub fn PyNumber_Multiply(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_Negative"]
    pub fn PyNumber_Negative(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_Or"]
    pub fn PyNumber_Or(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_Positive"]
    pub fn PyNumber_Positive(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_Power"]
    pub fn PyNumber_Power(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_Remainder"]
    pub fn PyNumber_Remainder(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_Rshift"]
    pub fn PyNumber_Rshift(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_Subtract"]
    pub fn PyNumber_Subtract(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_TrueDivide"]
    pub fn PyNumber_TrueDivide(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNumber_Xor"]
    pub fn PyNumber_Xor(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyOS_AfterFork"]
    pub fn PyOS_AfterFork();
}
extern "C" {
    #[link_name = "\u{1}_PyPyOS_InterruptOccurred"]
    pub fn PyOS_InterruptOccurred() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyOS_double_to_string"]
    pub fn PyOS_double_to_string(
        arg0: f64,
        arg1: ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_PyPyOS_string_to_double"]
    pub fn PyOS_string_to_double(
        arg0: *const ::std::os::raw::c_char,
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut PyObject,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_ASCII"]
    pub fn PyObject_ASCII(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_AsCharBuffer"]
    pub fn PyObject_AsCharBuffer(
        arg0: *mut PyObject,
        arg1: *mut *const ::std::os::raw::c_char,
        arg2: *mut Py_ssize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_AsFileDescriptor"]
    pub fn PyObject_AsFileDescriptor(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_Bytes"]
    pub fn PyObject_Bytes(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_Call"]
    pub fn PyObject_Call(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_CallObject"]
    pub fn PyObject_CallObject(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_ClearWeakRefs"]
    pub fn PyObject_ClearWeakRefs(arg0: *mut PyObject);
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_DelAttr"]
    pub fn PyObject_DelAttr(arg0: *mut PyObject, arg1: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_DelAttrString"]
    pub fn PyObject_DelAttrString(
        arg0: *mut PyObject,
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_DelItem"]
    pub fn PyObject_DelItem(arg0: *mut PyObject, arg1: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_Dir"]
    pub fn PyObject_Dir(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_Format"]
    pub fn PyObject_Format(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_Free"]
    pub fn PyObject_Free(arg0: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_GC_Del"]
    pub fn PyObject_GC_Del(arg0: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_GenericGetAttr"]
    pub fn PyObject_GenericGetAttr(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_GenericSetAttr"]
    pub fn PyObject_GenericSetAttr(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_GetAttr"]
    pub fn PyObject_GetAttr(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_GetAttrString"]
    pub fn PyObject_GetAttrString(
        arg0: *mut PyObject,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_GetItem"]
    pub fn PyObject_GetItem(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_GetIter"]
    pub fn PyObject_GetIter(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_HasAttr"]
    pub fn PyObject_HasAttr(arg0: *mut PyObject, arg1: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_HasAttrString"]
    pub fn PyObject_HasAttrString(
        arg0: *mut PyObject,
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_Hash"]
    pub fn PyObject_Hash(arg0: *mut PyObject) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_HashNotImplemented"]
    pub fn PyObject_HashNotImplemented(arg0: *mut PyObject) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_Init"]
    pub fn PyObject_Init(arg0: *mut PyObject, arg1: *mut PyTypeObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_InitVar"]
    pub fn PyObject_InitVar(
        arg0: *mut PyVarObject,
        arg1: *mut PyTypeObject,
        arg2: Py_ssize_t,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_IsInstance"]
    pub fn PyObject_IsInstance(arg0: *mut PyObject, arg1: *mut PyObject)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_IsSubclass"]
    pub fn PyObject_IsSubclass(arg0: *mut PyObject, arg1: *mut PyObject)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_IsTrue"]
    pub fn PyObject_IsTrue(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_LengthHint"]
    pub fn PyObject_LengthHint(arg0: *mut PyObject, arg1: Py_ssize_t) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_Malloc"]
    pub fn PyObject_Malloc(arg0: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_Not"]
    pub fn PyObject_Not(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_Print"]
    pub fn PyObject_Print(
        arg0: *mut PyObject,
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_Realloc"]
    pub fn PyObject_Realloc(
        arg0: *mut ::std::os::raw::c_void,
        arg1: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_Repr"]
    pub fn PyObject_Repr(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_RichCompare"]
    pub fn PyObject_RichCompare(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
        arg2: ::std::os::raw::c_int,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_RichCompareBool"]
    pub fn PyObject_RichCompareBool(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_SelfIter"]
    pub fn PyObject_SelfIter(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_SetAttr"]
    pub fn PyObject_SetAttr(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_SetAttrString"]
    pub fn PyObject_SetAttrString(
        arg0: *mut PyObject,
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_SetItem"]
    pub fn PyObject_SetItem(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_Size"]
    pub fn PyObject_Size(arg0: *mut PyObject) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_Str"]
    pub fn PyObject_Str(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_Type"]
    pub fn PyObject_Type(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyObject_Unicode"]
    pub fn PyObject_Unicode(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyRun_File"]
    pub fn PyRun_File(
        arg0: *mut FILE,
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut PyObject,
        arg4: *mut PyObject,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyRun_SimpleString"]
    pub fn PyRun_SimpleString(arg0: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyRun_String"]
    pub fn PyRun_String(
        arg0: *const ::std::os::raw::c_char,
        arg1: ::std::os::raw::c_int,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyRun_StringFlags"]
    pub fn PyRun_StringFlags(
        arg0: *const ::std::os::raw::c_char,
        arg1: ::std::os::raw::c_int,
        arg2: *mut PyObject,
        arg3: *mut PyObject,
        arg4: *mut PyCompilerFlags,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPySeqIter_New"]
    pub fn PySeqIter_New(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPySequence_Check"]
    pub fn PySequence_Check(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPySequence_Concat"]
    pub fn PySequence_Concat(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPySequence_Contains"]
    pub fn PySequence_Contains(arg0: *mut PyObject, arg1: *mut PyObject)
        -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPySequence_DelItem"]
    pub fn PySequence_DelItem(arg0: *mut PyObject, arg1: Py_ssize_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPySequence_DelSlice"]
    pub fn PySequence_DelSlice(
        arg0: *mut PyObject,
        arg1: Py_ssize_t,
        arg2: Py_ssize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPySequence_Fast"]
    pub fn PySequence_Fast(
        arg0: *mut PyObject,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPySequence_Fast_GET_ITEM"]
    pub fn PySequence_Fast_GET_ITEM(
        arg0: *mut ::std::os::raw::c_void,
        arg1: Py_ssize_t,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPySequence_Fast_GET_SIZE"]
    pub fn PySequence_Fast_GET_SIZE(arg0: *mut ::std::os::raw::c_void) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPySequence_Fast_ITEMS"]
    pub fn PySequence_Fast_ITEMS(arg0: *mut ::std::os::raw::c_void) -> *mut *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPySequence_GetItem"]
    pub fn PySequence_GetItem(arg0: *mut PyObject, arg1: Py_ssize_t) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPySequence_GetSlice"]
    pub fn PySequence_GetSlice(
        arg0: *mut PyObject,
        arg1: Py_ssize_t,
        arg2: Py_ssize_t,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPySequence_ITEM"]
    pub fn PySequence_ITEM(arg0: *mut ::std::os::raw::c_void, arg1: Py_ssize_t) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPySequence_InPlaceConcat"]
    pub fn PySequence_InPlaceConcat(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPySequence_InPlaceRepeat"]
    pub fn PySequence_InPlaceRepeat(arg0: *mut PyObject, arg1: Py_ssize_t) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPySequence_Index"]
    pub fn PySequence_Index(arg0: *mut PyObject, arg1: *mut PyObject) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPySequence_Length"]
    pub fn PySequence_Length(arg0: *mut PyObject) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPySequence_List"]
    pub fn PySequence_List(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPySequence_Repeat"]
    pub fn PySequence_Repeat(arg0: *mut PyObject, arg1: Py_ssize_t) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPySequence_SetItem"]
    pub fn PySequence_SetItem(
        arg0: *mut PyObject,
        arg1: Py_ssize_t,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPySequence_SetSlice"]
    pub fn PySequence_SetSlice(
        arg0: *mut PyObject,
        arg1: Py_ssize_t,
        arg2: Py_ssize_t,
        arg3: *mut PyObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPySequence_Size"]
    pub fn PySequence_Size(arg0: *mut PyObject) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPySequence_Tuple"]
    pub fn PySequence_Tuple(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPySet_Add"]
    pub fn PySet_Add(arg0: *mut PyObject, arg1: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPySet_Check"]
    pub fn PySet_Check(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPySet_CheckExact"]
    pub fn PySet_CheckExact(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPySet_Clear"]
    pub fn PySet_Clear(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPySet_Contains"]
    pub fn PySet_Contains(arg0: *mut PyObject, arg1: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPySet_Discard"]
    pub fn PySet_Discard(arg0: *mut PyObject, arg1: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPySet_GET_SIZE"]
    pub fn PySet_GET_SIZE(arg0: *mut ::std::os::raw::c_void) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPySet_New"]
    pub fn PySet_New(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPySet_Pop"]
    pub fn PySet_Pop(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPySet_Size"]
    pub fn PySet_Size(arg0: *mut PyObject) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPySlice_Check"]
    pub fn PySlice_Check(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPySlice_CheckExact"]
    pub fn PySlice_CheckExact(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPySlice_GetIndices"]
    pub fn PySlice_GetIndices(
        arg0: *mut PyObject,
        arg1: Py_ssize_t,
        arg2: *mut Py_ssize_t,
        arg3: *mut Py_ssize_t,
        arg4: *mut Py_ssize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPySlice_New"]
    pub fn PySlice_New(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyStaticMethod_New"]
    pub fn PyStaticMethod_New(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPySys_GetObject"]
    pub fn PySys_GetObject(arg0: *const ::std::os::raw::c_char) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPySys_SetObject"]
    pub fn PySys_SetObject(
        arg0: *const ::std::os::raw::c_char,
        arg1: *mut PyObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyTZInfo_Check"]
    pub fn PyTZInfo_Check(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyTZInfo_CheckExact"]
    pub fn PyTZInfo_CheckExact(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyThreadState_Clear"]
    pub fn PyThreadState_Clear(arg0: *mut PyThreadState);
}
extern "C" {
    #[link_name = "\u{1}_PyPyThreadState_Delete"]
    pub fn PyThreadState_Delete(arg0: *mut PyThreadState);
}
extern "C" {
    #[link_name = "\u{1}_PyPyThreadState_DeleteCurrent"]
    pub fn PyThreadState_DeleteCurrent();
}
extern "C" {
    #[link_name = "\u{1}_PyPyThreadState_Get"]
    pub fn PyThreadState_Get() -> *mut PyThreadState;
}
extern "C" {
    #[link_name = "\u{1}_PyPyThreadState_GetDict"]
    pub fn PyThreadState_GetDict() -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyThreadState_New"]
    pub fn PyThreadState_New(arg0: *mut PyInterpreterState) -> *mut PyThreadState;
}
extern "C" {
    #[link_name = "\u{1}_PyPyThreadState_Swap"]
    pub fn PyThreadState_Swap(arg0: *mut PyThreadState) -> *mut PyThreadState;
}
extern "C" {
    #[link_name = "\u{1}_PyPyThread_exit_thread"]
    pub fn PyThread_exit_thread() -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyTime_Check"]
    pub fn PyTime_Check(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyTime_CheckExact"]
    pub fn PyTime_CheckExact(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyTraceBack_Check"]
    pub fn PyTraceBack_Check(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyTraceBack_Here"]
    pub fn PyTraceBack_Here(arg0: *mut PyFrameObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyTraceBack_Print"]
    pub fn PyTraceBack_Print(arg0: *mut PyObject, arg1: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyTuple_GetItem"]
    pub fn PyTuple_GetItem(arg0: *mut PyObject, arg1: Py_ssize_t) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyTuple_GetSlice"]
    pub fn PyTuple_GetSlice(
        arg0: *mut PyObject,
        arg1: Py_ssize_t,
        arg2: Py_ssize_t,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyTuple_New"]
    pub fn PyTuple_New(arg0: Py_ssize_t) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyTuple_SetItem"]
    pub fn PyTuple_SetItem(
        arg0: *mut PyObject,
        arg1: Py_ssize_t,
        arg2: *mut PyObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyTuple_Size"]
    pub fn PyTuple_Size(arg0: *mut PyObject) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyType_FromSpecWithBases"]
    pub fn PyType_FromSpecWithBases(arg0: *mut PyType_Spec, arg1: *mut PyObject)
        -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyType_GenericAlloc"]
    pub fn PyType_GenericAlloc(arg0: *mut PyTypeObject, arg1: Py_ssize_t) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyType_GenericNew"]
    pub fn PyType_GenericNew(
        arg0: *mut PyTypeObject,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyType_IsSubtype"]
    pub fn PyType_IsSubtype(
        arg0: *mut PyTypeObject,
        arg1: *mut PyTypeObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyType_Modified"]
    pub fn PyType_Modified(arg0: *mut PyTypeObject);
}
extern "C" {
    #[link_name = "\u{1}_PyPyType_Ready"]
    pub fn PyType_Ready(arg0: *mut PyTypeObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_AsASCIIString"]
    pub fn PyUnicode_AsASCIIString(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_AsEncodedObject"]
    pub fn PyUnicode_AsEncodedObject(
        arg0: *mut PyObject,
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_AsEncodedString"]
    pub fn PyUnicode_AsEncodedString(
        arg0: *mut PyObject,
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_AsLatin1String"]
    pub fn PyUnicode_AsLatin1String(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_AsUTF8"]
    pub fn PyUnicode_AsUTF8(arg0: *mut PyObject) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_AsUTF8AndSize"]
    pub fn PyPyUnicode_AsUTF8AndSize(
        arg0: *mut PyObject,
        arg1: *mut Py_ssize_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_AsUTF8String"]
    pub fn PyUnicode_AsUTF8String(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_AsUnicode"]
    pub fn PyUnicode_AsUnicode(arg0: *mut PyObject) -> *mut Py_UNICODE;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_AsUnicodeAndSize"]
    pub fn PyUnicode_AsUnicodeAndSize(
        arg0: *mut PyObject,
        arg1: *mut Py_ssize_t,
    ) -> *mut Py_UNICODE;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_AsUnicodeEscapeString"]
    pub fn PyUnicode_AsUnicodeEscapeString(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_AsWideChar"]
    pub fn PyUnicode_AsWideChar(
        arg0: *mut PyObject,
        arg1: *mut wchar_t,
        arg2: Py_ssize_t,
    ) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_Check"]
    pub fn PyUnicode_Check(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_CheckExact"]
    pub fn PyUnicode_CheckExact(arg0: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_Compare"]
    pub fn PyUnicode_Compare(arg0: *mut PyObject, arg1: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_CompareWithASCIIString"]
    pub fn PyUnicode_CompareWithASCIIString(
        arg0: *mut PyObject,
        arg1: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_Concat"]
    pub fn PyUnicode_Concat(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_Count"]
    pub fn PyUnicode_Count(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
        arg2: Py_ssize_t,
        arg3: Py_ssize_t,
    ) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_Decode"]
    pub fn PyUnicode_Decode(
        arg0: *const ::std::os::raw::c_char,
        arg1: Py_ssize_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_DecodeASCII"]
    pub fn PyUnicode_DecodeASCII(
        arg0: *const ::std::os::raw::c_char,
        arg1: Py_ssize_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_DecodeFSDefault"]
    pub fn PyUnicode_DecodeFSDefault(arg0: *mut ::std::os::raw::c_char) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_DecodeFSDefaultAndSize"]
    pub fn PyUnicode_DecodeFSDefaultAndSize(
        arg0: *mut ::std::os::raw::c_char,
        arg1: Py_ssize_t,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_DecodeLatin1"]
    pub fn PyUnicode_DecodeLatin1(
        arg0: *const ::std::os::raw::c_char,
        arg1: Py_ssize_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_DecodeUTF16"]
    pub fn PyUnicode_DecodeUTF16(
        arg0: *const ::std::os::raw::c_char,
        arg1: Py_ssize_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_DecodeUTF32"]
    pub fn PyUnicode_DecodeUTF32(
        arg0: *const ::std::os::raw::c_char,
        arg1: Py_ssize_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_DecodeUTF8"]
    pub fn PyUnicode_DecodeUTF8(
        arg0: *const ::std::os::raw::c_char,
        arg1: Py_ssize_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_EncodeASCII"]
    pub fn PyUnicode_EncodeASCII(
        arg0: *const wchar_t,
        arg1: Py_ssize_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_EncodeDecimal"]
    pub fn PyUnicode_EncodeDecimal(
        arg0: *mut wchar_t,
        arg1: Py_ssize_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_EncodeFSDefault"]
    pub fn PyUnicode_EncodeFSDefault(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_EncodeLatin1"]
    pub fn PyUnicode_EncodeLatin1(
        arg0: *const wchar_t,
        arg1: Py_ssize_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_EncodeUTF8"]
    pub fn PyUnicode_EncodeUTF8(
        arg0: *const wchar_t,
        arg1: Py_ssize_t,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_FSConverter"]
    pub fn PyUnicode_FSConverter(
        arg0: *mut PyObject,
        arg1: *mut *mut PyObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_FSDecoder"]
    pub fn PyUnicode_FSDecoder(
        arg0: *mut PyObject,
        arg1: *mut *mut PyObject,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_Find"]
    pub fn PyUnicode_Find(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
        arg2: Py_ssize_t,
        arg3: Py_ssize_t,
        arg4: ::std::os::raw::c_int,
    ) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_Format"]
    pub fn PyUnicode_Format(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_FromEncodedObject"]
    pub fn PyUnicode_FromEncodedObject(
        arg0: *mut PyObject,
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_FromKindAndData"]
    pub fn PyUnicode_FromKindAndData(
        arg0: ::std::os::raw::c_int,
        arg1: *const ::std::os::raw::c_void,
        arg2: Py_ssize_t,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_FromObject"]
    pub fn PyUnicode_FromObject(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_FromOrdinal"]
    pub fn PyUnicode_FromOrdinal(arg0: ::std::os::raw::c_int) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_FromString"]
    pub fn PyUnicode_FromString(arg0: *const ::std::os::raw::c_char) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_FromStringAndSize"]
    pub fn PyUnicode_FromStringAndSize(
        arg0: *const ::std::os::raw::c_char,
        arg1: Py_ssize_t,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_FromUnicode"]
    pub fn PyUnicode_FromUnicode(arg0: *const wchar_t, arg1: Py_ssize_t) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_FromWideChar"]
    pub fn PyUnicode_FromWideChar(arg0: *const wchar_t, arg1: Py_ssize_t) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_GetDefaultEncoding"]
    pub fn PyUnicode_GetDefaultEncoding() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_GetMax"]
    pub fn PyUnicode_GetMax() -> wchar_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_InternFromString"]
    pub fn PyUnicode_InternFromString(arg0: *const ::std::os::raw::c_char) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_InternInPlace"]
    pub fn PyUnicode_InternInPlace(arg0: *mut *mut PyObject);
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_Join"]
    pub fn PyUnicode_Join(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_Replace"]
    pub fn PyUnicode_Replace(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
        arg2: *mut PyObject,
        arg3: Py_ssize_t,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_Resize"]
    pub fn PyUnicode_Resize(arg0: *mut *mut PyObject, arg1: Py_ssize_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_Split"]
    pub fn PyUnicode_Split(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
        arg2: Py_ssize_t,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_Splitlines"]
    pub fn PyUnicode_Splitlines(
        arg0: *mut PyObject,
        arg1: ::std::os::raw::c_int,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_Substring"]
    pub fn PyUnicode_Substring(
        arg0: *mut PyObject,
        arg1: Py_ssize_t,
        arg2: Py_ssize_t,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_Tailmatch"]
    pub fn PyUnicode_Tailmatch(
        arg0: *mut PyObject,
        arg1: *mut PyObject,
        arg2: Py_ssize_t,
        arg3: Py_ssize_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_TransformDecimalToASCII"]
    pub fn PyUnicode_TransformDecimalToASCII(
        arg0: *mut wchar_t,
        arg1: Py_ssize_t,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyWeakref_Check"]
    pub fn PyWeakref_Check(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyWeakref_CheckProxy"]
    pub fn PyWeakref_CheckProxy(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyWeakref_CheckRef"]
    pub fn PyWeakref_CheckRef(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyWeakref_CheckRefExact"]
    pub fn PyWeakref_CheckRefExact(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPyWeakref_GET_OBJECT"]
    pub fn PyWeakref_GET_OBJECT(arg0: *mut ::std::os::raw::c_void) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyWeakref_GetObject"]
    pub fn PyWeakref_GetObject(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyWeakref_LockObject"]
    pub fn PyWeakref_LockObject(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyWeakref_NewProxy"]
    pub fn PyWeakref_NewProxy(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyWeakref_NewRef"]
    pub fn PyWeakref_NewRef(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_AddPendingCall"]
    pub fn Py_AddPendingCall(
        arg0: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
        arg1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_AtExit"]
    pub fn Py_AtExit(
        arg0: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_CompileStringFlags"]
    pub fn Py_CompileStringFlags(
        arg0: *const ::std::os::raw::c_char,
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut PyCompilerFlags,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_DecRef"]
    pub fn Py_DecRef(arg0: *mut PyObject);
}
extern "C" {
    #[link_name = "\u{1}_PyPy_EnterRecursiveCall"]
    pub fn Py_EnterRecursiveCall(arg0: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_FindMethod"]
    pub fn Py_FindMethod(
        arg0: *mut PyMethodDef,
        arg1: *mut PyObject,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_GetProgramName"]
    pub fn Py_GetProgramName() -> *mut wchar_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_GetRecursionLimit"]
    pub fn Py_GetRecursionLimit() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_GetVersion"]
    pub fn Py_GetVersion() -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_IncRef"]
    pub fn Py_IncRef(arg0: *mut PyObject);
}
extern "C" {
    #[link_name = "\u{1}_PyPy_IsInitialized"]
    pub fn Py_IsInitialized() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_LeaveRecursiveCall"]
    pub fn Py_LeaveRecursiveCall();
}
extern "C" {
    #[link_name = "\u{1}_PyPy_MakePendingCalls"]
    pub fn Py_MakePendingCalls() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_SetRecursionLimit"]
    pub fn Py_SetRecursionLimit(arg0: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_PyPy_UNICODE_COPY"]
    pub fn Py_UNICODE_COPY(arg0: *mut wchar_t, arg1: *mut wchar_t, arg2: Py_ssize_t);
}
extern "C" {
    #[link_name = "\u{1}_PyPy_UNICODE_ISALNUM"]
    pub fn Py_UNICODE_ISALNUM(arg0: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_UNICODE_ISALPHA"]
    pub fn Py_UNICODE_ISALPHA(arg0: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_UNICODE_ISDECIMAL"]
    pub fn Py_UNICODE_ISDECIMAL(arg0: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_UNICODE_ISDIGIT"]
    pub fn Py_UNICODE_ISDIGIT(arg0: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_UNICODE_ISLINEBREAK"]
    pub fn Py_UNICODE_ISLINEBREAK(arg0: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_UNICODE_ISLOWER"]
    pub fn Py_UNICODE_ISLOWER(arg0: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_UNICODE_ISNUMERIC"]
    pub fn Py_UNICODE_ISNUMERIC(arg0: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_UNICODE_ISSPACE"]
    pub fn Py_UNICODE_ISSPACE(arg0: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_UNICODE_ISTITLE"]
    pub fn Py_UNICODE_ISTITLE(arg0: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_UNICODE_ISUPPER"]
    pub fn Py_UNICODE_ISUPPER(arg0: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_UNICODE_TODECIMAL"]
    pub fn Py_UNICODE_TODECIMAL(arg0: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_UNICODE_TODIGIT"]
    pub fn Py_UNICODE_TODIGIT(arg0: wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_UNICODE_TOLOWER"]
    pub fn Py_UNICODE_TOLOWER(arg0: wchar_t) -> wchar_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_UNICODE_TONUMERIC"]
    pub fn Py_UNICODE_TONUMERIC(arg0: wchar_t) -> f64;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_UNICODE_TOTITLE"]
    pub fn Py_UNICODE_TOTITLE(arg0: wchar_t) -> wchar_t;
}
extern "C" {
    #[link_name = "\u{1}_PyPy_UNICODE_TOUPPER"]
    pub fn Py_UNICODE_TOUPPER(arg0: wchar_t) -> wchar_t;
}
extern "C" {
    #[link_name = "\u{1}__PyPyBytes_Eq"]
    pub fn _PyBytes_Eq(arg0: *mut PyObject, arg1: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__PyPyBytes_Join"]
    pub fn _PyBytes_Join(arg0: *mut PyObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPyBytes_Resize"]
    pub fn _PyBytes_Resize(arg0: *mut *mut PyObject, arg1: Py_ssize_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__PyPyComplex_AsCComplex"]
    pub fn _PyComplex_AsCComplex(
        arg0: *mut PyObject,
        arg1: *mut Py_complex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__PyPyComplex_FromCComplex"]
    pub fn _PyComplex_FromCComplex(arg0: *mut Py_complex_t) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPyDateTime_FromDateAndTime"]
    pub fn _PyDateTime_FromDateAndTime(
        arg0: ::std::os::raw::c_int,
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *mut PyObject,
        arg8: *mut PyTypeObject,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPyDateTime_Import"]
    pub fn _PyDateTime_Import() -> *mut PyDateTime_CAPI;
}
extern "C" {
    #[link_name = "\u{1}__PyPyDate_FromDate"]
    pub fn _PyDate_FromDate(
        arg0: ::std::os::raw::c_int,
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut PyTypeObject,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPyDelta_FromDelta"]
    pub fn _PyDelta_FromDelta(
        arg0: ::std::os::raw::c_int,
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut PyTypeObject,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPyDict_HasOnlyStringKeys"]
    pub fn _PyDict_HasOnlyStringKeys(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__PyPyEval_SliceIndex"]
    pub fn _PyEval_SliceIndex(
        arg0: *mut PyObject,
        arg1: *mut Py_ssize_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__PyPyFloat_Unpack4"]
    pub fn _PyFloat_Unpack4(
        arg0: *const ::std::os::raw::c_uchar,
        arg1: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}__PyPyFloat_Unpack8"]
    pub fn _PyFloat_Unpack8(
        arg0: *const ::std::os::raw::c_uchar,
        arg1: ::std::os::raw::c_int,
    ) -> f64;
}
extern "C" {
    #[link_name = "\u{1}__PyPyImport_AcquireLock"]
    pub fn _PyImport_AcquireLock();
}
extern "C" {
    #[link_name = "\u{1}__PyPyImport_ReleaseLock"]
    pub fn _PyImport_ReleaseLock() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__PyPyLong_FromByteArray"]
    pub fn _PyLong_FromByteArray(
        arg0: *const ::std::os::raw::c_uchar,
        arg1: ::std::os::raw::c_ulong,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPyLong_NumBits"]
    pub fn _PyLong_NumBits(arg0: *mut PyObject) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}__PyPyLong_Sign"]
    pub fn _PyLong_Sign(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__PyPyNamespace_New"]
    pub fn _PyNamespace_New(arg0: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPyObject_GC_New"]
    pub fn _PyObject_GC_New(arg0: *mut PyTypeObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPyObject_GC_NewVar"]
    pub fn _PyObject_GC_NewVar(arg0: *mut PyTypeObject, arg1: Py_ssize_t) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPyObject_GetDictPtr"]
    pub fn _PyObject_GetDictPtr(arg0: *mut PyObject) -> *mut *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPyObject_New"]
    pub fn _PyObject_New(arg0: *mut PyTypeObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPyObject_NewVar"]
    pub fn _PyObject_NewVar(arg0: *mut PyTypeObject, arg1: Py_ssize_t) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPyPyGC_AddMemoryPressure"]
    pub fn _PyPyGC_AddMemoryPressure(arg0: Py_ssize_t);
}
extern "C" {
    #[link_name = "\u{1}__PyPyTime_FromTime"]
    pub fn _PyTime_FromTime(
        arg0: ::std::os::raw::c_int,
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut PyObject,
        arg5: *mut PyTypeObject,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPyTuple_Resize"]
    pub fn _PyTuple_Resize(arg0: *mut *mut PyObject, arg1: Py_ssize_t) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__PyPyType_Lookup"]
    pub fn _PyType_Lookup(arg0: *mut PyTypeObject, arg1: *mut PyObject) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPyUnicode_AsDefaultEncodedString"]
    pub fn _PyUnicode_AsDefaultEncodedString(
        arg0: *mut PyObject,
        arg1: *const ::std::os::raw::c_char,
    ) -> *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPyUnicode_Ready"]
    pub fn _PyUnicode_Ready(arg0: *mut PyObject) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__PyPy_Dealloc"]
    pub fn _Py_Dealloc(arg0: *mut PyObject);
}
extern "C" {
    #[link_name = "\u{1}__PyPy_HashDouble"]
    pub fn _Py_HashDouble(arg0: f64) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}__PyPy_HashPointer"]
    pub fn _Py_HashPointer(arg0: *mut ::std::os::raw::c_void) -> Py_ssize_t;
}
extern "C" {
    #[link_name = "\u{1}__PyPy_NewReference"]
    pub fn _Py_NewReference(arg0: *mut PyObject);
}
extern "C" {
    #[link_name = "\u{1}__PyPy_NoneStruct"]
    pub static mut _Py_NoneStruct: PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPy_TrueStruct"]
    pub static mut _Py_TrueStruct: PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPy_ZeroStruct"]
    pub static mut _Py_ZeroStruct: PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPy_NotImplementedStruct"]
    pub static mut _Py_NotImplementedStruct: PyObject;
}
extern "C" {
    #[link_name = "\u{1}__PyPy_EllipsisObject"]
    pub static mut _PyPy_EllipsisObject: PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDateTimeAPI"]
    pub static mut PyPyDateTimeAPI: *mut PyDateTime_CAPI;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_ArithmeticError"]
    pub static mut PyExc_ArithmeticError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_AssertionError"]
    pub static mut PyExc_AssertionError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_AttributeError"]
    pub static mut PyExc_AttributeError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_BaseException"]
    pub static mut PyExc_BaseException: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_BlockingIOError"]
    pub static mut PyExc_BlockingIOError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_BrokenPipeError"]
    pub static mut PyExc_BrokenPipeError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_BufferError"]
    pub static mut PyExc_BufferError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_BytesWarning"]
    pub static mut PyExc_BytesWarning: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_ChildProcessError"]
    pub static mut PyExc_ChildProcessError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_ConnectionAbortedError"]
    pub static mut PyExc_ConnectionAbortedError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_ConnectionError"]
    pub static mut PyExc_ConnectionError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_ConnectionRefusedError"]
    pub static mut PyExc_ConnectionRefusedError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_ConnectionResetError"]
    pub static mut PyExc_ConnectionResetError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_DeprecationWarning"]
    pub static mut PyExc_DeprecationWarning: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_EOFError"]
    pub static mut PyExc_EOFError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_Exception"]
    pub static mut PyExc_Exception: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_FileExistsError"]
    pub static mut PyExc_FileExistsError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_FileNotFoundError"]
    pub static mut PyExc_FileNotFoundError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_FloatingPointError"]
    pub static mut PyExc_FloatingPointError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_FutureWarning"]
    pub static mut PyExc_FutureWarning: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_GeneratorExit"]
    pub static mut PyExc_GeneratorExit: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_ImportError"]
    pub static mut PyExc_ImportError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_ImportWarning"]
    pub static mut PyExc_ImportWarning: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_IndentationError"]
    pub static mut PyExc_IndentationError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_IndexError"]
    pub static mut PyExc_IndexError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_InterruptedError"]
    pub static mut PyExc_InterruptedError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_IsADirectoryError"]
    pub static mut PyExc_IsADirectoryError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_KeyError"]
    pub static mut PyExc_KeyError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_KeyboardInterrupt"]
    pub static mut PyExc_KeyboardInterrupt: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_LookupError"]
    pub static mut PyExc_LookupError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_MemoryError"]
    pub static mut PyExc_MemoryError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_NameError"]
    pub static mut PyExc_NameError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_NotADirectoryError"]
    pub static mut PyExc_NotADirectoryError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_NotImplementedError"]
    pub static mut PyExc_NotImplementedError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_OSError"]
    pub static mut PyExc_OSError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_OverflowError"]
    pub static mut PyExc_OverflowError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_PendingDeprecationWarning"]
    pub static mut PyExc_PendingDeprecationWarning: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_PermissionError"]
    pub static mut PyExc_PermissionError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_ProcessLookupError"]
    pub static mut PyExc_ProcessLookupError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_RecursionError"]
    pub static mut PyExc_RecursionError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_ReferenceError"]
    pub static mut PyExc_ReferenceError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_ResourceWarning"]
    pub static mut PyExc_ResourceWarning: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_RuntimeError"]
    pub static mut PyExc_RuntimeError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_RuntimeWarning"]
    pub static mut PyExc_RuntimeWarning: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_StopAsyncIteration"]
    pub static mut PyExc_StopAsyncIteration: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_StopIteration"]
    pub static mut PyExc_StopIteration: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_SyntaxError"]
    pub static mut PyExc_SyntaxError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_SyntaxWarning"]
    pub static mut PyExc_SyntaxWarning: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_SystemError"]
    pub static mut PyExc_SystemError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_SystemExit"]
    pub static mut PyExc_SystemExit: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_TabError"]
    pub static mut PyExc_TabError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_TimeoutError"]
    pub static mut PyExc_TimeoutError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_TypeError"]
    pub static mut PyExc_TypeError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_UnboundLocalError"]
    pub static mut PyExc_UnboundLocalError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_UnicodeDecodeError"]
    pub static mut PyExc_UnicodeDecodeError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_UnicodeEncodeError"]
    pub static mut PyExc_UnicodeEncodeError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_UnicodeError"]
    pub static mut PyExc_UnicodeError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_UnicodeTranslateError"]
    pub static mut PyExc_UnicodeTranslateError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_UnicodeWarning"]
    pub static mut PyExc_UnicodeWarning: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_UserWarning"]
    pub static mut PyExc_UserWarning: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_ValueError"]
    pub static mut PyExc_ValueError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_Warning"]
    pub static mut PyExc_Warning: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyExc_ZeroDivisionError"]
    pub static mut PyExc_ZeroDivisionError: *mut PyObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyType_Type"]
    pub static mut PyType_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyBytes_Type"]
    pub static mut PyBytes_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyUnicode_Type"]
    pub static mut PyUnicode_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDict_Type"]
    pub static mut PyDict_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyDictProxy_Type"]
    pub static mut PyDictProxy_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyTuple_Type"]
    pub static mut PyTuple_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyList_Type"]
    pub static mut PyList_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPySet_Type"]
    pub static mut PySet_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyFrozenSet_Type"]
    pub static mut PyFrozenSet_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyBool_Type"]
    pub static mut PyBool_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyFloat_Type"]
    pub static mut PyFloat_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyLong_Type"]
    pub static mut PyLong_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyComplex_Type"]
    pub static mut PyComplex_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyByteArray_Type"]
    pub static mut PyByteArray_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMemoryView_Type"]
    pub static mut PyMemoryView_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyBaseObject_Type"]
    pub static mut PyBaseObject_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNone_Type"]
    pub static mut PyNone_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyNotImplemented_Type"]
    pub static mut PyNotImplemented_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCell_Type"]
    pub static mut PyCell_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyModule_Type"]
    pub static mut PyModule_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyProperty_Type"]
    pub static mut PyProperty_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPySlice_Type"]
    pub static mut PySlice_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyStaticMethod_Type"]
    pub static mut PyStaticMethod_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyCFunction_Type"]
    pub static mut PyCFunction_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyClassMethodDescr_Type"]
    pub static mut PyClassMethodDescr_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyGetSetDescr_Type"]
    pub static mut PyGetSetDescr_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMemberDescr_Type"]
    pub static mut PyMemberDescr_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyMethodDescr_Type"]
    pub static mut PyMethodDescr_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyWrapperDescr_Type"]
    pub static mut PyWrapperDescr_Type: PyTypeObject;
}
extern "C" {
    #[link_name = "\u{1}_PyPyInstanceMethod_Type"]
    pub static mut PyInstanceMethod_Type: PyTypeObject;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct wrapperbase {
    pub _address: u8,
}
